ARM GAS  C:\Users\tamqu\AppData\Local\Temp\cc9dvVZc.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"sysmem.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.bss.__sbrk_heap_end,"aw",%nobits
  16              		.align	2
  19              	__sbrk_heap_end:
  20 0000 00000000 		.space	4
  21              		.section	.text._sbrk,"ax",%progbits
  22              		.align	1
  23              		.global	_sbrk
  24              		.arch armv7-m
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.fpu softvfp
  30              	_sbrk:
  31              	.LFB0:
  32              		.file 1 "./Core/Src/sysmem.c"
   1:./Core/Src/sysmem.c **** /**
   2:./Core/Src/sysmem.c ****  ******************************************************************************
   3:./Core/Src/sysmem.c ****  * @file      sysmem.c
   4:./Core/Src/sysmem.c ****  * @author    Generated by STM32CubeIDE
   5:./Core/Src/sysmem.c ****  * @brief     STM32CubeIDE System Memory calls file
   6:./Core/Src/sysmem.c ****  *
   7:./Core/Src/sysmem.c ****  *            For more information about which C functions
   8:./Core/Src/sysmem.c ****  *            need which of these lowlevel functions
   9:./Core/Src/sysmem.c ****  *            please consult the newlib libc manual
  10:./Core/Src/sysmem.c ****  ******************************************************************************
  11:./Core/Src/sysmem.c ****  * @attention
  12:./Core/Src/sysmem.c ****  *
  13:./Core/Src/sysmem.c ****  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  14:./Core/Src/sysmem.c ****  * All rights reserved.</center></h2>
  15:./Core/Src/sysmem.c ****  *
  16:./Core/Src/sysmem.c ****  * This software component is licensed by ST under BSD 3-Clause license,
  17:./Core/Src/sysmem.c ****  * the "License"; You may not use this file except in compliance with the
  18:./Core/Src/sysmem.c ****  * License. You may obtain a copy of the License at:
  19:./Core/Src/sysmem.c ****  *                        opensource.org/licenses/BSD-3-Clause
  20:./Core/Src/sysmem.c ****  *
  21:./Core/Src/sysmem.c ****  ******************************************************************************
  22:./Core/Src/sysmem.c ****  */
  23:./Core/Src/sysmem.c **** 
  24:./Core/Src/sysmem.c **** /* Includes */
  25:./Core/Src/sysmem.c **** #include <errno.h>
  26:./Core/Src/sysmem.c **** #include <stdint.h>
  27:./Core/Src/sysmem.c **** 
  28:./Core/Src/sysmem.c **** /**
ARM GAS  C:\Users\tamqu\AppData\Local\Temp\cc9dvVZc.s 			page 2


  29:./Core/Src/sysmem.c ****  * Pointer to the current high watermark of the heap usage
  30:./Core/Src/sysmem.c ****  */
  31:./Core/Src/sysmem.c **** static uint8_t *__sbrk_heap_end = NULL;
  32:./Core/Src/sysmem.c **** 
  33:./Core/Src/sysmem.c **** /**
  34:./Core/Src/sysmem.c ****  * @brief _sbrk() allocates memory to the newlib heap and is used by malloc
  35:./Core/Src/sysmem.c ****  *        and others from the C library
  36:./Core/Src/sysmem.c ****  *
  37:./Core/Src/sysmem.c ****  * @verbatim
  38:./Core/Src/sysmem.c ****  * ############################################################################
  39:./Core/Src/sysmem.c ****  * #  .data  #  .bss  #       newlib heap       #          MSP stack          #
  40:./Core/Src/sysmem.c ****  * #         #        #                         # Reserved by _Min_Stack_Size #
  41:./Core/Src/sysmem.c ****  * ############################################################################
  42:./Core/Src/sysmem.c ****  * ^-- RAM start      ^-- _end                             _estack, RAM end --^
  43:./Core/Src/sysmem.c ****  * @endverbatim
  44:./Core/Src/sysmem.c ****  *
  45:./Core/Src/sysmem.c ****  * This implementation starts allocating at the '_end' linker symbol
  46:./Core/Src/sysmem.c ****  * The '_Min_Stack_Size' linker symbol reserves a memory for the MSP stack
  47:./Core/Src/sysmem.c ****  * The implementation considers '_estack' linker symbol to be RAM end
  48:./Core/Src/sysmem.c ****  * NOTE: If the MSP stack, at any point during execution, grows larger than the
  49:./Core/Src/sysmem.c ****  * reserved size, please increase the '_Min_Stack_Size'.
  50:./Core/Src/sysmem.c ****  *
  51:./Core/Src/sysmem.c ****  * @param incr Memory size
  52:./Core/Src/sysmem.c ****  * @return Pointer to allocated memory
  53:./Core/Src/sysmem.c ****  */
  54:./Core/Src/sysmem.c **** void *_sbrk(ptrdiff_t incr)
  55:./Core/Src/sysmem.c **** {
  33              		.loc 1 55 1
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 24
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 86B0     		sub	sp, sp, #24
  42              		.cfi_def_cfa_offset 32
  43 0004 00AF     		add	r7, sp, #0
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
  56:./Core/Src/sysmem.c ****   extern uint8_t _end; /* Symbol defined in the linker script */
  57:./Core/Src/sysmem.c ****   extern uint8_t _estack; /* Symbol defined in the linker script */
  58:./Core/Src/sysmem.c ****   extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  59:./Core/Src/sysmem.c ****   const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  46              		.loc 1 59 32
  47 0008 144A     		ldr	r2, .L5
  48              		.loc 1 59 53
  49 000a 154B     		ldr	r3, .L5+4
  50              		.loc 1 59 18
  51 000c D31A     		subs	r3, r2, r3
  52 000e 7B61     		str	r3, [r7, #20]
  60:./Core/Src/sysmem.c ****   const uint8_t *max_heap = (uint8_t *)stack_limit;
  53              		.loc 1 60 18
  54 0010 7B69     		ldr	r3, [r7, #20]
  55 0012 3B61     		str	r3, [r7, #16]
  61:./Core/Src/sysmem.c ****   uint8_t *prev_heap_end;
  62:./Core/Src/sysmem.c **** 
ARM GAS  C:\Users\tamqu\AppData\Local\Temp\cc9dvVZc.s 			page 3


  63:./Core/Src/sysmem.c ****   /* Initialize heap end at first call */
  64:./Core/Src/sysmem.c ****   if (NULL == __sbrk_heap_end)
  56              		.loc 1 64 12
  57 0014 134B     		ldr	r3, .L5+8
  58 0016 1B68     		ldr	r3, [r3]
  59              		.loc 1 64 6
  60 0018 002B     		cmp	r3, #0
  61 001a 02D1     		bne	.L2
  65:./Core/Src/sysmem.c ****   {
  66:./Core/Src/sysmem.c ****     __sbrk_heap_end = &_end;
  62              		.loc 1 66 21
  63 001c 114B     		ldr	r3, .L5+8
  64 001e 124A     		ldr	r2, .L5+12
  65 0020 1A60     		str	r2, [r3]
  66              	.L2:
  67:./Core/Src/sysmem.c ****   }
  68:./Core/Src/sysmem.c **** 
  69:./Core/Src/sysmem.c ****   /* Protect heap from growing into the reserved MSP stack */
  70:./Core/Src/sysmem.c ****   if (__sbrk_heap_end + incr > max_heap)
  67              		.loc 1 70 23
  68 0022 104B     		ldr	r3, .L5+8
  69 0024 1A68     		ldr	r2, [r3]
  70 0026 7B68     		ldr	r3, [r7, #4]
  71 0028 1344     		add	r3, r3, r2
  72              		.loc 1 70 6
  73 002a 3A69     		ldr	r2, [r7, #16]
  74 002c 9A42     		cmp	r2, r3
  75 002e 07D2     		bcs	.L3
  71:./Core/Src/sysmem.c ****   {
  72:./Core/Src/sysmem.c ****     errno = ENOMEM;
  76              		.loc 1 72 5
  77 0030 FFF7FEFF 		bl	__errno
  78 0034 0346     		mov	r3, r0
  79              		.loc 1 72 11
  80 0036 0C22     		movs	r2, #12
  81 0038 1A60     		str	r2, [r3]
  73:./Core/Src/sysmem.c ****     return (void *)-1;
  82              		.loc 1 73 12
  83 003a 4FF0FF33 		mov	r3, #-1
  84 003e 09E0     		b	.L4
  85              	.L3:
  74:./Core/Src/sysmem.c ****   }
  75:./Core/Src/sysmem.c **** 
  76:./Core/Src/sysmem.c ****   prev_heap_end = __sbrk_heap_end;
  86              		.loc 1 76 17
  87 0040 084B     		ldr	r3, .L5+8
  88 0042 1B68     		ldr	r3, [r3]
  89 0044 FB60     		str	r3, [r7, #12]
  77:./Core/Src/sysmem.c ****   __sbrk_heap_end += incr;
  90              		.loc 1 77 19
  91 0046 074B     		ldr	r3, .L5+8
  92 0048 1A68     		ldr	r2, [r3]
  93 004a 7B68     		ldr	r3, [r7, #4]
  94 004c 1344     		add	r3, r3, r2
  95 004e 054A     		ldr	r2, .L5+8
  96 0050 1360     		str	r3, [r2]
  78:./Core/Src/sysmem.c **** 
ARM GAS  C:\Users\tamqu\AppData\Local\Temp\cc9dvVZc.s 			page 4


  79:./Core/Src/sysmem.c ****   return (void *)prev_heap_end;
  97              		.loc 1 79 10
  98 0052 FB68     		ldr	r3, [r7, #12]
  99              	.L4:
  80:./Core/Src/sysmem.c **** }
 100              		.loc 1 80 1
 101 0054 1846     		mov	r0, r3
 102 0056 1837     		adds	r7, r7, #24
 103              		.cfi_def_cfa_offset 8
 104 0058 BD46     		mov	sp, r7
 105              		.cfi_def_cfa_register 13
 106              		@ sp needed
 107 005a 80BD     		pop	{r7, pc}
 108              	.L6:
 109              		.align	2
 110              	.L5:
 111 005c 00000000 		.word	_estack
 112 0060 00000000 		.word	_Min_Stack_Size
 113 0064 00000000 		.word	__sbrk_heap_end
 114 0068 00000000 		.word	_end
 115              		.cfi_endproc
 116              	.LFE0:
 118              		.text
 119              	.Letext0:
 120              		.file 2 "c:\\st\\stm32cubeide_1.7.0\\stm32cubeide\\plugins\\com.st.stm32cube.ide.mcu.externaltools
 121              		.file 3 "c:\\st\\stm32cubeide_1.7.0\\stm32cubeide\\plugins\\com.st.stm32cube.ide.mcu.externaltools
 122              		.file 4 "c:\\st\\stm32cubeide_1.7.0\\stm32cubeide\\plugins\\com.st.stm32cube.ide.mcu.externaltools
 123              		.file 5 "c:\\st\\stm32cubeide_1.7.0\\stm32cubeide\\plugins\\com.st.stm32cube.ide.mcu.externaltools
 124              		.file 6 "c:\\st\\stm32cubeide_1.7.0\\stm32cubeide\\plugins\\com.st.stm32cube.ide.mcu.externaltools
 125              		.file 7 "c:\\st\\stm32cubeide_1.7.0\\stm32cubeide\\plugins\\com.st.stm32cube.ide.mcu.externaltools
 126              		.file 8 "c:\\st\\stm32cubeide_1.7.0\\stm32cubeide\\plugins\\com.st.stm32cube.ide.mcu.externaltools
ARM GAS  C:\Users\tamqu\AppData\Local\Temp\cc9dvVZc.s 			page 5


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sysmem.c
C:\Users\tamqu\AppData\Local\Temp\cc9dvVZc.s:16     .bss.__sbrk_heap_end:0000000000000000 $d
C:\Users\tamqu\AppData\Local\Temp\cc9dvVZc.s:19     .bss.__sbrk_heap_end:0000000000000000 __sbrk_heap_end
C:\Users\tamqu\AppData\Local\Temp\cc9dvVZc.s:22     .text._sbrk:0000000000000000 $t
C:\Users\tamqu\AppData\Local\Temp\cc9dvVZc.s:30     .text._sbrk:0000000000000000 _sbrk
C:\Users\tamqu\AppData\Local\Temp\cc9dvVZc.s:111    .text._sbrk:000000000000005c $d
                           .group:0000000000000000 wm4.0.e890922d021f7fff2fbf219cb2b38f03
                           .group:0000000000000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:0000000000000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:0000000000000000 wm4.newlib.h.18.1c9fedb6b3cd797cff253cc0fd593ef2
                           .group:0000000000000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:0000000000000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:0000000000000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stddef.h.39.144cf5ddcd53cbfdac30259dc1a6c87f
                           .group:0000000000000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:0000000000000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:0000000000000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:0000000000000000 wm4.errno.h.14.6a5939d3ae7434a1e97991a97123b12d
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed

UNDEFINED SYMBOLS
__errno
_estack
_Min_Stack_Size
_end
