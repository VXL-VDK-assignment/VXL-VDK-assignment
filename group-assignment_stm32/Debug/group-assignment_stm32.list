
group-assignment_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000437c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f0  080044f0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080044f0  080044f0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044f0  080044f0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080044f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000090  08004588  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004588  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010240  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b6  00000000  00000000  000302f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000329b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00033710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189b7  00000000  00000000  00034360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f23b  00000000  00000000  0004cd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0af  00000000  00000000  0005bf52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7001  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b4  00000000  00000000  000e7054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004470 	.word	0x08004470

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004470 	.word	0x08004470

0800014c <initSomeVariables>:
int button_flag[NO_OF_BUTTONS];

int TimeOutForKeyPress[NO_OF_BUTTONS];
//init all KeyReg

void initSomeVariables() { //call this function in main.c
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i=0; i<NO_OF_BUTTONS; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e021      	b.n	800019c <initSomeVariables+0x50>
		button_flag[i] = 0; //flags
 8000158:	4a15      	ldr	r2, [pc, #84]	; (80001b0 <initSomeVariables+0x64>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg0[i] = NORMAL_STATE;
 8000162:	4a14      	ldr	r2, [pc, #80]	; (80001b4 <initSomeVariables+0x68>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg1[i] = NORMAL_STATE;
 800016c:	4a12      	ldr	r2, [pc, #72]	; (80001b8 <initSomeVariables+0x6c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg2[i] = NORMAL_STATE;
 8000176:	4a11      	ldr	r2, [pc, #68]	; (80001bc <initSomeVariables+0x70>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg3[i] = NORMAL_STATE;
 8000180:	4a0f      	ldr	r2, [pc, #60]	; (80001c0 <initSomeVariables+0x74>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2101      	movs	r1, #1
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TimeOutForKeyPress[i] = 300; //Auto change the buttons's state
 800018a:	4a0e      	ldr	r2, [pc, #56]	; (80001c4 <initSomeVariables+0x78>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000192:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<NO_OF_BUTTONS; i++) {
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	3301      	adds	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	2b03      	cmp	r3, #3
 80001a0:	ddda      	ble.n	8000158 <initSomeVariables+0xc>
	}
}
 80001a2:	bf00      	nop
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000154 	.word	0x20000154
 80001b4:	20000124 	.word	0x20000124
 80001b8:	20000134 	.word	0x20000134
 80001bc:	20000164 	.word	0x20000164
 80001c0:	20000114 	.word	0x20000114
 80001c4:	20000144 	.word	0x20000144

080001c8 <getKeyInput>:

void getKeyInput() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	for (int i=0; i<NO_OF_BUTTONS; i++) {
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e0d4      	b.n	800037e <getKeyInput+0x1b6>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2b03      	cmp	r3, #3
 80001d8:	d876      	bhi.n	80002c8 <getKeyInput+0x100>
 80001da:	a201      	add	r2, pc, #4	; (adr r2, 80001e0 <getKeyInput+0x18>)
 80001dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001e0:	080001f1 	.word	0x080001f1
 80001e4:	08000227 	.word	0x08000227
 80001e8:	0800025d 	.word	0x0800025d
 80001ec:	08000293 	.word	0x08000293
		switch(i) {
			case 0:
				KeyReg2[i] = KeyReg1[i];
 80001f0:	4a67      	ldr	r2, [pc, #412]	; (8000390 <getKeyInput+0x1c8>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4966      	ldr	r1, [pc, #408]	; (8000394 <getKeyInput+0x1cc>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg1[i] = KeyReg0[i];
 8000200:	4a65      	ldr	r2, [pc, #404]	; (8000398 <getKeyInput+0x1d0>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4961      	ldr	r1, [pc, #388]	; (8000390 <getKeyInput+0x1c8>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg0[i] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 8000210:	2102      	movs	r1, #2
 8000212:	4862      	ldr	r0, [pc, #392]	; (800039c <getKeyInput+0x1d4>)
 8000214:	f001 ff2c 	bl	8002070 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	4619      	mov	r1, r3
 800021c:	4a5e      	ldr	r2, [pc, #376]	; (8000398 <getKeyInput+0x1d0>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000224:	e051      	b.n	80002ca <getKeyInput+0x102>
			case 1:
				KeyReg2[i] = KeyReg1[i];
 8000226:	4a5a      	ldr	r2, [pc, #360]	; (8000390 <getKeyInput+0x1c8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	4959      	ldr	r1, [pc, #356]	; (8000394 <getKeyInput+0x1cc>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg1[i] = KeyReg0[i];
 8000236:	4a58      	ldr	r2, [pc, #352]	; (8000398 <getKeyInput+0x1d0>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023e:	4954      	ldr	r1, [pc, #336]	; (8000390 <getKeyInput+0x1c8>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg0[i] = HAL_GPIO_ReadPin(A2_GPIO_Port,A2_Pin);
 8000246:	2110      	movs	r1, #16
 8000248:	4854      	ldr	r0, [pc, #336]	; (800039c <getKeyInput+0x1d4>)
 800024a:	f001 ff11 	bl	8002070 <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	4619      	mov	r1, r3
 8000252:	4a51      	ldr	r2, [pc, #324]	; (8000398 <getKeyInput+0x1d0>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800025a:	e036      	b.n	80002ca <getKeyInput+0x102>
			case 2:
				KeyReg2[i] = KeyReg1[i];
 800025c:	4a4c      	ldr	r2, [pc, #304]	; (8000390 <getKeyInput+0x1c8>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000264:	494b      	ldr	r1, [pc, #300]	; (8000394 <getKeyInput+0x1cc>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg1[i] = KeyReg0[i];
 800026c:	4a4a      	ldr	r2, [pc, #296]	; (8000398 <getKeyInput+0x1d0>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000274:	4946      	ldr	r1, [pc, #280]	; (8000390 <getKeyInput+0x1c8>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg0[i] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 800027c:	2101      	movs	r1, #1
 800027e:	4848      	ldr	r0, [pc, #288]	; (80003a0 <getKeyInput+0x1d8>)
 8000280:	f001 fef6 	bl	8002070 <HAL_GPIO_ReadPin>
 8000284:	4603      	mov	r3, r0
 8000286:	4619      	mov	r1, r3
 8000288:	4a43      	ldr	r2, [pc, #268]	; (8000398 <getKeyInput+0x1d0>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000290:	e01b      	b.n	80002ca <getKeyInput+0x102>
			case 3:
				KeyReg2[i] = KeyReg1[i];
 8000292:	4a3f      	ldr	r2, [pc, #252]	; (8000390 <getKeyInput+0x1c8>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029a:	493e      	ldr	r1, [pc, #248]	; (8000394 <getKeyInput+0x1cc>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg1[i] = KeyReg0[i];
 80002a2:	4a3d      	ldr	r2, [pc, #244]	; (8000398 <getKeyInput+0x1d0>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002aa:	4939      	ldr	r1, [pc, #228]	; (8000390 <getKeyInput+0x1c8>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg0[i] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80002b2:	2101      	movs	r1, #1
 80002b4:	4839      	ldr	r0, [pc, #228]	; (800039c <getKeyInput+0x1d4>)
 80002b6:	f001 fedb 	bl	8002070 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4619      	mov	r1, r3
 80002be:	4a36      	ldr	r2, [pc, #216]	; (8000398 <getKeyInput+0x1d0>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80002c6:	e000      	b.n	80002ca <getKeyInput+0x102>
			default:
				//todo
				break;
 80002c8:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80002ca:	4a31      	ldr	r2, [pc, #196]	; (8000390 <getKeyInput+0x1c8>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d2:	4931      	ldr	r1, [pc, #196]	; (8000398 <getKeyInput+0x1d0>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d14c      	bne.n	8000378 <getKeyInput+0x1b0>
 80002de:	4a2c      	ldr	r2, [pc, #176]	; (8000390 <getKeyInput+0x1c8>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e6:	492b      	ldr	r1, [pc, #172]	; (8000394 <getKeyInput+0x1cc>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d142      	bne.n	8000378 <getKeyInput+0x1b0>
			if (KeyReg2[i] != KeyReg3[i]){
 80002f2:	4a28      	ldr	r2, [pc, #160]	; (8000394 <getKeyInput+0x1cc>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fa:	492a      	ldr	r1, [pc, #168]	; (80003a4 <getKeyInput+0x1dc>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000302:	429a      	cmp	r2, r3
 8000304:	d019      	beq.n	800033a <getKeyInput+0x172>
			  KeyReg3[i] = KeyReg2[i];
 8000306:	4a23      	ldr	r2, [pc, #140]	; (8000394 <getKeyInput+0x1cc>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800030e:	4925      	ldr	r1, [pc, #148]	; (80003a4 <getKeyInput+0x1dc>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg3[i] == PRESSED_STATE){
 8000316:	4a23      	ldr	r2, [pc, #140]	; (80003a4 <getKeyInput+0x1dc>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d12a      	bne.n	8000378 <getKeyInput+0x1b0>
				TimeOutForKeyPress[i] = 300;
 8000322:	4a21      	ldr	r2, [pc, #132]	; (80003a8 <getKeyInput+0x1e0>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800032a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				button_flag[i] = 1;
 800032e:	4a1f      	ldr	r2, [pc, #124]	; (80003ac <getKeyInput+0x1e4>)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2101      	movs	r1, #1
 8000334:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000338:	e01e      	b.n	8000378 <getKeyInput+0x1b0>
			  }
			} else{
				TimeOutForKeyPress[i]--;
 800033a:	4a1b      	ldr	r2, [pc, #108]	; (80003a8 <getKeyInput+0x1e0>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	1e5a      	subs	r2, r3, #1
 8000344:	4918      	ldr	r1, [pc, #96]	; (80003a8 <getKeyInput+0x1e0>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800034c:	4a16      	ldr	r2, [pc, #88]	; (80003a8 <getKeyInput+0x1e0>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d10f      	bne.n	8000378 <getKeyInput+0x1b0>
					if (KeyReg3[i] == PRESSED_STATE){
 8000358:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <getKeyInput+0x1dc>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d109      	bne.n	8000378 <getKeyInput+0x1b0>
						TimeOutForKeyPress[i] = 100;
 8000364:	4a10      	ldr	r2, [pc, #64]	; (80003a8 <getKeyInput+0x1e0>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2164      	movs	r1, #100	; 0x64
 800036a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						button_flag[i] = 1;
 800036e:	4a0f      	ldr	r2, [pc, #60]	; (80003ac <getKeyInput+0x1e4>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2101      	movs	r1, #1
 8000374:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<NO_OF_BUTTONS; i++) {
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b03      	cmp	r3, #3
 8000382:	f77f af27 	ble.w	80001d4 <getKeyInput+0xc>
				}
			}
		}

	}
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000134 	.word	0x20000134
 8000394:	20000164 	.word	0x20000164
 8000398:	20000124 	.word	0x20000124
 800039c:	40010800 	.word	0x40010800
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	20000114 	.word	0x20000114
 80003a8:	20000144 	.word	0x20000144
 80003ac:	20000154 	.word	0x20000154

080003b0 <isButtonPressed>:

int isButtonPressed(int index) {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 80003b8:	4a09      	ldr	r2, [pc, #36]	; (80003e0 <isButtonPressed+0x30>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d106      	bne.n	80003d2 <isButtonPressed+0x22>
		button_flag[index] = 0;
 80003c4:	4a06      	ldr	r2, [pc, #24]	; (80003e0 <isButtonPressed+0x30>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2100      	movs	r1, #0
 80003ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003ce:	2301      	movs	r3, #1
 80003d0:	e000      	b.n	80003d4 <isButtonPressed+0x24>
	}
	return 0;
 80003d2:	2300      	movs	r3, #0
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	20000154 	.word	0x20000154

080003e4 <getTimeAtIndex0>:
 */
#include "fsm_automatic.h"
#include "global.h"


int getTimeAtIndex0(int time) {
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	int temp = time/10;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a06      	ldr	r2, [pc, #24]	; (8000408 <getTimeAtIndex0+0x24>)
 80003f0:	fb82 1203 	smull	r1, r2, r2, r3
 80003f4:	1092      	asrs	r2, r2, #2
 80003f6:	17db      	asrs	r3, r3, #31
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	60fb      	str	r3, [r7, #12]
	return temp;
 80003fc:	68fb      	ldr	r3, [r7, #12]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	66666667 	.word	0x66666667

0800040c <getTimeAtIndex1>:
int getTimeAtIndex1(int time) {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	return time%10;
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <getTimeAtIndex1+0x2c>)
 8000418:	fb83 1302 	smull	r1, r3, r3, r2
 800041c:	1099      	asrs	r1, r3, #2
 800041e:	17d3      	asrs	r3, r2, #31
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	460b      	mov	r3, r1
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	440b      	add	r3, r1
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	1ad1      	subs	r1, r2, r3
 800042c:	460b      	mov	r3, r1
}
 800042e:	4618      	mov	r0, r3
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	66666667 	.word	0x66666667

0800043c <fsm_automatic_run1>:

int led7SegState = 1; //used for printing a particular case in virtual terminal
int led7SegState2 = 1;//used for printing a particular case in virtual terminal
int checkflag = 0;
void fsm_automatic_run1() {
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
	char buffer[10];
	switch(LANE1_STATUS) { //for lane 1
 8000442:	4bae      	ldr	r3, [pc, #696]	; (80006fc <fsm_automatic_run1+0x2c0>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	3b01      	subs	r3, #1
 8000448:	2b03      	cmp	r3, #3
 800044a:	f200 81bb 	bhi.w	80007c4 <fsm_automatic_run1+0x388>
 800044e:	a201      	add	r2, pc, #4	; (adr r2, 8000454 <fsm_automatic_run1+0x18>)
 8000450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000454:	08000465 	.word	0x08000465
 8000458:	0800048f 	.word	0x0800048f
 800045c:	08000593 	.word	0x08000593
 8000460:	08000697 	.word	0x08000697
		case LANE1_INIT:
			initTrafficLight1();
 8000464:	f000 fe24 	bl	80010b0 <initTrafficLight1>
			LANE1_STATUS = LANE1_RED;
 8000468:	4ba4      	ldr	r3, [pc, #656]	; (80006fc <fsm_automatic_run1+0x2c0>)
 800046a:	2202      	movs	r2, #2
 800046c:	601a      	str	r2, [r3, #0]
			setTimer1(led_duration[0]*1000);
 800046e:	4ba4      	ldr	r3, [pc, #656]	; (8000700 <fsm_automatic_run1+0x2c4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000476:	fb02 f303 	mul.w	r3, r2, r3
 800047a:	4618      	mov	r0, r3
 800047c:	f001 f818 	bl	80014b0 <setTimer1>

			timer4_flag = 1;
 8000480:	4ba0      	ldr	r3, [pc, #640]	; (8000704 <fsm_automatic_run1+0x2c8>)
 8000482:	2201      	movs	r2, #1
 8000484:	601a      	str	r2, [r3, #0]
			led7SegState = 1;
 8000486:	4ba0      	ldr	r3, [pc, #640]	; (8000708 <fsm_automatic_run1+0x2cc>)
 8000488:	2201      	movs	r2, #1
 800048a:	601a      	str	r2, [r3, #0]
			break;
 800048c:	e1a1      	b.n	80007d2 <fsm_automatic_run1+0x396>
		case LANE1_RED:
			setTrafficRed1();
 800048e:	f000 fe57 	bl	8001140 <setTrafficRed1>

			if (timer4_flag == 1) {
 8000492:	4b9c      	ldr	r3, [pc, #624]	; (8000704 <fsm_automatic_run1+0x2c8>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d15c      	bne.n	8000554 <fsm_automatic_run1+0x118>
				switch(led7SegState) {
 800049a:	4b9b      	ldr	r3, [pc, #620]	; (8000708 <fsm_automatic_run1+0x2cc>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	f200 818f 	bhi.w	80007c4 <fsm_automatic_run1+0x388>
 80004a6:	a201      	add	r2, pc, #4	; (adr r2, 80004ac <fsm_automatic_run1+0x70>)
 80004a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ac:	080004bd 	.word	0x080004bd
 80004b0:	080004f5 	.word	0x080004f5
 80004b4:	0800052d 	.word	0x0800052d
 80004b8:	0800053b 	.word	0x0800053b
				case 1:
//					enableLed7Seg1();
//					display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[0]-countDownRed1)]);
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex0(led_duration[0]-countDownRed1));
 80004bc:	4b90      	ldr	r3, [pc, #576]	; (8000700 <fsm_automatic_run1+0x2c4>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	4b92      	ldr	r3, [pc, #584]	; (800070c <fsm_automatic_run1+0x2d0>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff ff8c 	bl	80003e4 <getTimeAtIndex0>
 80004cc:	4602      	mov	r2, r0
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	498f      	ldr	r1, [pc, #572]	; (8000710 <fsm_automatic_run1+0x2d4>)
 80004d2:	4618      	mov	r0, r3
 80004d4:	f003 fb92 	bl	8003bfc <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 80004d8:	1d39      	adds	r1, r7, #4
 80004da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004de:	220a      	movs	r2, #10
 80004e0:	488c      	ldr	r0, [pc, #560]	; (8000714 <fsm_automatic_run1+0x2d8>)
 80004e2:	f002 fe6e 	bl	80031c2 <HAL_UART_Transmit>
					setTimer4(250);
 80004e6:	20fa      	movs	r0, #250	; 0xfa
 80004e8:	f001 f836 	bl	8001558 <setTimer4>
					led7SegState = 2;
 80004ec:	4b86      	ldr	r3, [pc, #536]	; (8000708 <fsm_automatic_run1+0x2cc>)
 80004ee:	2202      	movs	r2, #2
 80004f0:	601a      	str	r2, [r3, #0]
					break;
 80004f2:	e02e      	b.n	8000552 <fsm_automatic_run1+0x116>
				case 2:
//					enableLed7Seg2();
//					display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[0]-countDownRed1)]);
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex1(led_duration[0]-countDownRed1));
 80004f4:	4b82      	ldr	r3, [pc, #520]	; (8000700 <fsm_automatic_run1+0x2c4>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	4b84      	ldr	r3, [pc, #528]	; (800070c <fsm_automatic_run1+0x2d0>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ff84 	bl	800040c <getTimeAtIndex1>
 8000504:	4602      	mov	r2, r0
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4981      	ldr	r1, [pc, #516]	; (8000710 <fsm_automatic_run1+0x2d4>)
 800050a:	4618      	mov	r0, r3
 800050c:	f003 fb76 	bl	8003bfc <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8000510:	1d39      	adds	r1, r7, #4
 8000512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000516:	220a      	movs	r2, #10
 8000518:	487e      	ldr	r0, [pc, #504]	; (8000714 <fsm_automatic_run1+0x2d8>)
 800051a:	f002 fe52 	bl	80031c2 <HAL_UART_Transmit>
					setTimer4(250);
 800051e:	20fa      	movs	r0, #250	; 0xfa
 8000520:	f001 f81a 	bl	8001558 <setTimer4>
					led7SegState = 3;
 8000524:	4b78      	ldr	r3, [pc, #480]	; (8000708 <fsm_automatic_run1+0x2cc>)
 8000526:	2203      	movs	r2, #3
 8000528:	601a      	str	r2, [r3, #0]
					break;
 800052a:	e012      	b.n	8000552 <fsm_automatic_run1+0x116>
				case 3:
//					enableLed7Seg3();
					setTimer4(250);
 800052c:	20fa      	movs	r0, #250	; 0xfa
 800052e:	f001 f813 	bl	8001558 <setTimer4>
					led7SegState = 4;
 8000532:	4b75      	ldr	r3, [pc, #468]	; (8000708 <fsm_automatic_run1+0x2cc>)
 8000534:	2204      	movs	r2, #4
 8000536:	601a      	str	r2, [r3, #0]
					break;
 8000538:	e00b      	b.n	8000552 <fsm_automatic_run1+0x116>
				case 4:
//					enableLed7Seg4();
					countDownRed1++;
 800053a:	4b74      	ldr	r3, [pc, #464]	; (800070c <fsm_automatic_run1+0x2d0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	4a72      	ldr	r2, [pc, #456]	; (800070c <fsm_automatic_run1+0x2d0>)
 8000542:	6013      	str	r3, [r2, #0]
					setTimer4(250);
 8000544:	20fa      	movs	r0, #250	; 0xfa
 8000546:	f001 f807 	bl	8001558 <setTimer4>
					led7SegState = 1;
 800054a:	4b6f      	ldr	r3, [pc, #444]	; (8000708 <fsm_automatic_run1+0x2cc>)
 800054c:	2201      	movs	r2, #1
 800054e:	601a      	str	r2, [r3, #0]
					break;
 8000550:	bf00      	nop
				}
				default:
					break;
 8000552:	e137      	b.n	80007c4 <fsm_automatic_run1+0x388>
			}

			if(timer1_flag == 1) {
 8000554:	4b70      	ldr	r3, [pc, #448]	; (8000718 <fsm_automatic_run1+0x2dc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	f040 8135 	bne.w	80007c8 <fsm_automatic_run1+0x38c>
				setTimer1(led_duration[2]*1000);
 800055e:	4b68      	ldr	r3, [pc, #416]	; (8000700 <fsm_automatic_run1+0x2c4>)
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000566:	fb02 f303 	mul.w	r3, r2, r3
 800056a:	4618      	mov	r0, r3
 800056c:	f000 ffa0 	bl	80014b0 <setTimer1>
				LANE1_STATUS = LANE1_GREEN;
 8000570:	4b62      	ldr	r3, [pc, #392]	; (80006fc <fsm_automatic_run1+0x2c0>)
 8000572:	2203      	movs	r2, #3
 8000574:	601a      	str	r2, [r3, #0]

				countDownRed1 = 0; //reset
 8000576:	4b65      	ldr	r3, [pc, #404]	; (800070c <fsm_automatic_run1+0x2d0>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
				timer4_flag = 1;
 800057c:	4b61      	ldr	r3, [pc, #388]	; (8000704 <fsm_automatic_run1+0x2c8>)
 800057e:	2201      	movs	r2, #1
 8000580:	601a      	str	r2, [r3, #0]
				led7SegState = 1;
 8000582:	4b61      	ldr	r3, [pc, #388]	; (8000708 <fsm_automatic_run1+0x2cc>)
 8000584:	2201      	movs	r2, #1
 8000586:	601a      	str	r2, [r3, #0]

				counter = led_duration[2];
 8000588:	4b5d      	ldr	r3, [pc, #372]	; (8000700 <fsm_automatic_run1+0x2c4>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	4a63      	ldr	r2, [pc, #396]	; (800071c <fsm_automatic_run1+0x2e0>)
 800058e:	6013      	str	r3, [r2, #0]
			}
			break;
 8000590:	e11a      	b.n	80007c8 <fsm_automatic_run1+0x38c>
		case LANE1_GREEN:
			setTrafficGreen1();
 8000592:	f000 fdb1 	bl	80010f8 <setTrafficGreen1>

			if (timer4_flag == 1) {
 8000596:	4b5b      	ldr	r3, [pc, #364]	; (8000704 <fsm_automatic_run1+0x2c8>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d15b      	bne.n	8000656 <fsm_automatic_run1+0x21a>
				switch(led7SegState) {
 800059e:	4b5a      	ldr	r3, [pc, #360]	; (8000708 <fsm_automatic_run1+0x2cc>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	2b03      	cmp	r3, #3
 80005a6:	d857      	bhi.n	8000658 <fsm_automatic_run1+0x21c>
 80005a8:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <fsm_automatic_run1+0x174>)
 80005aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ae:	bf00      	nop
 80005b0:	080005c1 	.word	0x080005c1
 80005b4:	080005f9 	.word	0x080005f9
 80005b8:	08000631 	.word	0x08000631
 80005bc:	0800063f 	.word	0x0800063f
				case 1:
//					enableLed7Seg1();
//					display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[2]-countDownGreen1)]);
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex0(led_duration[2]-countDownGreen1));
 80005c0:	4b4f      	ldr	r3, [pc, #316]	; (8000700 <fsm_automatic_run1+0x2c4>)
 80005c2:	689a      	ldr	r2, [r3, #8]
 80005c4:	4b56      	ldr	r3, [pc, #344]	; (8000720 <fsm_automatic_run1+0x2e4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ff0a 	bl	80003e4 <getTimeAtIndex0>
 80005d0:	4602      	mov	r2, r0
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	494e      	ldr	r1, [pc, #312]	; (8000710 <fsm_automatic_run1+0x2d4>)
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fb10 	bl	8003bfc <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	220a      	movs	r2, #10
 80005e4:	484b      	ldr	r0, [pc, #300]	; (8000714 <fsm_automatic_run1+0x2d8>)
 80005e6:	f002 fdec 	bl	80031c2 <HAL_UART_Transmit>
					setTimer4(250);
 80005ea:	20fa      	movs	r0, #250	; 0xfa
 80005ec:	f000 ffb4 	bl	8001558 <setTimer4>
					led7SegState = 2;
 80005f0:	4b45      	ldr	r3, [pc, #276]	; (8000708 <fsm_automatic_run1+0x2cc>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	601a      	str	r2, [r3, #0]
					break;
 80005f6:	e02f      	b.n	8000658 <fsm_automatic_run1+0x21c>
				case 2:
//					enableLed7Seg2();
//					display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[2]-countDownGreen1)]);
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex1(led_duration[2]-countDownGreen1));
 80005f8:	4b41      	ldr	r3, [pc, #260]	; (8000700 <fsm_automatic_run1+0x2c4>)
 80005fa:	689a      	ldr	r2, [r3, #8]
 80005fc:	4b48      	ldr	r3, [pc, #288]	; (8000720 <fsm_automatic_run1+0x2e4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ff02 	bl	800040c <getTimeAtIndex1>
 8000608:	4602      	mov	r2, r0
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4940      	ldr	r1, [pc, #256]	; (8000710 <fsm_automatic_run1+0x2d4>)
 800060e:	4618      	mov	r0, r3
 8000610:	f003 faf4 	bl	8003bfc <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8000614:	1d39      	adds	r1, r7, #4
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	220a      	movs	r2, #10
 800061c:	483d      	ldr	r0, [pc, #244]	; (8000714 <fsm_automatic_run1+0x2d8>)
 800061e:	f002 fdd0 	bl	80031c2 <HAL_UART_Transmit>
					setTimer4(250);
 8000622:	20fa      	movs	r0, #250	; 0xfa
 8000624:	f000 ff98 	bl	8001558 <setTimer4>
					led7SegState = 3;
 8000628:	4b37      	ldr	r3, [pc, #220]	; (8000708 <fsm_automatic_run1+0x2cc>)
 800062a:	2203      	movs	r2, #3
 800062c:	601a      	str	r2, [r3, #0]
					break;
 800062e:	e013      	b.n	8000658 <fsm_automatic_run1+0x21c>
				case 3:
//					enableLed7Seg3();
					setTimer4(250);
 8000630:	20fa      	movs	r0, #250	; 0xfa
 8000632:	f000 ff91 	bl	8001558 <setTimer4>
					led7SegState = 4;
 8000636:	4b34      	ldr	r3, [pc, #208]	; (8000708 <fsm_automatic_run1+0x2cc>)
 8000638:	2204      	movs	r2, #4
 800063a:	601a      	str	r2, [r3, #0]
					break;
 800063c:	e00c      	b.n	8000658 <fsm_automatic_run1+0x21c>
				case 4:
//					enableLed7Seg4();
					countDownGreen1++;
 800063e:	4b38      	ldr	r3, [pc, #224]	; (8000720 <fsm_automatic_run1+0x2e4>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	4a36      	ldr	r2, [pc, #216]	; (8000720 <fsm_automatic_run1+0x2e4>)
 8000646:	6013      	str	r3, [r2, #0]
					setTimer4(250);
 8000648:	20fa      	movs	r0, #250	; 0xfa
 800064a:	f000 ff85 	bl	8001558 <setTimer4>
					led7SegState = 1;
 800064e:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <fsm_automatic_run1+0x2cc>)
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
					break;
 8000654:	e000      	b.n	8000658 <fsm_automatic_run1+0x21c>
				}
			}
 8000656:	bf00      	nop

			if(timer1_flag == 1) {
 8000658:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <fsm_automatic_run1+0x2dc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	f040 80b5 	bne.w	80007cc <fsm_automatic_run1+0x390>
				setTimer1(led_duration[1]*1000);
 8000662:	4b27      	ldr	r3, [pc, #156]	; (8000700 <fsm_automatic_run1+0x2c4>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800066a:	fb02 f303 	mul.w	r3, r2, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ff1e 	bl	80014b0 <setTimer1>
				LANE1_STATUS = LANE1_YELLOW;
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <fsm_automatic_run1+0x2c0>)
 8000676:	2204      	movs	r2, #4
 8000678:	601a      	str	r2, [r3, #0]

				countDownGreen1 = 0; //reset
 800067a:	4b29      	ldr	r3, [pc, #164]	; (8000720 <fsm_automatic_run1+0x2e4>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
				timer4_flag = 1;
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <fsm_automatic_run1+0x2c8>)
 8000682:	2201      	movs	r2, #1
 8000684:	601a      	str	r2, [r3, #0]
				led7SegState = 1;//
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <fsm_automatic_run1+0x2cc>)
 8000688:	2201      	movs	r2, #1
 800068a:	601a      	str	r2, [r3, #0]

				counter = led_duration[1];
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <fsm_automatic_run1+0x2c4>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4a22      	ldr	r2, [pc, #136]	; (800071c <fsm_automatic_run1+0x2e0>)
 8000692:	6013      	str	r3, [r2, #0]
			}
			break;
 8000694:	e09a      	b.n	80007cc <fsm_automatic_run1+0x390>
		case LANE1_YELLOW:
			setTrafficYellow1();
 8000696:	f000 fd77 	bl	8001188 <setTrafficYellow1>

			if (timer4_flag == 1) {
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <fsm_automatic_run1+0x2c8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d171      	bne.n	8000786 <fsm_automatic_run1+0x34a>
				switch(led7SegState) {
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <fsm_automatic_run1+0x2cc>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d86d      	bhi.n	8000788 <fsm_automatic_run1+0x34c>
 80006ac:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <fsm_automatic_run1+0x278>)
 80006ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b2:	bf00      	nop
 80006b4:	080006c5 	.word	0x080006c5
 80006b8:	08000729 	.word	0x08000729
 80006bc:	08000761 	.word	0x08000761
 80006c0:	0800076f 	.word	0x0800076f
				case 1:
//					enableLed7Seg1();
//					display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[1]-countDownYellow1)]);
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex0(led_duration[1]-countDownYellow1));
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <fsm_automatic_run1+0x2c4>)
 80006c6:	685a      	ldr	r2, [r3, #4]
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <fsm_automatic_run1+0x2e8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fe88 	bl	80003e4 <getTimeAtIndex0>
 80006d4:	4602      	mov	r2, r0
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	490d      	ldr	r1, [pc, #52]	; (8000710 <fsm_automatic_run1+0x2d4>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fa8e 	bl	8003bfc <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 80006e0:	1d39      	adds	r1, r7, #4
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	220a      	movs	r2, #10
 80006e8:	480a      	ldr	r0, [pc, #40]	; (8000714 <fsm_automatic_run1+0x2d8>)
 80006ea:	f002 fd6a 	bl	80031c2 <HAL_UART_Transmit>
					setTimer4(250);
 80006ee:	20fa      	movs	r0, #250	; 0xfa
 80006f0:	f000 ff32 	bl	8001558 <setTimer4>
					led7SegState = 2;
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <fsm_automatic_run1+0x2cc>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	601a      	str	r2, [r3, #0]
					break;
 80006fa:	e045      	b.n	8000788 <fsm_automatic_run1+0x34c>
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000014 	.word	0x20000014
 8000704:	200000f8 	.word	0x200000f8
 8000708:	20000000 	.word	0x20000000
 800070c:	200000b0 	.word	0x200000b0
 8000710:	08004488 	.word	0x08004488
 8000714:	200001c0 	.word	0x200001c0
 8000718:	200000e0 	.word	0x200000e0
 800071c:	20000174 	.word	0x20000174
 8000720:	200000b8 	.word	0x200000b8
 8000724:	200000b4 	.word	0x200000b4
				case 2:
//					enableLed7Seg2();
//					display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[1]-countDownYellow1)]);
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex1(led_duration[1]-countDownYellow1));
 8000728:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <fsm_automatic_run1+0x3a0>)
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <fsm_automatic_run1+0x3a4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fe6a 	bl	800040c <getTimeAtIndex1>
 8000738:	4602      	mov	r2, r0
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4929      	ldr	r1, [pc, #164]	; (80007e4 <fsm_automatic_run1+0x3a8>)
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fa5c 	bl	8003bfc <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8000744:	1d39      	adds	r1, r7, #4
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	220a      	movs	r2, #10
 800074c:	4826      	ldr	r0, [pc, #152]	; (80007e8 <fsm_automatic_run1+0x3ac>)
 800074e:	f002 fd38 	bl	80031c2 <HAL_UART_Transmit>
					setTimer4(250);
 8000752:	20fa      	movs	r0, #250	; 0xfa
 8000754:	f000 ff00 	bl	8001558 <setTimer4>
					led7SegState = 3;
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <fsm_automatic_run1+0x3b0>)
 800075a:	2203      	movs	r2, #3
 800075c:	601a      	str	r2, [r3, #0]
					break;
 800075e:	e013      	b.n	8000788 <fsm_automatic_run1+0x34c>
				case 3:
//					enableLed7Seg3();
					setTimer4(250);
 8000760:	20fa      	movs	r0, #250	; 0xfa
 8000762:	f000 fef9 	bl	8001558 <setTimer4>
					led7SegState = 4;
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <fsm_automatic_run1+0x3b0>)
 8000768:	2204      	movs	r2, #4
 800076a:	601a      	str	r2, [r3, #0]
					break;
 800076c:	e00c      	b.n	8000788 <fsm_automatic_run1+0x34c>
				case 4:
//					enableLed7Seg4();
					countDownYellow1++;
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <fsm_automatic_run1+0x3a4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3301      	adds	r3, #1
 8000774:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <fsm_automatic_run1+0x3a4>)
 8000776:	6013      	str	r3, [r2, #0]
					setTimer4(250);
 8000778:	20fa      	movs	r0, #250	; 0xfa
 800077a:	f000 feed 	bl	8001558 <setTimer4>
					led7SegState = 1;
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <fsm_automatic_run1+0x3b0>)
 8000780:	2201      	movs	r2, #1
 8000782:	601a      	str	r2, [r3, #0]
					break;
 8000784:	e000      	b.n	8000788 <fsm_automatic_run1+0x34c>
				}
			}
 8000786:	bf00      	nop

			if(timer1_flag == 1) {
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <fsm_automatic_run1+0x3b4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d11f      	bne.n	80007d0 <fsm_automatic_run1+0x394>
				setTimer1(led_duration[0]*1000);
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <fsm_automatic_run1+0x3a0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000798:	fb02 f303 	mul.w	r3, r2, r3
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fe87 	bl	80014b0 <setTimer1>
				LANE1_STATUS = LANE1_RED;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <fsm_automatic_run1+0x3b8>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	601a      	str	r2, [r3, #0]

				countDownYellow1 = 0; //reset
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <fsm_automatic_run1+0x3a4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
				timer4_flag = 1;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <fsm_automatic_run1+0x3bc>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
				led7SegState = 1;//
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <fsm_automatic_run1+0x3b0>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]

				counter = led_duration[0];
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <fsm_automatic_run1+0x3a0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <fsm_automatic_run1+0x3c0>)
 80007c0:	6013      	str	r3, [r2, #0]
			}
			break;
 80007c2:	e005      	b.n	80007d0 <fsm_automatic_run1+0x394>
					break;
 80007c4:	bf00      	nop
 80007c6:	e004      	b.n	80007d2 <fsm_automatic_run1+0x396>
			break;
 80007c8:	bf00      	nop
 80007ca:	e002      	b.n	80007d2 <fsm_automatic_run1+0x396>
			break;
 80007cc:	bf00      	nop
 80007ce:	e000      	b.n	80007d2 <fsm_automatic_run1+0x396>
			break;
 80007d0:	bf00      	nop
	}
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000014 	.word	0x20000014
 80007e0:	200000b4 	.word	0x200000b4
 80007e4:	08004488 	.word	0x08004488
 80007e8:	200001c0 	.word	0x200001c0
 80007ec:	20000000 	.word	0x20000000
 80007f0:	200000e0 	.word	0x200000e0
 80007f4:	20000008 	.word	0x20000008
 80007f8:	200000f8 	.word	0x200000f8
 80007fc:	20000174 	.word	0x20000174

08000800 <fsm_automatic_run2>:

void fsm_automatic_run2() {
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
	char buffer[10];
	switch(LANE2_STATUS) { //for lane 2
 8000806:	4bb1      	ldr	r3, [pc, #708]	; (8000acc <fsm_automatic_run2+0x2cc>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3b0b      	subs	r3, #11
 800080c:	2b03      	cmp	r3, #3
 800080e:	f200 81b2 	bhi.w	8000b76 <fsm_automatic_run2+0x376>
 8000812:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <fsm_automatic_run2+0x18>)
 8000814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000818:	08000829 	.word	0x08000829
 800081c:	08000853 	.word	0x08000853
 8000820:	0800094f 	.word	0x0800094f
 8000824:	08000a4b 	.word	0x08000a4b
		case LANE2_INIT:
			initTrafficLight2();
 8000828:	f000 fc56 	bl	80010d8 <initTrafficLight2>
			LANE2_STATUS = LANE2_GREEN;
 800082c:	4ba7      	ldr	r3, [pc, #668]	; (8000acc <fsm_automatic_run2+0x2cc>)
 800082e:	220d      	movs	r2, #13
 8000830:	601a      	str	r2, [r3, #0]
			setTimer2(led_duration[2]*1000);
 8000832:	4ba7      	ldr	r3, [pc, #668]	; (8000ad0 <fsm_automatic_run2+0x2d0>)
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800083a:	fb02 f303 	mul.w	r3, r2, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fe52 	bl	80014e8 <setTimer2>

			timer3_flag = 1; //
 8000844:	4ba3      	ldr	r3, [pc, #652]	; (8000ad4 <fsm_automatic_run2+0x2d4>)
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
			led7SegState2 = 1;
 800084a:	4ba3      	ldr	r3, [pc, #652]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]
			break;
 8000850:	e191      	b.n	8000b76 <fsm_automatic_run2+0x376>
		case LANE2_RED:
			setTrafficRed2();
 8000852:	f000 fc89 	bl	8001168 <setTrafficRed2>

			if (timer3_flag == 1) {
 8000856:	4b9f      	ldr	r3, [pc, #636]	; (8000ad4 <fsm_automatic_run2+0x2d4>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d15b      	bne.n	8000916 <fsm_automatic_run2+0x116>
				switch(led7SegState2) {
 800085e:	4b9e      	ldr	r3, [pc, #632]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3b01      	subs	r3, #1
 8000864:	2b03      	cmp	r3, #3
 8000866:	d857      	bhi.n	8000918 <fsm_automatic_run2+0x118>
 8000868:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <fsm_automatic_run2+0x70>)
 800086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086e:	bf00      	nop
 8000870:	08000881 	.word	0x08000881
 8000874:	0800088f 	.word	0x0800088f
 8000878:	0800089d 	.word	0x0800089d
 800087c:	080008d5 	.word	0x080008d5
				case 1:
//					enableLed7Seg1();
					setTimer3(250);
 8000880:	20fa      	movs	r0, #250	; 0xfa
 8000882:	f000 fe4d 	bl	8001520 <setTimer3>
					led7SegState2 = 2;
 8000886:	4b94      	ldr	r3, [pc, #592]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000888:	2202      	movs	r2, #2
 800088a:	601a      	str	r2, [r3, #0]
					break;
 800088c:	e044      	b.n	8000918 <fsm_automatic_run2+0x118>
				case 2:
//					enableLed7Seg2();
					setTimer3(250);
 800088e:	20fa      	movs	r0, #250	; 0xfa
 8000890:	f000 fe46 	bl	8001520 <setTimer3>
					led7SegState2 = 3;
 8000894:	4b90      	ldr	r3, [pc, #576]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000896:	2203      	movs	r2, #3
 8000898:	601a      	str	r2, [r3, #0]
					break;
 800089a:	e03d      	b.n	8000918 <fsm_automatic_run2+0x118>
				case 3:
//					display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[0]-countDownRed2)]);
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex0(led_duration[0]-countDownRed2));
 800089c:	4b8c      	ldr	r3, [pc, #560]	; (8000ad0 <fsm_automatic_run2+0x2d0>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b8e      	ldr	r3, [pc, #568]	; (8000adc <fsm_automatic_run2+0x2dc>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fd9c 	bl	80003e4 <getTimeAtIndex0>
 80008ac:	4602      	mov	r2, r0
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	498b      	ldr	r1, [pc, #556]	; (8000ae0 <fsm_automatic_run2+0x2e0>)
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 f9a2 	bl	8003bfc <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 80008b8:	1d39      	adds	r1, r7, #4
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	220a      	movs	r2, #10
 80008c0:	4888      	ldr	r0, [pc, #544]	; (8000ae4 <fsm_automatic_run2+0x2e4>)
 80008c2:	f002 fc7e 	bl	80031c2 <HAL_UART_Transmit>
//					enableLed7Seg3();
					setTimer3(250);
 80008c6:	20fa      	movs	r0, #250	; 0xfa
 80008c8:	f000 fe2a 	bl	8001520 <setTimer3>
					led7SegState2 = 4;
 80008cc:	4b82      	ldr	r3, [pc, #520]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	601a      	str	r2, [r3, #0]
					break;
 80008d2:	e021      	b.n	8000918 <fsm_automatic_run2+0x118>
				case 4:
//					display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[0]-countDownRed2)]);
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex1(led_duration[0]-countDownRed2));
 80008d4:	4b7e      	ldr	r3, [pc, #504]	; (8000ad0 <fsm_automatic_run2+0x2d0>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b80      	ldr	r3, [pc, #512]	; (8000adc <fsm_automatic_run2+0x2dc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fd94 	bl	800040c <getTimeAtIndex1>
 80008e4:	4602      	mov	r2, r0
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	497d      	ldr	r1, [pc, #500]	; (8000ae0 <fsm_automatic_run2+0x2e0>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 f986 	bl	8003bfc <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 80008f0:	1d39      	adds	r1, r7, #4
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	220a      	movs	r2, #10
 80008f8:	487a      	ldr	r0, [pc, #488]	; (8000ae4 <fsm_automatic_run2+0x2e4>)
 80008fa:	f002 fc62 	bl	80031c2 <HAL_UART_Transmit>
//					enableLed7Seg4();
					countDownRed2++;
 80008fe:	4b77      	ldr	r3, [pc, #476]	; (8000adc <fsm_automatic_run2+0x2dc>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	4a75      	ldr	r2, [pc, #468]	; (8000adc <fsm_automatic_run2+0x2dc>)
 8000906:	6013      	str	r3, [r2, #0]
					setTimer3(250);
 8000908:	20fa      	movs	r0, #250	; 0xfa
 800090a:	f000 fe09 	bl	8001520 <setTimer3>
					led7SegState2 = 1;
 800090e:	4b72      	ldr	r3, [pc, #456]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
					break;
 8000914:	e000      	b.n	8000918 <fsm_automatic_run2+0x118>
				}
			}
 8000916:	bf00      	nop

			if(timer2_flag == 1) {
 8000918:	4b73      	ldr	r3, [pc, #460]	; (8000ae8 <fsm_automatic_run2+0x2e8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	f040 8125 	bne.w	8000b6c <fsm_automatic_run2+0x36c>
				setTimer2(led_duration[2]*1000);
 8000922:	4b6b      	ldr	r3, [pc, #428]	; (8000ad0 <fsm_automatic_run2+0x2d0>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800092a:	fb02 f303 	mul.w	r3, r2, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fdda 	bl	80014e8 <setTimer2>
				LANE2_STATUS = LANE2_GREEN;
 8000934:	4b65      	ldr	r3, [pc, #404]	; (8000acc <fsm_automatic_run2+0x2cc>)
 8000936:	220d      	movs	r2, #13
 8000938:	601a      	str	r2, [r3, #0]

				countDownRed2 = 0; //reset
 800093a:	4b68      	ldr	r3, [pc, #416]	; (8000adc <fsm_automatic_run2+0x2dc>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
				led7SegState2 = 1; //
 8000940:	4b65      	ldr	r3, [pc, #404]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
				timer3_flag = 1;
 8000946:	4b63      	ldr	r3, [pc, #396]	; (8000ad4 <fsm_automatic_run2+0x2d4>)
 8000948:	2201      	movs	r2, #1
 800094a:	601a      	str	r2, [r3, #0]
			}
			break;
 800094c:	e10e      	b.n	8000b6c <fsm_automatic_run2+0x36c>
		case LANE2_GREEN:
			setTrafficGreen2();
 800094e:	f000 fbe7 	bl	8001120 <setTrafficGreen2>

			if (timer3_flag == 1) {
 8000952:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <fsm_automatic_run2+0x2d4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d15b      	bne.n	8000a12 <fsm_automatic_run2+0x212>
				switch(led7SegState2) {
 800095a:	4b5f      	ldr	r3, [pc, #380]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	2b03      	cmp	r3, #3
 8000962:	d857      	bhi.n	8000a14 <fsm_automatic_run2+0x214>
 8000964:	a201      	add	r2, pc, #4	; (adr r2, 800096c <fsm_automatic_run2+0x16c>)
 8000966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096a:	bf00      	nop
 800096c:	0800097d 	.word	0x0800097d
 8000970:	0800098b 	.word	0x0800098b
 8000974:	08000999 	.word	0x08000999
 8000978:	080009d1 	.word	0x080009d1
				case 1:
					//todo
//						enableLed7Seg1();
						setTimer3(250);
 800097c:	20fa      	movs	r0, #250	; 0xfa
 800097e:	f000 fdcf 	bl	8001520 <setTimer3>
						led7SegState2 = 2;
 8000982:	4b55      	ldr	r3, [pc, #340]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000984:	2202      	movs	r2, #2
 8000986:	601a      	str	r2, [r3, #0]
					break;
 8000988:	e044      	b.n	8000a14 <fsm_automatic_run2+0x214>
				case 2:
					//todo
//						enableLed7Seg2();
						setTimer3(250);
 800098a:	20fa      	movs	r0, #250	; 0xfa
 800098c:	f000 fdc8 	bl	8001520 <setTimer3>
						led7SegState2 = 3;
 8000990:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000992:	2203      	movs	r2, #3
 8000994:	601a      	str	r2, [r3, #0]
					break;
 8000996:	e03d      	b.n	8000a14 <fsm_automatic_run2+0x214>
				case 3:
//						display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[2]-countDownGreen2)]);
						sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex0(led_duration[2]-countDownGreen2));
 8000998:	4b4d      	ldr	r3, [pc, #308]	; (8000ad0 <fsm_automatic_run2+0x2d0>)
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	4b53      	ldr	r3, [pc, #332]	; (8000aec <fsm_automatic_run2+0x2ec>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fd1e 	bl	80003e4 <getTimeAtIndex0>
 80009a8:	4602      	mov	r2, r0
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	494c      	ldr	r1, [pc, #304]	; (8000ae0 <fsm_automatic_run2+0x2e0>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f003 f924 	bl	8003bfc <siprintf>
						HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 80009b4:	1d39      	adds	r1, r7, #4
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	220a      	movs	r2, #10
 80009bc:	4849      	ldr	r0, [pc, #292]	; (8000ae4 <fsm_automatic_run2+0x2e4>)
 80009be:	f002 fc00 	bl	80031c2 <HAL_UART_Transmit>
//						enableLed7Seg3();
						setTimer3(250);
 80009c2:	20fa      	movs	r0, #250	; 0xfa
 80009c4:	f000 fdac 	bl	8001520 <setTimer3>
						led7SegState2 = 4;
 80009c8:	4b43      	ldr	r3, [pc, #268]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	601a      	str	r2, [r3, #0]
					break;
 80009ce:	e021      	b.n	8000a14 <fsm_automatic_run2+0x214>
				case 4:
					//todo
//						display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[2]-countDownGreen2)]);
						sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex1(led_duration[2]-countDownGreen2));
 80009d0:	4b3f      	ldr	r3, [pc, #252]	; (8000ad0 <fsm_automatic_run2+0x2d0>)
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	4b45      	ldr	r3, [pc, #276]	; (8000aec <fsm_automatic_run2+0x2ec>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fd16 	bl	800040c <getTimeAtIndex1>
 80009e0:	4602      	mov	r2, r0
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	493e      	ldr	r1, [pc, #248]	; (8000ae0 <fsm_automatic_run2+0x2e0>)
 80009e6:	4618      	mov	r0, r3
 80009e8:	f003 f908 	bl	8003bfc <siprintf>
						HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 80009ec:	1d39      	adds	r1, r7, #4
 80009ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f2:	220a      	movs	r2, #10
 80009f4:	483b      	ldr	r0, [pc, #236]	; (8000ae4 <fsm_automatic_run2+0x2e4>)
 80009f6:	f002 fbe4 	bl	80031c2 <HAL_UART_Transmit>
//						enableLed7Seg4();
						countDownGreen2++;
 80009fa:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <fsm_automatic_run2+0x2ec>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	3301      	adds	r3, #1
 8000a00:	4a3a      	ldr	r2, [pc, #232]	; (8000aec <fsm_automatic_run2+0x2ec>)
 8000a02:	6013      	str	r3, [r2, #0]
						setTimer3(250);
 8000a04:	20fa      	movs	r0, #250	; 0xfa
 8000a06:	f000 fd8b 	bl	8001520 <setTimer3>
						led7SegState2 = 1;
 8000a0a:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
					break;
 8000a10:	e000      	b.n	8000a14 <fsm_automatic_run2+0x214>
				}
			}
 8000a12:	bf00      	nop

			if(timer2_flag == 1) {
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <fsm_automatic_run2+0x2e8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	f040 80a9 	bne.w	8000b70 <fsm_automatic_run2+0x370>
				setTimer2(led_duration[1]*1000);
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <fsm_automatic_run2+0x2d0>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a26:	fb02 f303 	mul.w	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fd5c 	bl	80014e8 <setTimer2>
				LANE2_STATUS = LANE2_YELLOW;
 8000a30:	4b26      	ldr	r3, [pc, #152]	; (8000acc <fsm_automatic_run2+0x2cc>)
 8000a32:	220e      	movs	r2, #14
 8000a34:	601a      	str	r2, [r3, #0]

				countDownGreen2 = 0; //reset
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <fsm_automatic_run2+0x2ec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
				led7SegState2 = 1;//
 8000a3c:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
				timer3_flag = 1;
 8000a42:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <fsm_automatic_run2+0x2d4>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a48:	e092      	b.n	8000b70 <fsm_automatic_run2+0x370>
		case LANE2_YELLOW:
			setTrafficYellow2();
 8000a4a:	f000 fbb1 	bl	80011b0 <setTrafficYellow2>

			if (timer3_flag == 1) {
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <fsm_automatic_run2+0x2d4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d16f      	bne.n	8000b36 <fsm_automatic_run2+0x336>
				switch(led7SegState2) {
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d86b      	bhi.n	8000b38 <fsm_automatic_run2+0x338>
 8000a60:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <fsm_automatic_run2+0x268>)
 8000a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a66:	bf00      	nop
 8000a68:	08000a79 	.word	0x08000a79
 8000a6c:	08000a87 	.word	0x08000a87
 8000a70:	08000a95 	.word	0x08000a95
 8000a74:	08000af5 	.word	0x08000af5
				case 1:
					//todo
//						enableLed7Seg1();
						setTimer3(250);
 8000a78:	20fa      	movs	r0, #250	; 0xfa
 8000a7a:	f000 fd51 	bl	8001520 <setTimer3>
						led7SegState2 = 2;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000a80:	2202      	movs	r2, #2
 8000a82:	601a      	str	r2, [r3, #0]
					break;
 8000a84:	e058      	b.n	8000b38 <fsm_automatic_run2+0x338>
				case 2:
					//todo
//						enableLed7Seg2();
						setTimer3(250);
 8000a86:	20fa      	movs	r0, #250	; 0xfa
 8000a88:	f000 fd4a 	bl	8001520 <setTimer3>
						led7SegState2 = 3;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000a8e:	2203      	movs	r2, #3
 8000a90:	601a      	str	r2, [r3, #0]
					break;
 8000a92:	e051      	b.n	8000b38 <fsm_automatic_run2+0x338>
				case 3:
//						display7SEG_1(segmentNumber[getTimeAtIndex0(led_duration[1]-countDownYellow2)]);
						sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex0(led_duration[1]-countDownYellow2));
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <fsm_automatic_run2+0x2d0>)
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <fsm_automatic_run2+0x2f0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fca0 	bl	80003e4 <getTimeAtIndex0>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <fsm_automatic_run2+0x2e0>)
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 f8a6 	bl	8003bfc <siprintf>
						HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8000ab0:	1d39      	adds	r1, r7, #4
 8000ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab6:	220a      	movs	r2, #10
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <fsm_automatic_run2+0x2e4>)
 8000aba:	f002 fb82 	bl	80031c2 <HAL_UART_Transmit>
//						enableLed7Seg3();
						setTimer3(250);
 8000abe:	20fa      	movs	r0, #250	; 0xfa
 8000ac0:	f000 fd2e 	bl	8001520 <setTimer3>
						led7SegState2 = 4;
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <fsm_automatic_run2+0x2d8>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	601a      	str	r2, [r3, #0]
					break;
 8000aca:	e035      	b.n	8000b38 <fsm_automatic_run2+0x338>
 8000acc:	2000000c 	.word	0x2000000c
 8000ad0:	20000014 	.word	0x20000014
 8000ad4:	200000f0 	.word	0x200000f0
 8000ad8:	20000004 	.word	0x20000004
 8000adc:	200000bc 	.word	0x200000bc
 8000ae0:	08004488 	.word	0x08004488
 8000ae4:	200001c0 	.word	0x200001c0
 8000ae8:	200000e8 	.word	0x200000e8
 8000aec:	200000c4 	.word	0x200000c4
 8000af0:	200000c0 	.word	0x200000c0
				case 4:
					//todo
//						display7SEG_1(segmentNumber[getTimeAtIndex1(led_duration[1]-countDownYellow2)]);
						sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex1(led_duration[1]-countDownYellow2));
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <fsm_automatic_run2+0x380>)
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <fsm_automatic_run2+0x384>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fc84 	bl	800040c <getTimeAtIndex1>
 8000b04:	4602      	mov	r2, r0
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	491f      	ldr	r1, [pc, #124]	; (8000b88 <fsm_automatic_run2+0x388>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 f876 	bl	8003bfc <siprintf>
						HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8000b10:	1d39      	adds	r1, r7, #4
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	220a      	movs	r2, #10
 8000b18:	481c      	ldr	r0, [pc, #112]	; (8000b8c <fsm_automatic_run2+0x38c>)
 8000b1a:	f002 fb52 	bl	80031c2 <HAL_UART_Transmit>
//						enableLed7Seg4();
						countDownYellow2++;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <fsm_automatic_run2+0x384>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <fsm_automatic_run2+0x384>)
 8000b26:	6013      	str	r3, [r2, #0]
						setTimer3(250);
 8000b28:	20fa      	movs	r0, #250	; 0xfa
 8000b2a:	f000 fcf9 	bl	8001520 <setTimer3>
						led7SegState2 = 1;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <fsm_automatic_run2+0x390>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	601a      	str	r2, [r3, #0]
					break;
 8000b34:	e000      	b.n	8000b38 <fsm_automatic_run2+0x338>
				}
			}
 8000b36:	bf00      	nop

			if(timer2_flag == 1) {
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <fsm_automatic_run2+0x394>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d119      	bne.n	8000b74 <fsm_automatic_run2+0x374>
				setTimer2(led_duration[0]*1000);
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <fsm_automatic_run2+0x380>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b48:	fb02 f303 	mul.w	r3, r2, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fccb 	bl	80014e8 <setTimer2>
				LANE2_STATUS = LANE2_RED;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <fsm_automatic_run2+0x398>)
 8000b54:	220c      	movs	r2, #12
 8000b56:	601a      	str	r2, [r3, #0]

				countDownYellow2 = 0; //reset
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <fsm_automatic_run2+0x384>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
				led7SegState2 = 1;//
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <fsm_automatic_run2+0x390>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	601a      	str	r2, [r3, #0]
				timer3_flag = 1;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <fsm_automatic_run2+0x39c>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b6a:	e003      	b.n	8000b74 <fsm_automatic_run2+0x374>
			break;
 8000b6c:	bf00      	nop
 8000b6e:	e002      	b.n	8000b76 <fsm_automatic_run2+0x376>
			break;
 8000b70:	bf00      	nop
 8000b72:	e000      	b.n	8000b76 <fsm_automatic_run2+0x376>
			break;
 8000b74:	bf00      	nop
	}

}
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000014 	.word	0x20000014
 8000b84:	200000c0 	.word	0x200000c0
 8000b88:	08004488 	.word	0x08004488
 8000b8c:	200001c0 	.word	0x200001c0
 8000b90:	20000004 	.word	0x20000004
 8000b94:	200000e8 	.word	0x200000e8
 8000b98:	2000000c 	.word	0x2000000c
 8000b9c:	200000f0 	.word	0x200000f0

08000ba0 <fsm_automatic_run0>:

//fsm for pedestrian
void fsm_automatic_run0() {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	switch(LANE0_STATUS) {
 8000ba4:	4b56      	ldr	r3, [pc, #344]	; (8000d00 <fsm_automatic_run0+0x160>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b18      	cmp	r3, #24
 8000baa:	f200 80a6 	bhi.w	8000cfa <fsm_automatic_run0+0x15a>
 8000bae:	a201      	add	r2, pc, #4	; (adr r2, 8000bb4 <fsm_automatic_run0+0x14>)
 8000bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb4:	08000ceb 	.word	0x08000ceb
 8000bb8:	08000cfb 	.word	0x08000cfb
 8000bbc:	08000cfb 	.word	0x08000cfb
 8000bc0:	08000cfb 	.word	0x08000cfb
 8000bc4:	08000cfb 	.word	0x08000cfb
 8000bc8:	08000cfb 	.word	0x08000cfb
 8000bcc:	08000cfb 	.word	0x08000cfb
 8000bd0:	08000cfb 	.word	0x08000cfb
 8000bd4:	08000cfb 	.word	0x08000cfb
 8000bd8:	08000cfb 	.word	0x08000cfb
 8000bdc:	08000cfb 	.word	0x08000cfb
 8000be0:	08000cfb 	.word	0x08000cfb
 8000be4:	08000cfb 	.word	0x08000cfb
 8000be8:	08000cfb 	.word	0x08000cfb
 8000bec:	08000cfb 	.word	0x08000cfb
 8000bf0:	08000cfb 	.word	0x08000cfb
 8000bf4:	08000cfb 	.word	0x08000cfb
 8000bf8:	08000cfb 	.word	0x08000cfb
 8000bfc:	08000cfb 	.word	0x08000cfb
 8000c00:	08000cfb 	.word	0x08000cfb
 8000c04:	08000cfb 	.word	0x08000cfb
 8000c08:	08000c19 	.word	0x08000c19
 8000c0c:	08000c37 	.word	0x08000c37
 8000c10:	08000c65 	.word	0x08000c65
 8000c14:	08000cbd 	.word	0x08000cbd
		case LANE0_INIT:
			initTrafficLight0();
 8000c18:	f000 f9fa 	bl	8001010 <initTrafficLight0>
			LANE0_STATUS = LANE0_GREEN;
 8000c1c:	4b38      	ldr	r3, [pc, #224]	; (8000d00 <fsm_automatic_run0+0x160>)
 8000c1e:	2217      	movs	r2, #23
 8000c20:	601a      	str	r2, [r3, #0]
			setTimer3(led_duration[2]*1000);
 8000c22:	4b38      	ldr	r3, [pc, #224]	; (8000d04 <fsm_automatic_run0+0x164>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c2a:	fb02 f303 	mul.w	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fc76 	bl	8001520 <setTimer3>
			break;
 8000c34:	e061      	b.n	8000cfa <fsm_automatic_run0+0x15a>
		case LANE0_RED:
			if (checkflag == 1)
 8000c36:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <fsm_automatic_run0+0x168>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d101      	bne.n	8000c42 <fsm_automatic_run0+0xa2>
				setTrafficRed0();
 8000c3e:	f000 fa0f 	bl	8001060 <setTrafficRed0>
			if(timer3_flag == 1) {
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <fsm_automatic_run0+0x16c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d152      	bne.n	8000cf0 <fsm_automatic_run0+0x150>
				setTimer3(led_duration[2]*1000);
 8000c4a:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <fsm_automatic_run0+0x164>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c52:	fb02 f303 	mul.w	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fc62 	bl	8001520 <setTimer3>
				LANE0_STATUS = LANE0_GREEN;
 8000c5c:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <fsm_automatic_run0+0x160>)
 8000c5e:	2217      	movs	r2, #23
 8000c60:	601a      	str	r2, [r3, #0]
			}
			break;
 8000c62:	e045      	b.n	8000cf0 <fsm_automatic_run0+0x150>
		case LANE0_GREEN:
			if (checkflag == 1)
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <fsm_automatic_run0+0x168>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d101      	bne.n	8000c70 <fsm_automatic_run0+0xd0>
				setTrafficGreen0();
 8000c6c:	f000 f9e4 	bl	8001038 <setTrafficGreen0>

			if(timer3_flag == 1) {
 8000c70:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <fsm_automatic_run0+0x16c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d13d      	bne.n	8000cf4 <fsm_automatic_run0+0x154>
				if (counter <= 4){
 8000c78:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <fsm_automatic_run0+0x170>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	dc10      	bgt.n	8000ca2 <fsm_automatic_run0+0x102>
					setTimer3((counter+led_duration[0]-1)*1000);
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <fsm_automatic_run0+0x164>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <fsm_automatic_run0+0x170>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4413      	add	r3, r2
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c90:	fb02 f303 	mul.w	r3, r2, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fc43 	bl	8001520 <setTimer3>
					LANE0_STATUS = LANE0_RED;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <fsm_automatic_run0+0x160>)
 8000c9c:	2216      	movs	r2, #22
 8000c9e:	601a      	str	r2, [r3, #0]
					setTimer3(led_duration[1]*1000);
					LANE0_STATUS = LANE0_YELLOW;
				}

			}
			break;
 8000ca0:	e028      	b.n	8000cf4 <fsm_automatic_run0+0x154>
					setTimer3(led_duration[1]*1000);
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <fsm_automatic_run0+0x164>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fc36 	bl	8001520 <setTimer3>
					LANE0_STATUS = LANE0_YELLOW;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <fsm_automatic_run0+0x160>)
 8000cb6:	2218      	movs	r2, #24
 8000cb8:	601a      	str	r2, [r3, #0]
			break;
 8000cba:	e01b      	b.n	8000cf4 <fsm_automatic_run0+0x154>
		case LANE0_YELLOW:
			if (checkflag == 1)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <fsm_automatic_run0+0x168>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d101      	bne.n	8000cc8 <fsm_automatic_run0+0x128>
			setTrafficYellow0();
 8000cc4:	f000 f9e0 	bl	8001088 <setTrafficYellow0>
			if(timer3_flag == 1) {
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <fsm_automatic_run0+0x16c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d113      	bne.n	8000cf8 <fsm_automatic_run0+0x158>
				setTimer3(led_duration[0]*1000);
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <fsm_automatic_run0+0x164>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fc1f 	bl	8001520 <setTimer3>
				LANE0_STATUS = LANE0_RED;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <fsm_automatic_run0+0x160>)
 8000ce4:	2216      	movs	r2, #22
 8000ce6:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ce8:	e006      	b.n	8000cf8 <fsm_automatic_run0+0x158>
		case STOP:
			initTrafficLight0();
 8000cea:	f000 f991 	bl	8001010 <initTrafficLight0>
			break;
 8000cee:	e004      	b.n	8000cfa <fsm_automatic_run0+0x15a>
			break;
 8000cf0:	bf00      	nop
 8000cf2:	e002      	b.n	8000cfa <fsm_automatic_run0+0x15a>
			break;
 8000cf4:	bf00      	nop
 8000cf6:	e000      	b.n	8000cfa <fsm_automatic_run0+0x15a>
			break;
 8000cf8:	bf00      	nop
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000010 	.word	0x20000010
 8000d04:	20000014 	.word	0x20000014
 8000d08:	200000ac 	.word	0x200000ac
 8000d0c:	200000f0 	.word	0x200000f0
 8000d10:	20000174 	.word	0x20000174

08000d14 <fsm_for_input_processing>:
int counterForGreen = 0;
int counterForYellow = 0;

int loopFlag = 0;
int counter;
void fsm_for_input_processing(void){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	switch(buttonState){
 8000d18:	4bad      	ldr	r3, [pc, #692]	; (8000fd0 <fsm_for_input_processing+0x2bc>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	f200 8155 	bhi.w	8000fcc <fsm_for_input_processing+0x2b8>
 8000d22:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <fsm_for_input_processing+0x14>)
 8000d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d28:	08000d39 	.word	0x08000d39
 8000d2c:	08000e7b 	.word	0x08000e7b
 8000d30:	08000e85 	.word	0x08000e85
 8000d34:	08000f39 	.word	0x08000f39
//			countDownGreen2 = 0;
//			countDownRed1 = 0;
//			countDownRed2 = 0;
//			countDownYellow1 = 0;
//			countDownYellow2 = 0;
			counter = led_duration[0];
 8000d38:	4ba6      	ldr	r3, [pc, #664]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4aa6      	ldr	r2, [pc, #664]	; (8000fd8 <fsm_for_input_processing+0x2c4>)
 8000d3e:	6013      	str	r3, [r2, #0]
			setTimer4(1000);
 8000d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d44:	f000 fc08 	bl	8001558 <setTimer4>

			LANE1_STATUS = LANE1_INIT;
 8000d48:	4ba4      	ldr	r3, [pc, #656]	; (8000fdc <fsm_for_input_processing+0x2c8>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
			LANE2_STATUS = LANE2_INIT;
 8000d4e:	4ba4      	ldr	r3, [pc, #656]	; (8000fe0 <fsm_for_input_processing+0x2cc>)
 8000d50:	220b      	movs	r2, #11
 8000d52:	601a      	str	r2, [r3, #0]
			LANE0_STATUS = LANE0_INIT;
 8000d54:	4ba3      	ldr	r3, [pc, #652]	; (8000fe4 <fsm_for_input_processing+0x2d0>)
 8000d56:	2215      	movs	r2, #21
 8000d58:	601a      	str	r2, [r3, #0]

			while(1) {
				if (timer4_flag == 1){
 8000d5a:	4ba3      	ldr	r3, [pc, #652]	; (8000fe8 <fsm_for_input_processing+0x2d4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d108      	bne.n	8000d74 <fsm_for_input_processing+0x60>
					counter--;
 8000d62:	4b9d      	ldr	r3, [pc, #628]	; (8000fd8 <fsm_for_input_processing+0x2c4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	4a9b      	ldr	r2, [pc, #620]	; (8000fd8 <fsm_for_input_processing+0x2c4>)
 8000d6a:	6013      	str	r3, [r2, #0]
					setTimer4(1000);
 8000d6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d70:	f000 fbf2 	bl	8001558 <setTimer4>
				}
				if(timer5_flag ==1){
 8000d74:	4b9d      	ldr	r3, [pc, #628]	; (8000fec <fsm_for_input_processing+0x2d8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d102      	bne.n	8000d82 <fsm_for_input_processing+0x6e>
					LANE0_STATUS = STOP;
 8000d7c:	4b99      	ldr	r3, [pc, #612]	; (8000fe4 <fsm_for_input_processing+0x2d0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
				}

				fsm_automatic_run1();
 8000d82:	f7ff fb5b 	bl	800043c <fsm_automatic_run1>
				fsm_automatic_run2();
 8000d86:	f7ff fd3b 	bl	8000800 <fsm_automatic_run2>
				fsm_automatic_run0();
 8000d8a:	f7ff ff09 	bl	8000ba0 <fsm_automatic_run0>

				if(isButtonPressed(3) == 1) {
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f7ff fb0e 	bl	80003b0 <isButtonPressed>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d111      	bne.n	8000dbe <fsm_for_input_processing+0xaa>
					checkflag = 1;
 8000d9a:	4b95      	ldr	r3, [pc, #596]	; (8000ff0 <fsm_for_input_processing+0x2dc>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
					setTimer5((led_duration[0] + led_duration[1] + led_duration[2])*1000);
 8000da0:	4b8c      	ldr	r3, [pc, #560]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b8b      	ldr	r3, [pc, #556]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	441a      	add	r2, r3
 8000daa:	4b8a      	ldr	r3, [pc, #552]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	4413      	add	r3, r2
 8000db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000db4:	fb02 f303 	mul.w	r3, r2, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fbe9 	bl	8001590 <setTimer5>
				}
				if(isButtonPressed(0) == 1) {
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff faf6 	bl	80003b0 <isButtonPressed>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d1c7      	bne.n	8000d5a <fsm_for_input_processing+0x46>
					buttonState = SET_TIME_RED;
 8000dca:	4b81      	ldr	r3, [pc, #516]	; (8000fd0 <fsm_for_input_processing+0x2bc>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
					setTrafficRed1();
 8000dd0:	f000 f9b6 	bl	8001140 <setTrafficRed1>
					setTrafficRed2();
 8000dd4:	f000 f9c8 	bl	8001168 <setTrafficRed2>
					loopFlag = 0; //reset
 8000dd8:	4b86      	ldr	r3, [pc, #536]	; (8000ff4 <fsm_for_input_processing+0x2e0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
					timer1_flag = 1; //for toggle LEDs in mode 2, 3, 4
 8000dde:	4b86      	ldr	r3, [pc, #536]	; (8000ff8 <fsm_for_input_processing+0x2e4>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	601a      	str	r2, [r3, #0]
					break;
 8000de4:	bf00      	nop
				}
			}
			break;
 8000de6:	e0f1      	b.n	8000fcc <fsm_for_input_processing+0x2b8>
		case SET_TIME_RED: //Mode 2
			while (loopFlag == 0) {
				if (timer1_flag == 1) { //toggle RED LEDs every 0.5s
 8000de8:	4b83      	ldr	r3, [pc, #524]	; (8000ff8 <fsm_for_input_processing+0x2e4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d10c      	bne.n	8000e0a <fsm_for_input_processing+0xf6>
					setTimer1(500);
 8000df0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df4:	f000 fb5c 	bl	80014b0 <setTimer1>
					HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfc:	487f      	ldr	r0, [pc, #508]	; (8000ffc <fsm_for_input_processing+0x2e8>)
 8000dfe:	f001 f966 	bl	80020ce <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000e02:	2120      	movs	r1, #32
 8000e04:	487e      	ldr	r0, [pc, #504]	; (8001000 <fsm_for_input_processing+0x2ec>)
 8000e06:	f001 f962 	bl	80020ce <HAL_GPIO_TogglePin>
				}

				if (isButtonPressed(1) == 1) counterForRed++;
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff fad0 	bl	80003b0 <isButtonPressed>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d104      	bne.n	8000e20 <fsm_for_input_processing+0x10c>
 8000e16:	4b7b      	ldr	r3, [pc, #492]	; (8001004 <fsm_for_input_processing+0x2f0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	4a79      	ldr	r2, [pc, #484]	; (8001004 <fsm_for_input_processing+0x2f0>)
 8000e1e:	6013      	str	r3, [r2, #0]

				if(isButtonPressed(2) == 1) {
 8000e20:	2002      	movs	r0, #2
 8000e22:	f7ff fac5 	bl	80003b0 <isButtonPressed>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d110      	bne.n	8000e4e <fsm_for_input_processing+0x13a>
					led_duration[0] += counterForRed;
 8000e2c:	4b69      	ldr	r3, [pc, #420]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b74      	ldr	r3, [pc, #464]	; (8001004 <fsm_for_input_processing+0x2f0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a67      	ldr	r2, [pc, #412]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000e38:	6013      	str	r3, [r2, #0]
					if (led_duration[0] > 99) led_duration[0] = 1;
 8000e3a:	4b66      	ldr	r3, [pc, #408]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b63      	cmp	r3, #99	; 0x63
 8000e40:	dd02      	ble.n	8000e48 <fsm_for_input_processing+0x134>
 8000e42:	4b64      	ldr	r3, [pc, #400]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
					counterForRed = 0; //reset
 8000e48:	4b6e      	ldr	r3, [pc, #440]	; (8001004 <fsm_for_input_processing+0x2f0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
				}

				if(isButtonPressed(0) == 1) {
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff faae 	bl	80003b0 <isButtonPressed>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d10f      	bne.n	8000e7a <fsm_for_input_processing+0x166>
					buttonState = SET_TIME_YELLOW;
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	; (8000fd0 <fsm_for_input_processing+0x2bc>)
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	701a      	strb	r2, [r3, #0]
					setTrafficYellow1();
 8000e60:	f000 f992 	bl	8001188 <setTrafficYellow1>
					setTrafficYellow2();
 8000e64:	f000 f9a4 	bl	80011b0 <setTrafficYellow2>
					loopFlag = 1;
 8000e68:	4b62      	ldr	r3, [pc, #392]	; (8000ff4 <fsm_for_input_processing+0x2e0>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
					timer1_flag = 1; //for toggle LEDs in mode 2, 3, 4
 8000e6e:	4b62      	ldr	r3, [pc, #392]	; (8000ff8 <fsm_for_input_processing+0x2e4>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
					counterForRed = 0; //rest
 8000e74:	4b63      	ldr	r3, [pc, #396]	; (8001004 <fsm_for_input_processing+0x2f0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 8000e7a:	4b5e      	ldr	r3, [pc, #376]	; (8000ff4 <fsm_for_input_processing+0x2e0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0b2      	beq.n	8000de8 <fsm_for_input_processing+0xd4>
				}
			}
			break;
 8000e82:	e0a3      	b.n	8000fcc <fsm_for_input_processing+0x2b8>
		case SET_TIME_YELLOW: //Mode 3
			loopFlag = 0;
 8000e84:	4b5b      	ldr	r3, [pc, #364]	; (8000ff4 <fsm_for_input_processing+0x2e0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 8000e8a:	e050      	b.n	8000f2e <fsm_for_input_processing+0x21a>
				if (timer1_flag == 1) { //toggle YELLOW LEDs every 0.5s
 8000e8c:	4b5a      	ldr	r3, [pc, #360]	; (8000ff8 <fsm_for_input_processing+0x2e4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d114      	bne.n	8000ebe <fsm_for_input_processing+0x1aa>
					setTimer1(500);
 8000e94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e98:	f000 fb0a 	bl	80014b0 <setTimer1>
					HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea0:	4856      	ldr	r0, [pc, #344]	; (8000ffc <fsm_for_input_processing+0x2e8>)
 8000ea2:	f001 f914 	bl	80020ce <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	4855      	ldr	r0, [pc, #340]	; (8001000 <fsm_for_input_processing+0x2ec>)
 8000eaa:	f001 f910 	bl	80020ce <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000eae:	2120      	movs	r1, #32
 8000eb0:	4853      	ldr	r0, [pc, #332]	; (8001000 <fsm_for_input_processing+0x2ec>)
 8000eb2:	f001 f90c 	bl	80020ce <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4851      	ldr	r0, [pc, #324]	; (8001000 <fsm_for_input_processing+0x2ec>)
 8000eba:	f001 f908 	bl	80020ce <HAL_GPIO_TogglePin>
				}

				if (isButtonPressed(1) == 1) counterForYellow++;
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fa76 	bl	80003b0 <isButtonPressed>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d104      	bne.n	8000ed4 <fsm_for_input_processing+0x1c0>
 8000eca:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <fsm_for_input_processing+0x2f4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	4a4d      	ldr	r2, [pc, #308]	; (8001008 <fsm_for_input_processing+0x2f4>)
 8000ed2:	6013      	str	r3, [r2, #0]

				if(isButtonPressed(2) == 1) {
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f7ff fa6b 	bl	80003b0 <isButtonPressed>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d110      	bne.n	8000f02 <fsm_for_input_processing+0x1ee>
					led_duration[1] += counterForYellow;
 8000ee0:	4b3c      	ldr	r3, [pc, #240]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	4b48      	ldr	r3, [pc, #288]	; (8001008 <fsm_for_input_processing+0x2f4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000eec:	6053      	str	r3, [r2, #4]
					if (led_duration[1] > 99) led_duration[1] = 1;
 8000eee:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b63      	cmp	r3, #99	; 0x63
 8000ef4:	dd02      	ble.n	8000efc <fsm_for_input_processing+0x1e8>
 8000ef6:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	605a      	str	r2, [r3, #4]
					counterForYellow = 0; //reset
 8000efc:	4b42      	ldr	r3, [pc, #264]	; (8001008 <fsm_for_input_processing+0x2f4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
				}

				if(isButtonPressed(0) == 1) {
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fa54 	bl	80003b0 <isButtonPressed>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d10f      	bne.n	8000f2e <fsm_for_input_processing+0x21a>
					buttonState = SET_TIME_GREEN;
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <fsm_for_input_processing+0x2bc>)
 8000f10:	2203      	movs	r2, #3
 8000f12:	701a      	strb	r2, [r3, #0]
					setTrafficGreen1();
 8000f14:	f000 f8f0 	bl	80010f8 <setTrafficGreen1>
					setTrafficGreen2();
 8000f18:	f000 f902 	bl	8001120 <setTrafficGreen2>
					loopFlag = 1;
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <fsm_for_input_processing+0x2e0>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
					timer1_flag = 1; //for toggle LEDs in mode 2, 3, 4
 8000f22:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <fsm_for_input_processing+0x2e4>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
					counterForYellow = 0; //reset
 8000f28:	4b37      	ldr	r3, [pc, #220]	; (8001008 <fsm_for_input_processing+0x2f4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 8000f2e:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <fsm_for_input_processing+0x2e0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0aa      	beq.n	8000e8c <fsm_for_input_processing+0x178>
				}
			}
			break;
 8000f36:	e049      	b.n	8000fcc <fsm_for_input_processing+0x2b8>
		case SET_TIME_GREEN: //Mode 4
			loopFlag = 0;
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <fsm_for_input_processing+0x2e0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 8000f3e:	e040      	b.n	8000fc2 <fsm_for_input_processing+0x2ae>
				if (timer1_flag == 1) { //toggle GREEN LEDs every 0.5s
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <fsm_for_input_processing+0x2e4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10b      	bne.n	8000f60 <fsm_for_input_processing+0x24c>
					setTimer1(500);
 8000f48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f4c:	f000 fab0 	bl	80014b0 <setTimer1>
					HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000f50:	2108      	movs	r1, #8
 8000f52:	482b      	ldr	r0, [pc, #172]	; (8001000 <fsm_for_input_processing+0x2ec>)
 8000f54:	f001 f8bb 	bl	80020ce <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000f58:	2110      	movs	r1, #16
 8000f5a:	4829      	ldr	r0, [pc, #164]	; (8001000 <fsm_for_input_processing+0x2ec>)
 8000f5c:	f001 f8b7 	bl	80020ce <HAL_GPIO_TogglePin>
				}

				if (isButtonPressed(1) == 1) counterForGreen++;
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff fa25 	bl	80003b0 <isButtonPressed>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d104      	bne.n	8000f76 <fsm_for_input_processing+0x262>
 8000f6c:	4b27      	ldr	r3, [pc, #156]	; (800100c <fsm_for_input_processing+0x2f8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	4a26      	ldr	r2, [pc, #152]	; (800100c <fsm_for_input_processing+0x2f8>)
 8000f74:	6013      	str	r3, [r2, #0]

				if(isButtonPressed(2) == 1) {
 8000f76:	2002      	movs	r0, #2
 8000f78:	f7ff fa1a 	bl	80003b0 <isButtonPressed>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d110      	bne.n	8000fa4 <fsm_for_input_processing+0x290>
					led_duration[2] += counterForGreen;
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <fsm_for_input_processing+0x2f8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000f8e:	6093      	str	r3, [r2, #8]
					if (led_duration[2] > 99) led_duration[2] = 1;
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	2b63      	cmp	r3, #99	; 0x63
 8000f96:	dd02      	ble.n	8000f9e <fsm_for_input_processing+0x28a>
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <fsm_for_input_processing+0x2c0>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	609a      	str	r2, [r3, #8]
					counterForGreen = 0; //reset
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <fsm_for_input_processing+0x2f8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
				}

				if(isButtonPressed(0) == 1) {
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fa03 	bl	80003b0 <isButtonPressed>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d108      	bne.n	8000fc2 <fsm_for_input_processing+0x2ae>
					buttonState = NORMAL;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <fsm_for_input_processing+0x2bc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
					loopFlag = 1;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <fsm_for_input_processing+0x2e0>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
					counterForGreen = 0; //reset
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <fsm_for_input_processing+0x2f8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <fsm_for_input_processing+0x2e0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0ba      	beq.n	8000f40 <fsm_for_input_processing+0x22c>
				}
			}
			break;
 8000fca:	bf00      	nop
	}
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200000c8 	.word	0x200000c8
 8000fd4:	20000014 	.word	0x20000014
 8000fd8:	20000174 	.word	0x20000174
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	20000010 	.word	0x20000010
 8000fe8:	200000f8 	.word	0x200000f8
 8000fec:	20000100 	.word	0x20000100
 8000ff0:	200000ac 	.word	0x200000ac
 8000ff4:	200000d8 	.word	0x200000d8
 8000ff8:	200000e0 	.word	0x200000e0
 8000ffc:	40010800 	.word	0x40010800
 8001000:	40010c00 	.word	0x40010c00
 8001004:	200000cc 	.word	0x200000cc
 8001008:	200000d4 	.word	0x200000d4
 800100c:	200000d0 	.word	0x200000d0

08001010 <initTrafficLight0>:
//	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, ((number>>4)&0x01)^0x01);
//	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, ((number>>5)&0x01)^0x01);
//	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, ((number>>6)&0x01)^0x01);
//}

void initTrafficLight0() {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET); //0
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <initTrafficLight0+0x20>)
 800101c:	f001 f83f 	bl	800209e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET); //0
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <initTrafficLight0+0x24>)
 8001028:	f001 f839 	bl	800209e <HAL_GPIO_WritePin>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40010c00 	.word	0x40010c00
 8001034:	40010800 	.word	0x40010800

08001038 <setTrafficGreen0>:

void setTrafficGreen0() {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET); //1
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <setTrafficGreen0+0x20>)
 8001044:	f001 f82b 	bl	800209e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET); //0
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4803      	ldr	r0, [pc, #12]	; (800105c <setTrafficGreen0+0x24>)
 8001050:	f001 f825 	bl	800209e <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40010c00 	.word	0x40010c00
 800105c:	40010800 	.word	0x40010800

08001060 <setTrafficRed0>:

void setTrafficRed0() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET); //1
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <setTrafficRed0+0x20>)
 800106c:	f001 f817 	bl	800209e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET); //0
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <setTrafficRed0+0x24>)
 8001078:	f001 f811 	bl	800209e <HAL_GPIO_WritePin>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010c00 	.word	0x40010c00
 8001084:	40010800 	.word	0x40010800

08001088 <setTrafficYellow0>:

void setTrafficYellow0() {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET); //1
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <setTrafficYellow0+0x20>)
 8001094:	f001 f803 	bl	800209e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET); //1
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109e:	4803      	ldr	r0, [pc, #12]	; (80010ac <setTrafficYellow0+0x24>)
 80010a0:	f000 fffd 	bl	800209e <HAL_GPIO_WritePin>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40010c00 	.word	0x40010c00
 80010ac:	40010800 	.word	0x40010800

080010b0 <initTrafficLight1>:

void initTrafficLight1() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET); //0
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <initTrafficLight1+0x20>)
 80010bc:	f000 ffef 	bl	800209e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET); //0
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <initTrafficLight1+0x24>)
 80010c6:	f000 ffea 	bl	800209e <HAL_GPIO_WritePin>
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40010800 	.word	0x40010800
 80010d4:	40010c00 	.word	0x40010c00

080010d8 <initTrafficLight2>:

void initTrafficLight2() {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET); //0
 80010dc:	2200      	movs	r2, #0
 80010de:	2120      	movs	r1, #32
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <initTrafficLight2+0x1c>)
 80010e2:	f000 ffdc 	bl	800209e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET); //0
 80010e6:	2200      	movs	r2, #0
 80010e8:	2110      	movs	r1, #16
 80010ea:	4802      	ldr	r0, [pc, #8]	; (80010f4 <initTrafficLight2+0x1c>)
 80010ec:	f000 ffd7 	bl	800209e <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40010c00 	.word	0x40010c00

080010f8 <setTrafficGreen1>:
void setTrafficGreen1() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET); //0
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <setTrafficGreen1+0x20>)
 8001104:	f000 ffcb 	bl	800209e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET); //1
 8001108:	2201      	movs	r2, #1
 800110a:	2108      	movs	r1, #8
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <setTrafficGreen1+0x24>)
 800110e:	f000 ffc6 	bl	800209e <HAL_GPIO_WritePin>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40010800 	.word	0x40010800
 800111c:	40010c00 	.word	0x40010c00

08001120 <setTrafficGreen2>:
void setTrafficGreen2() {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET); //0
 8001124:	2200      	movs	r2, #0
 8001126:	2120      	movs	r1, #32
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <setTrafficGreen2+0x1c>)
 800112a:	f000 ffb8 	bl	800209e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET); //1
 800112e:	2201      	movs	r2, #1
 8001130:	2110      	movs	r1, #16
 8001132:	4802      	ldr	r0, [pc, #8]	; (800113c <setTrafficGreen2+0x1c>)
 8001134:	f000 ffb3 	bl	800209e <HAL_GPIO_WritePin>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40010c00 	.word	0x40010c00

08001140 <setTrafficRed1>:

void setTrafficRed1() {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET); //1
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <setTrafficRed1+0x20>)
 800114c:	f000 ffa7 	bl	800209e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET); //0
 8001150:	2200      	movs	r2, #0
 8001152:	2108      	movs	r1, #8
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <setTrafficRed1+0x24>)
 8001156:	f000 ffa2 	bl	800209e <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40010800 	.word	0x40010800
 8001164:	40010c00 	.word	0x40010c00

08001168 <setTrafficRed2>:
void setTrafficRed2() {
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET); //1
 800116c:	2201      	movs	r2, #1
 800116e:	2120      	movs	r1, #32
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <setTrafficRed2+0x1c>)
 8001172:	f000 ff94 	bl	800209e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET); //0
 8001176:	2200      	movs	r2, #0
 8001178:	2110      	movs	r1, #16
 800117a:	4802      	ldr	r0, [pc, #8]	; (8001184 <setTrafficRed2+0x1c>)
 800117c:	f000 ff8f 	bl	800209e <HAL_GPIO_WritePin>
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40010c00 	.word	0x40010c00

08001188 <setTrafficYellow1>:

void setTrafficYellow1() {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET); //1
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <setTrafficYellow1+0x20>)
 8001194:	f000 ff83 	bl	800209e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET); //1
 8001198:	2201      	movs	r2, #1
 800119a:	2108      	movs	r1, #8
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <setTrafficYellow1+0x24>)
 800119e:	f000 ff7e 	bl	800209e <HAL_GPIO_WritePin>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40010800 	.word	0x40010800
 80011ac:	40010c00 	.word	0x40010c00

080011b0 <setTrafficYellow2>:

void setTrafficYellow2() {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET); //1
 80011b4:	2201      	movs	r2, #1
 80011b6:	2120      	movs	r1, #32
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <setTrafficYellow2+0x1c>)
 80011ba:	f000 ff70 	bl	800209e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET); //1
 80011be:	2201      	movs	r2, #1
 80011c0:	2110      	movs	r1, #16
 80011c2:	4802      	ldr	r0, [pc, #8]	; (80011cc <setTrafficYellow2+0x1c>)
 80011c4:	f000 ff6b 	bl	800209e <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40010c00 	.word	0x40010c00

080011d0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	if ( huart -> Instance == USART2 ) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_UART_RxCpltCallback+0x30>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10a      	bne.n	80011f8 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit (&huart2 , &temp , 1 , 50) ;
 80011e2:	2332      	movs	r3, #50	; 0x32
 80011e4:	2201      	movs	r2, #1
 80011e6:	4907      	ldr	r1, [pc, #28]	; (8001204 <HAL_UART_RxCpltCallback+0x34>)
 80011e8:	4807      	ldr	r0, [pc, #28]	; (8001208 <HAL_UART_RxCpltCallback+0x38>)
 80011ea:	f001 ffea 	bl	80031c2 <HAL_UART_Transmit>
		HAL_UART_Receive_IT (&huart2 , &temp , 1) ;
 80011ee:	2201      	movs	r2, #1
 80011f0:	4904      	ldr	r1, [pc, #16]	; (8001204 <HAL_UART_RxCpltCallback+0x34>)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_UART_RxCpltCallback+0x38>)
 80011f4:	f002 f877 	bl	80032e6 <HAL_UART_Receive_IT>
	}
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40004400 	.word	0x40004400
 8001204:	200000dc 	.word	0x200000dc
 8001208:	200001c0 	.word	0x200001c0

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f000 fb8a 	bl	8001928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f81a 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 f8ca 	bl	80013b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800121c:	f000 f852 	bl	80012c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001220:	f000 f89c 	bl	800135c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart2 , &temp , 1) ;
 8001224:	2201      	movs	r2, #1
 8001226:	4906      	ldr	r1, [pc, #24]	; (8001240 <main+0x34>)
 8001228:	4806      	ldr	r0, [pc, #24]	; (8001244 <main+0x38>)
 800122a:	f002 f85c 	bl	80032e6 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <main+0x3c>)
 8001230:	f001 fbd0 	bl	80029d4 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  uint32_t aValue = 8;
//  char str[50];
  initSomeVariables();
 8001234:	f7fe ff8a 	bl	800014c <initSomeVariables>
  while (1)
  {
//	  HAL_UART_Transmit(&huart2 , (void*)str, sprintf (str, "%d\n", aValue), 1000);
	  fsm_for_input_processing();
 8001238:	f7ff fd6c 	bl	8000d14 <fsm_for_input_processing>
 800123c:	e7fc      	b.n	8001238 <main+0x2c>
 800123e:	bf00      	nop
 8001240:	200000dc 	.word	0x200000dc
 8001244:	200001c0 	.word	0x200001c0
 8001248:	20000178 	.word	0x20000178

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b090      	sub	sp, #64	; 0x40
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	2228      	movs	r2, #40	; 0x28
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fcc6 	bl	8003bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001272:	2301      	movs	r3, #1
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001276:	2310      	movs	r3, #16
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800127a:	2300      	movs	r3, #0
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	4618      	mov	r0, r3
 8001284:	f000 ff3c 	bl	8002100 <HAL_RCC_OscConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800128e:	f000 f909 	bl	80014a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001292:	230f      	movs	r3, #15
 8001294:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 f9a8 	bl	8002600 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012b6:	f000 f8f5 	bl	80014a4 <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3740      	adds	r7, #64	; 0x40
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <MX_TIM2_Init+0x94>)
 80012e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_TIM2_Init+0x94>)
 80012ea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_TIM2_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <MX_TIM2_Init+0x94>)
 80012f8:	220a      	movs	r2, #10
 80012fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_TIM2_Init+0x94>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <MX_TIM2_Init+0x94>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001308:	4813      	ldr	r0, [pc, #76]	; (8001358 <MX_TIM2_Init+0x94>)
 800130a:	f001 fb13 	bl	8002934 <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001314:	f000 f8c6 	bl	80014a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	4619      	mov	r1, r3
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <MX_TIM2_Init+0x94>)
 8001326:	f001 fcaf 	bl	8002c88 <HAL_TIM_ConfigClockSource>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001330:	f000 f8b8 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	4619      	mov	r1, r3
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_TIM2_Init+0x94>)
 8001342:	f001 fe81 	bl	8003048 <HAL_TIMEx_MasterConfigSynchronization>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800134c:	f000 f8aa 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000178 	.word	0x20000178

0800135c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <MX_USART2_UART_Init+0x50>)
 8001364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001368:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800136c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001394:	f001 fec8 	bl	8003128 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800139e:	f000 f881 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001c0 	.word	0x200001c0
 80013ac:	40004400 	.word	0x40004400

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <MX_GPIO_Init+0xd0>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a2d      	ldr	r2, [pc, #180]	; (8001480 <MX_GPIO_Init+0xd0>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <MX_GPIO_Init+0xd0>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <MX_GPIO_Init+0xd0>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a27      	ldr	r2, [pc, #156]	; (8001480 <MX_GPIO_Init+0xd0>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b25      	ldr	r3, [pc, #148]	; (8001480 <MX_GPIO_Init+0xd0>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80013fa:	4822      	ldr	r0, [pc, #136]	; (8001484 <MX_GPIO_Init+0xd4>)
 80013fc:	f000 fe4f 	bl	800209e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001406:	4820      	ldr	r0, [pc, #128]	; (8001488 <MX_GPIO_Init+0xd8>)
 8001408:	f000 fe49 	bl	800209e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 800140c:	2313      	movs	r3, #19
 800140e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	4619      	mov	r1, r3
 800141e:	481a      	ldr	r0, [pc, #104]	; (8001488 <MX_GPIO_Init+0xd8>)
 8001420:	f000 fca2 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8001424:	2301      	movs	r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4619      	mov	r1, r3
 8001436:	4813      	ldr	r0, [pc, #76]	; (8001484 <MX_GPIO_Init+0xd4>)
 8001438:	f000 fc96 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 800143c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001440:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2302      	movs	r3, #2
 800144c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4619      	mov	r1, r3
 8001454:	480b      	ldr	r0, [pc, #44]	; (8001484 <MX_GPIO_Init+0xd4>)
 8001456:	f000 fc87 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 800145a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800145e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2302      	movs	r3, #2
 800146a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	4619      	mov	r1, r3
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_GPIO_Init+0xd8>)
 8001474:	f000 fc78 	bl	8001d68 <HAL_GPIO_Init>

}
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	40010c00 	.word	0x40010c00
 8001488:	40010800 	.word	0x40010800

0800148c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	timerRun();
 8001494:	f000 f898 	bl	80015c8 <timerRun>

	getKeyInput();
 8001498:	f7fe fe96 	bl	80001c8 <getKeyInput>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x8>
	...

080014b0 <setTimer1>:

int timer5_flag = 0;
int timer5_counter = 0;


void setTimer1(int duration) {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <setTimer1+0x2c>)
 80014bc:	fb82 1203 	smull	r1, r2, r2, r3
 80014c0:	1092      	asrs	r2, r2, #2
 80014c2:	17db      	asrs	r3, r3, #31
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <setTimer1+0x30>)
 80014c8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <setTimer1+0x34>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	66666667 	.word	0x66666667
 80014e0:	200000e4 	.word	0x200000e4
 80014e4:	200000e0 	.word	0x200000e0

080014e8 <setTimer2>:
void setTimer2(int duration) {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a08      	ldr	r2, [pc, #32]	; (8001514 <setTimer2+0x2c>)
 80014f4:	fb82 1203 	smull	r1, r2, r2, r3
 80014f8:	1092      	asrs	r2, r2, #2
 80014fa:	17db      	asrs	r3, r3, #31
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	4a06      	ldr	r2, [pc, #24]	; (8001518 <setTimer2+0x30>)
 8001500:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <setTimer2+0x34>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	66666667 	.word	0x66666667
 8001518:	200000ec 	.word	0x200000ec
 800151c:	200000e8 	.word	0x200000e8

08001520 <setTimer3>:

void setTimer3(int duration) {
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <setTimer3+0x2c>)
 800152c:	fb82 1203 	smull	r1, r2, r2, r3
 8001530:	1092      	asrs	r2, r2, #2
 8001532:	17db      	asrs	r3, r3, #31
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	4a06      	ldr	r2, [pc, #24]	; (8001550 <setTimer3+0x30>)
 8001538:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <setTimer3+0x34>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	66666667 	.word	0x66666667
 8001550:	200000f4 	.word	0x200000f4
 8001554:	200000f0 	.word	0x200000f0

08001558 <setTimer4>:

void setTimer4(int duration) {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <setTimer4+0x2c>)
 8001564:	fb82 1203 	smull	r1, r2, r2, r3
 8001568:	1092      	asrs	r2, r2, #2
 800156a:	17db      	asrs	r3, r3, #31
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	4a06      	ldr	r2, [pc, #24]	; (8001588 <setTimer4+0x30>)
 8001570:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <setTimer4+0x34>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	66666667 	.word	0x66666667
 8001588:	200000fc 	.word	0x200000fc
 800158c:	200000f8 	.word	0x200000f8

08001590 <setTimer5>:

void setTimer5(int duration) {
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <setTimer5+0x2c>)
 800159c:	fb82 1203 	smull	r1, r2, r2, r3
 80015a0:	1092      	asrs	r2, r2, #2
 80015a2:	17db      	asrs	r3, r3, #31
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <setTimer5+0x30>)
 80015a8:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <setTimer5+0x34>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	66666667 	.word	0x66666667
 80015c0:	20000104 	.word	0x20000104
 80015c4:	20000100 	.word	0x20000100

080015c8 <timerRun>:

void timerRun() {
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <timerRun+0xac>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	dd0b      	ble.n	80015ec <timerRun+0x24>
		timer1_counter--;
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <timerRun+0xac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3b01      	subs	r3, #1
 80015da:	4a26      	ldr	r2, [pc, #152]	; (8001674 <timerRun+0xac>)
 80015dc:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 80015de:	4b25      	ldr	r3, [pc, #148]	; (8001674 <timerRun+0xac>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	dc02      	bgt.n	80015ec <timerRun+0x24>
			timer1_flag = 1;
 80015e6:	4b24      	ldr	r3, [pc, #144]	; (8001678 <timerRun+0xb0>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <timerRun+0xb4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	dd0b      	ble.n	800160c <timerRun+0x44>
		timer2_counter--;
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <timerRun+0xb4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	4a20      	ldr	r2, [pc, #128]	; (800167c <timerRun+0xb4>)
 80015fc:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <timerRun+0xb4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	dc02      	bgt.n	800160c <timerRun+0x44>
			timer2_flag = 1;
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <timerRun+0xb8>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <timerRun+0xbc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	dd0b      	ble.n	800162c <timerRun+0x64>
		timer3_counter--;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <timerRun+0xbc>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3b01      	subs	r3, #1
 800161a:	4a1a      	ldr	r2, [pc, #104]	; (8001684 <timerRun+0xbc>)
 800161c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <timerRun+0xbc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	dc02      	bgt.n	800162c <timerRun+0x64>
			timer3_flag = 1;
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <timerRun+0xc0>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0) {
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <timerRun+0xc4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	dd0b      	ble.n	800164c <timerRun+0x84>
		timer4_counter--;
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <timerRun+0xc4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3b01      	subs	r3, #1
 800163a:	4a14      	ldr	r2, [pc, #80]	; (800168c <timerRun+0xc4>)
 800163c:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <timerRun+0xc4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	dc02      	bgt.n	800164c <timerRun+0x84>
			timer4_flag = 1;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <timerRun+0xc8>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0) {
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <timerRun+0xcc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	dd0b      	ble.n	800166c <timerRun+0xa4>
		timer5_counter--;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <timerRun+0xcc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3b01      	subs	r3, #1
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <timerRun+0xcc>)
 800165c:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <timerRun+0xcc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	dc02      	bgt.n	800166c <timerRun+0xa4>
			timer5_flag = 1;
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <timerRun+0xd0>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	200000e4 	.word	0x200000e4
 8001678:	200000e0 	.word	0x200000e0
 800167c:	200000ec 	.word	0x200000ec
 8001680:	200000e8 	.word	0x200000e8
 8001684:	200000f4 	.word	0x200000f4
 8001688:	200000f0 	.word	0x200000f0
 800168c:	200000fc 	.word	0x200000fc
 8001690:	200000f8 	.word	0x200000f8
 8001694:	20000104 	.word	0x20000104
 8001698:	20000100 	.word	0x20000100

0800169c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_MspInit+0x5c>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <HAL_MspInit+0x5c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6193      	str	r3, [r2, #24]
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_MspInit+0x5c>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_MspInit+0x5c>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_MspInit+0x5c>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_MspInit+0x5c>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_MspInit+0x60>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_MspInit+0x60>)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010000 	.word	0x40010000

08001700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001710:	d113      	bne.n	800173a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_TIM_Base_MspInit+0x44>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_TIM_Base_MspInit+0x44>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_TIM_Base_MspInit+0x44>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	201c      	movs	r0, #28
 8001730:	f000 fa33 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001734:	201c      	movs	r0, #28
 8001736:	f000 fa4c 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_UART_MspInit+0x98>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d137      	bne.n	80017d8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 800176e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001772:	61d3      	str	r3, [r2, #28]
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001798:	2304      	movs	r3, #4
 800179a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	480f      	ldr	r0, [pc, #60]	; (80017e8 <HAL_UART_MspInit+0xa0>)
 80017ac:	f000 fadc 	bl	8001d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017b0:	2308      	movs	r3, #8
 80017b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4619      	mov	r1, r3
 80017c2:	4809      	ldr	r0, [pc, #36]	; (80017e8 <HAL_UART_MspInit+0xa0>)
 80017c4:	f000 fad0 	bl	8001d68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2026      	movs	r0, #38	; 0x26
 80017ce:	f000 f9e4 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d2:	2026      	movs	r0, #38	; 0x26
 80017d4:	f000 f9fd 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40004400 	.word	0x40004400
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010800 	.word	0x40010800

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <NMI_Handler+0x4>

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler+0x4>

080017fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler+0x4>

0800180a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001832:	f000 f8bf 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <TIM2_IRQHandler+0x10>)
 8001842:	f001 f919 	bl	8002a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000178 	.word	0x20000178

08001850 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <USART2_IRQHandler+0x10>)
 8001856:	f001 fd77 	bl	8003348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200001c0 	.word	0x200001c0

08001864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <_sbrk+0x5c>)
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <_sbrk+0x60>)
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <_sbrk+0x64>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <_sbrk+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001894:	f002 f980 	bl	8003b98 <__errno>
 8001898:	4603      	mov	r3, r0
 800189a:	220c      	movs	r2, #12
 800189c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	e009      	b.n	80018b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <_sbrk+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20005000 	.word	0x20005000
 80018c4:	00000400 	.word	0x00000400
 80018c8:	20000108 	.word	0x20000108
 80018cc:	20000218 	.word	0x20000218

080018d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018de:	490d      	ldr	r1, [pc, #52]	; (8001914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018f4:	4c0a      	ldr	r4, [pc, #40]	; (8001920 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001902:	f7ff ffe5 	bl	80018d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f002 f94d 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800190a:	f7ff fc7f 	bl	800120c <main>
  bx lr
 800190e:	4770      	bx	lr
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001918:	080044f8 	.word	0x080044f8
  ldr r2, =_sbss
 800191c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001920:	20000218 	.word	0x20000218

08001924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC1_2_IRQHandler>
	...

08001928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_Init+0x28>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_Init+0x28>)
 8001932:	f043 0310 	orr.w	r3, r3, #16
 8001936:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 f923 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	200f      	movs	r0, #15
 8001940:	f000 f808 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff feaa 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40022000 	.word	0x40022000

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_InitTick+0x54>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_InitTick+0x58>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f93b 	bl	8001bee <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00e      	b.n	80019a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d80a      	bhi.n	800199e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 f903 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <HAL_InitTick+0x5c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000020 	.word	0x20000020
 80019ac:	20000028 	.word	0x20000028
 80019b0:	20000024 	.word	0x20000024

080019b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_IncTick+0x1c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_IncTick+0x20>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a03      	ldr	r2, [pc, #12]	; (80019d4 <HAL_IncTick+0x20>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000028 	.word	0x20000028
 80019d4:	20000204 	.word	0x20000204

080019d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return uwTick;
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <HAL_GetTick+0x10>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	20000204 	.word	0x20000204

080019ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1e:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	60d3      	str	r3, [r2, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <__NVIC_GetPriorityGrouping+0x18>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	f003 0307 	and.w	r3, r3, #7
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	db0b      	blt.n	8001a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f003 021f 	and.w	r2, r3, #31
 8001a68:	4906      	ldr	r1, [pc, #24]	; (8001a84 <__NVIC_EnableIRQ+0x34>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	2001      	movs	r0, #1
 8001a72:	fa00 f202 	lsl.w	r2, r0, r2
 8001a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100

08001a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0a      	blt.n	8001ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <__NVIC_SetPriority+0x4c>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab0:	e00a      	b.n	8001ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <__NVIC_SetPriority+0x50>)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	761a      	strb	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f1c3 0307 	rsb	r3, r3, #7
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf28      	it	cs
 8001afa:	2304      	movcs	r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d902      	bls.n	8001b0c <NVIC_EncodePriority+0x30>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3b03      	subs	r3, #3
 8001b0a:	e000      	b.n	8001b0e <NVIC_EncodePriority+0x32>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
         );
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff90 	bl	8001a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff2d 	bl	80019ec <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff42 	bl	8001a34 <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff90 	bl	8001adc <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5f 	bl	8001a88 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff35 	bl	8001a50 <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa2 	bl	8001b40 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b085      	sub	sp, #20
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d008      	beq.n	8001c2e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2204      	movs	r2, #4
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e020      	b.n	8001c70 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 020e 	bic.w	r2, r2, #14
 8001c3c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0201 	bic.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c56:	2101      	movs	r1, #1
 8001c58:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d005      	beq.n	8001c9e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e051      	b.n	8001d42 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 020e 	bic.w	r2, r2, #14
 8001cac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a22      	ldr	r2, [pc, #136]	; (8001d4c <HAL_DMA_Abort_IT+0xd0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d029      	beq.n	8001d1c <HAL_DMA_Abort_IT+0xa0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <HAL_DMA_Abort_IT+0xd4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d022      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x9c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <HAL_DMA_Abort_IT+0xd8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d01a      	beq.n	8001d12 <HAL_DMA_Abort_IT+0x96>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <HAL_DMA_Abort_IT+0xdc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d012      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x90>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <HAL_DMA_Abort_IT+0xe0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00a      	beq.n	8001d06 <HAL_DMA_Abort_IT+0x8a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1a      	ldr	r2, [pc, #104]	; (8001d60 <HAL_DMA_Abort_IT+0xe4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d102      	bne.n	8001d00 <HAL_DMA_Abort_IT+0x84>
 8001cfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cfe:	e00e      	b.n	8001d1e <HAL_DMA_Abort_IT+0xa2>
 8001d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d04:	e00b      	b.n	8001d1e <HAL_DMA_Abort_IT+0xa2>
 8001d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d0a:	e008      	b.n	8001d1e <HAL_DMA_Abort_IT+0xa2>
 8001d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d10:	e005      	b.n	8001d1e <HAL_DMA_Abort_IT+0xa2>
 8001d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d16:	e002      	b.n	8001d1e <HAL_DMA_Abort_IT+0xa2>
 8001d18:	2310      	movs	r3, #16
 8001d1a:	e000      	b.n	8001d1e <HAL_DMA_Abort_IT+0xa2>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <HAL_DMA_Abort_IT+0xe8>)
 8001d20:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
    } 
  }
  return status;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40020008 	.word	0x40020008
 8001d50:	4002001c 	.word	0x4002001c
 8001d54:	40020030 	.word	0x40020030
 8001d58:	40020044 	.word	0x40020044
 8001d5c:	40020058 	.word	0x40020058
 8001d60:	4002006c 	.word	0x4002006c
 8001d64:	40020000 	.word	0x40020000

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b08b      	sub	sp, #44	; 0x2c
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	e169      	b.n	8002050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f040 8158 	bne.w	800204a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4a9a      	ldr	r2, [pc, #616]	; (8002008 <HAL_GPIO_Init+0x2a0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d05e      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001da4:	4a98      	ldr	r2, [pc, #608]	; (8002008 <HAL_GPIO_Init+0x2a0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d875      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001daa:	4a98      	ldr	r2, [pc, #608]	; (800200c <HAL_GPIO_Init+0x2a4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d058      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001db0:	4a96      	ldr	r2, [pc, #600]	; (800200c <HAL_GPIO_Init+0x2a4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d86f      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001db6:	4a96      	ldr	r2, [pc, #600]	; (8002010 <HAL_GPIO_Init+0x2a8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d052      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dbc:	4a94      	ldr	r2, [pc, #592]	; (8002010 <HAL_GPIO_Init+0x2a8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d869      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dc2:	4a94      	ldr	r2, [pc, #592]	; (8002014 <HAL_GPIO_Init+0x2ac>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d04c      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dc8:	4a92      	ldr	r2, [pc, #584]	; (8002014 <HAL_GPIO_Init+0x2ac>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d863      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dce:	4a92      	ldr	r2, [pc, #584]	; (8002018 <HAL_GPIO_Init+0x2b0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d046      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dd4:	4a90      	ldr	r2, [pc, #576]	; (8002018 <HAL_GPIO_Init+0x2b0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d85d      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d82a      	bhi.n	8001e34 <HAL_GPIO_Init+0xcc>
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d859      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001de2:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <HAL_GPIO_Init+0x80>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001e63 	.word	0x08001e63
 8001dec:	08001e3d 	.word	0x08001e3d
 8001df0:	08001e4f 	.word	0x08001e4f
 8001df4:	08001e91 	.word	0x08001e91
 8001df8:	08001e97 	.word	0x08001e97
 8001dfc:	08001e97 	.word	0x08001e97
 8001e00:	08001e97 	.word	0x08001e97
 8001e04:	08001e97 	.word	0x08001e97
 8001e08:	08001e97 	.word	0x08001e97
 8001e0c:	08001e97 	.word	0x08001e97
 8001e10:	08001e97 	.word	0x08001e97
 8001e14:	08001e97 	.word	0x08001e97
 8001e18:	08001e97 	.word	0x08001e97
 8001e1c:	08001e97 	.word	0x08001e97
 8001e20:	08001e97 	.word	0x08001e97
 8001e24:	08001e97 	.word	0x08001e97
 8001e28:	08001e97 	.word	0x08001e97
 8001e2c:	08001e45 	.word	0x08001e45
 8001e30:	08001e59 	.word	0x08001e59
 8001e34:	4a79      	ldr	r2, [pc, #484]	; (800201c <HAL_GPIO_Init+0x2b4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e3a:	e02c      	b.n	8001e96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	623b      	str	r3, [r7, #32]
          break;
 8001e42:	e029      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	623b      	str	r3, [r7, #32]
          break;
 8001e4c:	e024      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	3308      	adds	r3, #8
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e01f      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e01a      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e013      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	611a      	str	r2, [r3, #16]
          break;
 8001e82:	e009      	b.n	8001e98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e84:	2308      	movs	r3, #8
 8001e86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	615a      	str	r2, [r3, #20]
          break;
 8001e8e:	e003      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          break;
 8001e96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2bff      	cmp	r3, #255	; 0xff
 8001e9c:	d801      	bhi.n	8001ea2 <HAL_GPIO_Init+0x13a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	e001      	b.n	8001ea6 <HAL_GPIO_Init+0x13e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2bff      	cmp	r3, #255	; 0xff
 8001eac:	d802      	bhi.n	8001eb4 <HAL_GPIO_Init+0x14c>
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	e002      	b.n	8001eba <HAL_GPIO_Init+0x152>
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	3b08      	subs	r3, #8
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	210f      	movs	r1, #15
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	401a      	ands	r2, r3
 8001ecc:	6a39      	ldr	r1, [r7, #32]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 80b1 	beq.w	800204a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee8:	4b4d      	ldr	r3, [pc, #308]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a4c      	ldr	r2, [pc, #304]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b4a      	ldr	r3, [pc, #296]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f00:	4a48      	ldr	r2, [pc, #288]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a40      	ldr	r2, [pc, #256]	; (8002028 <HAL_GPIO_Init+0x2c0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <HAL_GPIO_Init+0x1ec>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3f      	ldr	r2, [pc, #252]	; (800202c <HAL_GPIO_Init+0x2c4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00d      	beq.n	8001f50 <HAL_GPIO_Init+0x1e8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3e      	ldr	r2, [pc, #248]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d007      	beq.n	8001f4c <HAL_GPIO_Init+0x1e4>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3d      	ldr	r2, [pc, #244]	; (8002034 <HAL_GPIO_Init+0x2cc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_GPIO_Init+0x1e0>
 8001f44:	2303      	movs	r3, #3
 8001f46:	e006      	b.n	8001f56 <HAL_GPIO_Init+0x1ee>
 8001f48:	2304      	movs	r3, #4
 8001f4a:	e004      	b.n	8001f56 <HAL_GPIO_Init+0x1ee>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e002      	b.n	8001f56 <HAL_GPIO_Init+0x1ee>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_GPIO_Init+0x1ee>
 8001f54:	2300      	movs	r3, #0
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	f002 0203 	and.w	r2, r2, #3
 8001f5c:	0092      	lsls	r2, r2, #2
 8001f5e:	4093      	lsls	r3, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f66:	492f      	ldr	r1, [pc, #188]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	492c      	ldr	r1, [pc, #176]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4928      	ldr	r1, [pc, #160]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fa8:	4b23      	ldr	r3, [pc, #140]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4922      	ldr	r1, [pc, #136]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	491e      	ldr	r1, [pc, #120]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	4918      	ldr	r1, [pc, #96]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4914      	ldr	r1, [pc, #80]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d021      	beq.n	800203c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	490e      	ldr	r1, [pc, #56]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	60cb      	str	r3, [r1, #12]
 8002004:	e021      	b.n	800204a <HAL_GPIO_Init+0x2e2>
 8002006:	bf00      	nop
 8002008:	10320000 	.word	0x10320000
 800200c:	10310000 	.word	0x10310000
 8002010:	10220000 	.word	0x10220000
 8002014:	10210000 	.word	0x10210000
 8002018:	10120000 	.word	0x10120000
 800201c:	10110000 	.word	0x10110000
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000
 8002028:	40010800 	.word	0x40010800
 800202c:	40010c00 	.word	0x40010c00
 8002030:	40011000 	.word	0x40011000
 8002034:	40011400 	.word	0x40011400
 8002038:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_GPIO_Init+0x304>)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	43db      	mvns	r3, r3
 8002044:	4909      	ldr	r1, [pc, #36]	; (800206c <HAL_GPIO_Init+0x304>)
 8002046:	4013      	ands	r3, r2
 8002048:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	3301      	adds	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	f47f ae8e 	bne.w	8001d7c <HAL_GPIO_Init+0x14>
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	372c      	adds	r7, #44	; 0x2c
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e001      	b.n	8002092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	807b      	strh	r3, [r7, #2]
 80020aa:	4613      	mov	r3, r2
 80020ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ae:	787b      	ldrb	r3, [r7, #1]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b4:	887a      	ldrh	r2, [r7, #2]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ba:	e003      	b.n	80020c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	041a      	lsls	r2, r3, #16
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	611a      	str	r2, [r3, #16]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020e0:	887a      	ldrh	r2, [r7, #2]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	041a      	lsls	r2, r3, #16
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	400b      	ands	r3, r1
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	611a      	str	r2, [r3, #16]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e26c      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8087 	beq.w	800222e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002120:	4b92      	ldr	r3, [pc, #584]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b04      	cmp	r3, #4
 800212a:	d00c      	beq.n	8002146 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800212c:	4b8f      	ldr	r3, [pc, #572]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d112      	bne.n	800215e <HAL_RCC_OscConfig+0x5e>
 8002138:	4b8c      	ldr	r3, [pc, #560]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d10b      	bne.n	800215e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002146:	4b89      	ldr	r3, [pc, #548]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d06c      	beq.n	800222c <HAL_RCC_OscConfig+0x12c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d168      	bne.n	800222c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e246      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x76>
 8002168:	4b80      	ldr	r3, [pc, #512]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a7f      	ldr	r2, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800216e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	e02e      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b7b      	ldr	r3, [pc, #492]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7a      	ldr	r2, [pc, #488]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b78      	ldr	r3, [pc, #480]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a77      	ldr	r2, [pc, #476]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e01d      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0xbc>
 80021a2:	4b72      	ldr	r3, [pc, #456]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a71      	ldr	r2, [pc, #452]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b6f      	ldr	r3, [pc, #444]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6e      	ldr	r2, [pc, #440]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 80021bc:	4b6b      	ldr	r3, [pc, #428]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a6a      	ldr	r2, [pc, #424]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b68      	ldr	r3, [pc, #416]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a67      	ldr	r2, [pc, #412]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff fbfc 	bl	80019d8 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff fbf8 	bl	80019d8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1fa      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b5d      	ldr	r3, [pc, #372]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0xe4>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff fbe8 	bl	80019d8 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7ff fbe4 	bl	80019d8 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1e6      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x10c>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d063      	beq.n	8002302 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223a:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002246:	4b49      	ldr	r3, [pc, #292]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	d11c      	bne.n	800228c <HAL_RCC_OscConfig+0x18c>
 8002252:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d116      	bne.n	800228c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	4b43      	ldr	r3, [pc, #268]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x176>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d001      	beq.n	8002276 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e1ba      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4939      	ldr	r1, [pc, #228]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	e03a      	b.n	8002302 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d020      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002294:	4b36      	ldr	r3, [pc, #216]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7ff fb9d 	bl	80019d8 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a2:	f7ff fb99 	bl	80019d8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e19b      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c0:	4b2a      	ldr	r3, [pc, #168]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4927      	ldr	r1, [pc, #156]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
 80022d4:	e015      	b.n	8002302 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fb7c 	bl	80019d8 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e4:	f7ff fb78 	bl	80019d8 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e17a      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d03a      	beq.n	8002384 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d019      	beq.n	800234a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_RCC_OscConfig+0x274>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7ff fb5c 	bl	80019d8 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7ff fb58 	bl	80019d8 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e15a      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002342:	2001      	movs	r0, #1
 8002344:	f000 fad8 	bl	80028f8 <RCC_Delay>
 8002348:	e01c      	b.n	8002384 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_RCC_OscConfig+0x274>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7ff fb42 	bl	80019d8 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002356:	e00f      	b.n	8002378 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff fb3e 	bl	80019d8 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d908      	bls.n	8002378 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e140      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	42420000 	.word	0x42420000
 8002374:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002378:	4b9e      	ldr	r3, [pc, #632]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e9      	bne.n	8002358 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80a6 	beq.w	80024de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002396:	4b97      	ldr	r3, [pc, #604]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	4b94      	ldr	r3, [pc, #592]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a93      	ldr	r2, [pc, #588]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ac:	61d3      	str	r3, [r2, #28]
 80023ae:	4b91      	ldr	r3, [pc, #580]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ba:	2301      	movs	r3, #1
 80023bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b8e      	ldr	r3, [pc, #568]	; (80025f8 <HAL_RCC_OscConfig+0x4f8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d118      	bne.n	80023fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ca:	4b8b      	ldr	r3, [pc, #556]	; (80025f8 <HAL_RCC_OscConfig+0x4f8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a8a      	ldr	r2, [pc, #552]	; (80025f8 <HAL_RCC_OscConfig+0x4f8>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d6:	f7ff faff 	bl	80019d8 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7ff fafb 	bl	80019d8 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b64      	cmp	r3, #100	; 0x64
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0fd      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4b81      	ldr	r3, [pc, #516]	; (80025f8 <HAL_RCC_OscConfig+0x4f8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x312>
 8002404:	4b7b      	ldr	r3, [pc, #492]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4a7a      	ldr	r2, [pc, #488]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	e02d      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x334>
 800241a:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a75      	ldr	r2, [pc, #468]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	4b73      	ldr	r3, [pc, #460]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a72      	ldr	r2, [pc, #456]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	e01c      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b05      	cmp	r3, #5
 800243a:	d10c      	bne.n	8002456 <HAL_RCC_OscConfig+0x356>
 800243c:	4b6d      	ldr	r3, [pc, #436]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a6c      	ldr	r2, [pc, #432]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	4b6a      	ldr	r3, [pc, #424]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4a69      	ldr	r2, [pc, #420]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	e00b      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002456:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a66      	ldr	r2, [pc, #408]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	4b64      	ldr	r3, [pc, #400]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a63      	ldr	r2, [pc, #396]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	f023 0304 	bic.w	r3, r3, #4
 800246c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d015      	beq.n	80024a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7ff faaf 	bl	80019d8 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7ff faab 	bl	80019d8 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0ab      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002494:	4b57      	ldr	r3, [pc, #348]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ee      	beq.n	800247e <HAL_RCC_OscConfig+0x37e>
 80024a0:	e014      	b.n	80024cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7ff fa99 	bl	80019d8 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7ff fa95 	bl	80019d8 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e095      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c0:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ee      	bne.n	80024aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d105      	bne.n	80024de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d2:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a47      	ldr	r2, [pc, #284]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8081 	beq.w	80025ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e8:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d061      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d146      	bne.n	800258a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b3f      	ldr	r3, [pc, #252]	; (80025fc <HAL_RCC_OscConfig+0x4fc>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7ff fa69 	bl	80019d8 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7ff fa65 	bl	80019d8 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e067      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251c:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d108      	bne.n	8002544 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002532:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	492d      	ldr	r1, [pc, #180]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a19      	ldr	r1, [r3, #32]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	430b      	orrs	r3, r1
 8002556:	4927      	ldr	r1, [pc, #156]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <HAL_RCC_OscConfig+0x4fc>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7ff fa39 	bl	80019d8 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7ff fa35 	bl	80019d8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e037      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x46a>
 8002588:	e02f      	b.n	80025ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <HAL_RCC_OscConfig+0x4fc>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7ff fa22 	bl	80019d8 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7ff fa1e 	bl	80019d8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e020      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x498>
 80025b6:	e018      	b.n	80025ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e013      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42420060 	.word	0x42420060

08002600 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0d0      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002614:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d910      	bls.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4965      	ldr	r1, [pc, #404]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0b8      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002666:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002674:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a52      	ldr	r2, [pc, #328]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800267e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	494d      	ldr	r1, [pc, #308]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d040      	beq.n	8002720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d115      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e07f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e073      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e06b      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026de:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f023 0203 	bic.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4936      	ldr	r1, [pc, #216]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f0:	f7ff f972 	bl	80019d8 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	e00a      	b.n	800270e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	f7ff f96e 	bl	80019d8 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e053      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 020c 	and.w	r2, r3, #12
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	429a      	cmp	r2, r3
 800271e:	d1eb      	bne.n	80026f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d210      	bcs.n	8002750 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 0207 	bic.w	r2, r3, #7
 8002736:	4922      	ldr	r1, [pc, #136]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e032      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4916      	ldr	r1, [pc, #88]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	490e      	ldr	r1, [pc, #56]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278e:	f000 f821 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002792:	4602      	mov	r2, r0
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	490a      	ldr	r1, [pc, #40]	; (80027c8 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	5ccb      	ldrb	r3, [r1, r3]
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	4a09      	ldr	r2, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x1cc>)
 80027a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_ClockConfig+0x1d0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f8d0 	bl	8001954 <HAL_InitTick>

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40021000 	.word	0x40021000
 80027c8:	080044a4 	.word	0x080044a4
 80027cc:	20000020 	.word	0x20000020
 80027d0:	20000024 	.word	0x20000024

080027d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b490      	push	{r4, r7}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027dc:	1d3c      	adds	r4, r7, #4
 80027de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027e4:	f240 2301 	movw	r3, #513	; 0x201
 80027e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b04      	cmp	r3, #4
 800280c:	d002      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x40>
 800280e:	2b08      	cmp	r3, #8
 8002810:	d003      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x46>
 8002812:	e02d      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002816:	623b      	str	r3, [r7, #32]
      break;
 8002818:	e02d      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	0c9b      	lsrs	r3, r3, #18
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002826:	4413      	add	r3, r2
 8002828:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800282c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d013      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	0c5b      	lsrs	r3, r3, #17
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002846:	4413      	add	r3, r2
 8002848:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800284c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	4a0e      	ldr	r2, [pc, #56]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002852:	fb02 f203 	mul.w	r2, r2, r3
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	e004      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	623b      	str	r3, [r7, #32]
      break;
 800286e:	e002      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002872:	623b      	str	r3, [r7, #32]
      break;
 8002874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002876:	6a3b      	ldr	r3, [r7, #32]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3728      	adds	r7, #40	; 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bc90      	pop	{r4, r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	08004494 	.word	0x08004494
 8002888:	40021000 	.word	0x40021000
 800288c:	007a1200 	.word	0x007a1200
 8002890:	003d0900 	.word	0x003d0900

08002894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002898:	4b02      	ldr	r3, [pc, #8]	; (80028a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	20000020 	.word	0x20000020

080028a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028ac:	f7ff fff2 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4903      	ldr	r1, [pc, #12]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	080044b4 	.word	0x080044b4

080028d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d4:	f7ff ffde 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0adb      	lsrs	r3, r3, #11
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4903      	ldr	r1, [pc, #12]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	080044b4 	.word	0x080044b4

080028f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <RCC_Delay+0x34>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <RCC_Delay+0x38>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0a5b      	lsrs	r3, r3, #9
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002914:	bf00      	nop
  }
  while (Delay --);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1e5a      	subs	r2, r3, #1
 800291a:	60fa      	str	r2, [r7, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f9      	bne.n	8002914 <RCC_Delay+0x1c>
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	20000020 	.word	0x20000020
 8002930:	10624dd3 	.word	0x10624dd3

08002934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e041      	b.n	80029ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe fed0 	bl	8001700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3304      	adds	r3, #4
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f000 fa70 	bl	8002e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d001      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e03a      	b.n	8002a62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_TIM_Base_Start_IT+0x98>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00e      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x58>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a16:	d009      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x58>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d004      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x58>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d111      	bne.n	8002a50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d010      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4e:	e007      	b.n	8002a60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800

08002a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d122      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d11b      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0202 	mvn.w	r2, #2
 8002aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f9b1 	bl	8002e22 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f9a4 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f9b3 	bl	8002e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d122      	bne.n	8002b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d11b      	bne.n	8002b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0204 	mvn.w	r2, #4
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f987 	bl	8002e22 <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f97a 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f989 	bl	8002e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d122      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d11b      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0208 	mvn.w	r2, #8
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2204      	movs	r2, #4
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f95d 	bl	8002e22 <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f950 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f95f 	bl	8002e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0210 	mvn.w	r2, #16
 8002ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f933 	bl	8002e22 <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f926 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f935 	bl	8002e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d10e      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d107      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0201 	mvn.w	r2, #1
 8002bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe fc48 	bl	800148c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b80      	cmp	r3, #128	; 0x80
 8002c08:	d10e      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c14:	2b80      	cmp	r3, #128	; 0x80
 8002c16:	d107      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fa77 	bl	8003116 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8f9 	bl	8002e46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0220 	mvn.w	r2, #32
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fa42 	bl	8003104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_TIM_ConfigClockSource+0x18>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e0b3      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x180>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd8:	d03e      	beq.n	8002d58 <HAL_TIM_ConfigClockSource+0xd0>
 8002cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cde:	f200 8087 	bhi.w	8002df0 <HAL_TIM_ConfigClockSource+0x168>
 8002ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce6:	f000 8085 	beq.w	8002df4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cee:	d87f      	bhi.n	8002df0 <HAL_TIM_ConfigClockSource+0x168>
 8002cf0:	2b70      	cmp	r3, #112	; 0x70
 8002cf2:	d01a      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0xa2>
 8002cf4:	2b70      	cmp	r3, #112	; 0x70
 8002cf6:	d87b      	bhi.n	8002df0 <HAL_TIM_ConfigClockSource+0x168>
 8002cf8:	2b60      	cmp	r3, #96	; 0x60
 8002cfa:	d050      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x116>
 8002cfc:	2b60      	cmp	r3, #96	; 0x60
 8002cfe:	d877      	bhi.n	8002df0 <HAL_TIM_ConfigClockSource+0x168>
 8002d00:	2b50      	cmp	r3, #80	; 0x50
 8002d02:	d03c      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0xf6>
 8002d04:	2b50      	cmp	r3, #80	; 0x50
 8002d06:	d873      	bhi.n	8002df0 <HAL_TIM_ConfigClockSource+0x168>
 8002d08:	2b40      	cmp	r3, #64	; 0x40
 8002d0a:	d058      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x136>
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d86f      	bhi.n	8002df0 <HAL_TIM_ConfigClockSource+0x168>
 8002d10:	2b30      	cmp	r3, #48	; 0x30
 8002d12:	d064      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x156>
 8002d14:	2b30      	cmp	r3, #48	; 0x30
 8002d16:	d86b      	bhi.n	8002df0 <HAL_TIM_ConfigClockSource+0x168>
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d060      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x156>
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d867      	bhi.n	8002df0 <HAL_TIM_ConfigClockSource+0x168>
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d05c      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x156>
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d05a      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d28:	e062      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6899      	ldr	r1, [r3, #8]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f000 f966 	bl	800300a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	609a      	str	r2, [r3, #8]
      break;
 8002d56:	e04e      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6899      	ldr	r1, [r3, #8]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f000 f94f 	bl	800300a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d7a:	609a      	str	r2, [r3, #8]
      break;
 8002d7c:	e03b      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f000 f8c6 	bl	8002f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2150      	movs	r1, #80	; 0x50
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 f91d 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 8002d9c:	e02b      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f000 f8e4 	bl	8002f78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2160      	movs	r1, #96	; 0x60
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f90d 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 8002dbc:	e01b      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f000 f8a6 	bl	8002f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2140      	movs	r1, #64	; 0x40
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f8fd 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 8002ddc:	e00b      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4619      	mov	r1, r3
 8002de8:	4610      	mov	r0, r2
 8002dea:	f000 f8f4 	bl	8002fd6 <TIM_ITRx_SetConfig>
        break;
 8002dee:	e002      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002df0:	bf00      	nop
 8002df2:	e000      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002df4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a29      	ldr	r2, [pc, #164]	; (8002f10 <TIM_Base_SetConfig+0xb8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00b      	beq.n	8002e88 <TIM_Base_SetConfig+0x30>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e76:	d007      	beq.n	8002e88 <TIM_Base_SetConfig+0x30>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <TIM_Base_SetConfig+0xbc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d003      	beq.n	8002e88 <TIM_Base_SetConfig+0x30>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <TIM_Base_SetConfig+0xc0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d108      	bne.n	8002e9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <TIM_Base_SetConfig+0xb8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00b      	beq.n	8002eba <TIM_Base_SetConfig+0x62>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d007      	beq.n	8002eba <TIM_Base_SetConfig+0x62>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <TIM_Base_SetConfig+0xbc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d003      	beq.n	8002eba <TIM_Base_SetConfig+0x62>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <TIM_Base_SetConfig+0xc0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d108      	bne.n	8002ecc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <TIM_Base_SetConfig+0xb8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d103      	bne.n	8002f00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	615a      	str	r2, [r3, #20]
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40000800 	.word	0x40000800

08002f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f023 0201 	bic.w	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f023 030a 	bic.w	r3, r3, #10
 8002f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	621a      	str	r2, [r3, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f023 0210 	bic.w	r2, r3, #16
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	031b      	lsls	r3, r3, #12
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	621a      	str	r2, [r3, #32]
}
 8002fcc:	bf00      	nop
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b085      	sub	sp, #20
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f043 0307 	orr.w	r3, r3, #7
 8002ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	609a      	str	r2, [r3, #8]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800300a:	b480      	push	{r7}
 800300c:	b087      	sub	sp, #28
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003024:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	021a      	lsls	r2, r3, #8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	431a      	orrs	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4313      	orrs	r3, r2
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	609a      	str	r2, [r3, #8]
}
 800303e:	bf00      	nop
 8003040:	371c      	adds	r7, #28
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800305c:	2302      	movs	r3, #2
 800305e:	e046      	b.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a16      	ldr	r2, [pc, #88]	; (80030f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00e      	beq.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ac:	d009      	beq.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a12      	ldr	r2, [pc, #72]	; (80030fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a10      	ldr	r2, [pc, #64]	; (8003100 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10c      	bne.n	80030dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40000400 	.word	0x40000400
 8003100:	40000800 	.word	0x40000800

08003104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e03f      	b.n	80031ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fe fafa 	bl	8001748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	; 0x24
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fc85 	bl	8003a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08a      	sub	sp, #40	; 0x28
 80031c6:	af02      	add	r7, sp, #8
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d17c      	bne.n	80032dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_UART_Transmit+0x2c>
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e075      	b.n	80032de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_UART_Transmit+0x3e>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e06e      	b.n	80032de <HAL_UART_Transmit+0x11c>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2221      	movs	r2, #33	; 0x21
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003216:	f7fe fbdf 	bl	80019d8 <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003230:	d108      	bne.n	8003244 <HAL_UART_Transmit+0x82>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d104      	bne.n	8003244 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	e003      	b.n	800324c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003248:	2300      	movs	r3, #0
 800324a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003254:	e02a      	b.n	80032ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2200      	movs	r2, #0
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fa38 	bl	80036d6 <UART_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e036      	b.n	80032de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003284:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	3302      	adds	r3, #2
 800328a:	61bb      	str	r3, [r7, #24]
 800328c:	e007      	b.n	800329e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	3301      	adds	r3, #1
 800329c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1cf      	bne.n	8003256 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	2140      	movs	r1, #64	; 0x40
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fa08 	bl	80036d6 <UART_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e006      	b.n	80032de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	4613      	mov	r3, r2
 80032f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d11d      	bne.n	800333c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_UART_Receive_IT+0x26>
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e016      	b.n	800333e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_UART_Receive_IT+0x38>
 800331a:	2302      	movs	r3, #2
 800331c:	e00f      	b.n	800333e <HAL_UART_Receive_IT+0x58>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	461a      	mov	r2, r3
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fa19 	bl	800376a <UART_Start_Receive_IT>
 8003338:	4603      	mov	r3, r0
 800333a:	e000      	b.n	800333e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10d      	bne.n	800339a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_UART_IRQHandler+0x52>
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fac9 	bl	800392a <UART_Receive_IT>
      return;
 8003398:	e17b      	b.n	8003692 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80b1 	beq.w	8003504 <HAL_UART_IRQHandler+0x1bc>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <HAL_UART_IRQHandler+0x70>
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 80a6 	beq.w	8003504 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_UART_IRQHandler+0x90>
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_UART_IRQHandler+0xb0>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0202 	orr.w	r2, r3, #2
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_UART_IRQHandler+0xd0>
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f043 0204 	orr.w	r2, r3, #4
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00f      	beq.n	8003442 <HAL_UART_IRQHandler+0xfa>
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d104      	bne.n	8003436 <HAL_UART_IRQHandler+0xee>
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f043 0208 	orr.w	r2, r3, #8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 811e 	beq.w	8003688 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <HAL_UART_IRQHandler+0x11e>
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fa62 	bl	800392a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <HAL_UART_IRQHandler+0x146>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d031      	beq.n	80034f2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f9a4 	bl	80037dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d023      	beq.n	80034ea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d013      	beq.n	80034e2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	4a76      	ldr	r2, [pc, #472]	; (8003698 <HAL_UART_IRQHandler+0x350>)
 80034c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fbd8 	bl	8001c7c <HAL_DMA_Abort_IT>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d016      	beq.n	8003500 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034dc:	4610      	mov	r0, r2
 80034de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e0:	e00e      	b.n	8003500 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f8e3 	bl	80036ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e8:	e00a      	b.n	8003500 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f8df 	bl	80036ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f0:	e006      	b.n	8003500 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f8db 	bl	80036ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80034fe:	e0c3      	b.n	8003688 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003500:	bf00      	nop
    return;
 8003502:	e0c1      	b.n	8003688 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	2b01      	cmp	r3, #1
 800350a:	f040 80a1 	bne.w	8003650 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 809b 	beq.w	8003650 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8095 	beq.w	8003650 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d04e      	beq.n	80035e8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003554:	8a3b      	ldrh	r3, [r7, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8098 	beq.w	800368c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003560:	8a3a      	ldrh	r2, [r7, #16]
 8003562:	429a      	cmp	r2, r3
 8003564:	f080 8092 	bcs.w	800368c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8a3a      	ldrh	r2, [r7, #16]
 800356c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b20      	cmp	r3, #32
 8003576:	d02b      	beq.n	80035d0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003586:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0210 	bic.w	r2, r2, #16
 80035c4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe fb1b 	bl	8001c06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	b29b      	uxth	r3, r3
 80035de:	4619      	mov	r1, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f86d 	bl	80036c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80035e6:	e051      	b.n	800368c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d047      	beq.n	8003690 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003600:	8a7b      	ldrh	r3, [r7, #18]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d044      	beq.n	8003690 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003614:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0210 	bic.w	r2, r2, #16
 8003642:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003644:	8a7b      	ldrh	r3, [r7, #18]
 8003646:	4619      	mov	r1, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f839 	bl	80036c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800364e:	e01f      	b.n	8003690 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_UART_IRQHandler+0x324>
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f8f9 	bl	800385c <UART_Transmit_IT>
    return;
 800366a:	e012      	b.n	8003692 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <HAL_UART_IRQHandler+0x34a>
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f93a 	bl	80038fa <UART_EndTransmit_IT>
    return;
 8003686:	e004      	b.n	8003692 <HAL_UART_IRQHandler+0x34a>
    return;
 8003688:	bf00      	nop
 800368a:	e002      	b.n	8003692 <HAL_UART_IRQHandler+0x34a>
      return;
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <HAL_UART_IRQHandler+0x34a>
      return;
 8003690:	bf00      	nop
  }
}
 8003692:	3728      	adds	r7, #40	; 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	08003835 	.word	0x08003835

0800369c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e6:	e02c      	b.n	8003742 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d028      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x30>
 80036f6:	f7fe f96f 	bl	80019d8 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	429a      	cmp	r2, r3
 8003704:	d21d      	bcs.n	8003742 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003714:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e00f      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d0c3      	beq.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	4613      	mov	r3, r2
 8003776:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	88fa      	ldrh	r2, [r7, #6]
 8003782:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	88fa      	ldrh	r2, [r7, #6]
 8003788:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2222      	movs	r2, #34	; 0x22
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0220 	orr.w	r2, r2, #32
 80037ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0210 	bic.w	r2, r2, #16
 800381a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff ff2d 	bl	80036ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b21      	cmp	r3, #33	; 0x21
 800386e:	d13e      	bne.n	80038ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003878:	d114      	bne.n	80038a4 <UART_Transmit_IT+0x48>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d110      	bne.n	80038a4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003896:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	1c9a      	adds	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	621a      	str	r2, [r3, #32]
 80038a2:	e008      	b.n	80038b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	1c59      	adds	r1, r3, #1
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6211      	str	r1, [r2, #32]
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29b      	uxth	r3, r3
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4619      	mov	r1, r3
 80038c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e000      	b.n	80038f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038ee:	2302      	movs	r3, #2
  }
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003910:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff febe 	bl	800369c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b22      	cmp	r3, #34	; 0x22
 800393c:	f040 8099 	bne.w	8003a72 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003948:	d117      	bne.n	800397a <UART_Receive_IT+0x50>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d113      	bne.n	800397a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	b29b      	uxth	r3, r3
 8003964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003968:	b29a      	uxth	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	1c9a      	adds	r2, r3, #2
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	629a      	str	r2, [r3, #40]	; 0x28
 8003978:	e026      	b.n	80039c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398c:	d007      	beq.n	800399e <UART_Receive_IT+0x74>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <UART_Receive_IT+0x82>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	e008      	b.n	80039be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4619      	mov	r1, r3
 80039d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d148      	bne.n	8003a6e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0220 	bic.w	r2, r2, #32
 80039ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d123      	bne.n	8003a64 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0210 	bic.w	r2, r2, #16
 8003a30:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d10a      	bne.n	8003a56 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fe2f 	bl	80036c0 <HAL_UARTEx_RxEventCallback>
 8003a62:	e002      	b.n	8003a6a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fd fbb3 	bl	80011d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e002      	b.n	8003a74 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a72:	2302      	movs	r3, #2
  }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ab6:	f023 030c 	bic.w	r3, r3, #12
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <UART_SetConfig+0x114>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d103      	bne.n	8003aec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ae4:	f7fe fef4 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	e002      	b.n	8003af2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7fe fedc 	bl	80028a8 <HAL_RCC_GetPCLK1Freq>
 8003af0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	009a      	lsls	r2, r3, #2
 8003afc:	441a      	add	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	4a22      	ldr	r2, [pc, #136]	; (8003b94 <UART_SetConfig+0x118>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	0119      	lsls	r1, r3, #4
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009a      	lsls	r2, r3, #2
 8003b1c:	441a      	add	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <UART_SetConfig+0x118>)
 8003b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2064      	movs	r0, #100	; 0x64
 8003b32:	fb00 f303 	mul.w	r3, r0, r3
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	3332      	adds	r3, #50	; 0x32
 8003b3c:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <UART_SetConfig+0x118>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b48:	4419      	add	r1, r3
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009a      	lsls	r2, r3, #2
 8003b54:	441a      	add	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <UART_SetConfig+0x118>)
 8003b62:	fba3 0302 	umull	r0, r3, r3, r2
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2064      	movs	r0, #100	; 0x64
 8003b6a:	fb00 f303 	mul.w	r3, r0, r3
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	3332      	adds	r3, #50	; 0x32
 8003b74:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <UART_SetConfig+0x118>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	f003 020f 	and.w	r2, r3, #15
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	440a      	add	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40013800 	.word	0x40013800
 8003b94:	51eb851f 	.word	0x51eb851f

08003b98 <__errno>:
 8003b98:	4b01      	ldr	r3, [pc, #4]	; (8003ba0 <__errno+0x8>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	2000002c 	.word	0x2000002c

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	4d0c      	ldr	r5, [pc, #48]	; (8003bdc <__libc_init_array+0x38>)
 8003baa:	4c0d      	ldr	r4, [pc, #52]	; (8003be0 <__libc_init_array+0x3c>)
 8003bac:	1b64      	subs	r4, r4, r5
 8003bae:	10a4      	asrs	r4, r4, #2
 8003bb0:	42a6      	cmp	r6, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	f000 fc5c 	bl	8004470 <_init>
 8003bb8:	2600      	movs	r6, #0
 8003bba:	4d0a      	ldr	r5, [pc, #40]	; (8003be4 <__libc_init_array+0x40>)
 8003bbc:	4c0a      	ldr	r4, [pc, #40]	; (8003be8 <__libc_init_array+0x44>)
 8003bbe:	1b64      	subs	r4, r4, r5
 8003bc0:	10a4      	asrs	r4, r4, #2
 8003bc2:	42a6      	cmp	r6, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bcc:	4798      	blx	r3
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd6:	4798      	blx	r3
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	080044f0 	.word	0x080044f0
 8003be0:	080044f0 	.word	0x080044f0
 8003be4:	080044f0 	.word	0x080044f0
 8003be8:	080044f4 	.word	0x080044f4

08003bec <memset>:
 8003bec:	4603      	mov	r3, r0
 8003bee:	4402      	add	r2, r0
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d100      	bne.n	8003bf6 <memset+0xa>
 8003bf4:	4770      	bx	lr
 8003bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bfa:	e7f9      	b.n	8003bf0 <memset+0x4>

08003bfc <siprintf>:
 8003bfc:	b40e      	push	{r1, r2, r3}
 8003bfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c02:	b500      	push	{lr}
 8003c04:	b09c      	sub	sp, #112	; 0x70
 8003c06:	ab1d      	add	r3, sp, #116	; 0x74
 8003c08:	9002      	str	r0, [sp, #8]
 8003c0a:	9006      	str	r0, [sp, #24]
 8003c0c:	9107      	str	r1, [sp, #28]
 8003c0e:	9104      	str	r1, [sp, #16]
 8003c10:	4808      	ldr	r0, [pc, #32]	; (8003c34 <siprintf+0x38>)
 8003c12:	4909      	ldr	r1, [pc, #36]	; (8003c38 <siprintf+0x3c>)
 8003c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c18:	9105      	str	r1, [sp, #20]
 8003c1a:	6800      	ldr	r0, [r0, #0]
 8003c1c:	a902      	add	r1, sp, #8
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	f000 f868 	bl	8003cf4 <_svfiprintf_r>
 8003c24:	2200      	movs	r2, #0
 8003c26:	9b02      	ldr	r3, [sp, #8]
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	b01c      	add	sp, #112	; 0x70
 8003c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c30:	b003      	add	sp, #12
 8003c32:	4770      	bx	lr
 8003c34:	2000002c 	.word	0x2000002c
 8003c38:	ffff0208 	.word	0xffff0208

08003c3c <__ssputs_r>:
 8003c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c40:	688e      	ldr	r6, [r1, #8]
 8003c42:	4682      	mov	sl, r0
 8003c44:	429e      	cmp	r6, r3
 8003c46:	460c      	mov	r4, r1
 8003c48:	4690      	mov	r8, r2
 8003c4a:	461f      	mov	r7, r3
 8003c4c:	d838      	bhi.n	8003cc0 <__ssputs_r+0x84>
 8003c4e:	898a      	ldrh	r2, [r1, #12]
 8003c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c54:	d032      	beq.n	8003cbc <__ssputs_r+0x80>
 8003c56:	6825      	ldr	r5, [r4, #0]
 8003c58:	6909      	ldr	r1, [r1, #16]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	eba5 0901 	sub.w	r9, r5, r1
 8003c60:	6965      	ldr	r5, [r4, #20]
 8003c62:	444b      	add	r3, r9
 8003c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c6c:	106d      	asrs	r5, r5, #1
 8003c6e:	429d      	cmp	r5, r3
 8003c70:	bf38      	it	cc
 8003c72:	461d      	movcc	r5, r3
 8003c74:	0553      	lsls	r3, r2, #21
 8003c76:	d531      	bpl.n	8003cdc <__ssputs_r+0xa0>
 8003c78:	4629      	mov	r1, r5
 8003c7a:	f000 fb53 	bl	8004324 <_malloc_r>
 8003c7e:	4606      	mov	r6, r0
 8003c80:	b950      	cbnz	r0, 8003c98 <__ssputs_r+0x5c>
 8003c82:	230c      	movs	r3, #12
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295
 8003c88:	f8ca 3000 	str.w	r3, [sl]
 8003c8c:	89a3      	ldrh	r3, [r4, #12]
 8003c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c92:	81a3      	strh	r3, [r4, #12]
 8003c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c98:	464a      	mov	r2, r9
 8003c9a:	6921      	ldr	r1, [r4, #16]
 8003c9c:	f000 face 	bl	800423c <memcpy>
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	6126      	str	r6, [r4, #16]
 8003cae:	444e      	add	r6, r9
 8003cb0:	6026      	str	r6, [r4, #0]
 8003cb2:	463e      	mov	r6, r7
 8003cb4:	6165      	str	r5, [r4, #20]
 8003cb6:	eba5 0509 	sub.w	r5, r5, r9
 8003cba:	60a5      	str	r5, [r4, #8]
 8003cbc:	42be      	cmp	r6, r7
 8003cbe:	d900      	bls.n	8003cc2 <__ssputs_r+0x86>
 8003cc0:	463e      	mov	r6, r7
 8003cc2:	4632      	mov	r2, r6
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	f000 fac6 	bl	8004258 <memmove>
 8003ccc:	68a3      	ldr	r3, [r4, #8]
 8003cce:	6822      	ldr	r2, [r4, #0]
 8003cd0:	1b9b      	subs	r3, r3, r6
 8003cd2:	4432      	add	r2, r6
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	60a3      	str	r3, [r4, #8]
 8003cd8:	6022      	str	r2, [r4, #0]
 8003cda:	e7db      	b.n	8003c94 <__ssputs_r+0x58>
 8003cdc:	462a      	mov	r2, r5
 8003cde:	f000 fb7b 	bl	80043d8 <_realloc_r>
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d1e1      	bne.n	8003cac <__ssputs_r+0x70>
 8003ce8:	4650      	mov	r0, sl
 8003cea:	6921      	ldr	r1, [r4, #16]
 8003cec:	f000 face 	bl	800428c <_free_r>
 8003cf0:	e7c7      	b.n	8003c82 <__ssputs_r+0x46>
	...

08003cf4 <_svfiprintf_r>:
 8003cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf8:	4698      	mov	r8, r3
 8003cfa:	898b      	ldrh	r3, [r1, #12]
 8003cfc:	4607      	mov	r7, r0
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	460d      	mov	r5, r1
 8003d02:	4614      	mov	r4, r2
 8003d04:	b09d      	sub	sp, #116	; 0x74
 8003d06:	d50e      	bpl.n	8003d26 <_svfiprintf_r+0x32>
 8003d08:	690b      	ldr	r3, [r1, #16]
 8003d0a:	b963      	cbnz	r3, 8003d26 <_svfiprintf_r+0x32>
 8003d0c:	2140      	movs	r1, #64	; 0x40
 8003d0e:	f000 fb09 	bl	8004324 <_malloc_r>
 8003d12:	6028      	str	r0, [r5, #0]
 8003d14:	6128      	str	r0, [r5, #16]
 8003d16:	b920      	cbnz	r0, 8003d22 <_svfiprintf_r+0x2e>
 8003d18:	230c      	movs	r3, #12
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	e0d1      	b.n	8003ec6 <_svfiprintf_r+0x1d2>
 8003d22:	2340      	movs	r3, #64	; 0x40
 8003d24:	616b      	str	r3, [r5, #20]
 8003d26:	2300      	movs	r3, #0
 8003d28:	9309      	str	r3, [sp, #36]	; 0x24
 8003d2a:	2320      	movs	r3, #32
 8003d2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d30:	2330      	movs	r3, #48	; 0x30
 8003d32:	f04f 0901 	mov.w	r9, #1
 8003d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ee0 <_svfiprintf_r+0x1ec>
 8003d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d42:	4623      	mov	r3, r4
 8003d44:	469a      	mov	sl, r3
 8003d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d4a:	b10a      	cbz	r2, 8003d50 <_svfiprintf_r+0x5c>
 8003d4c:	2a25      	cmp	r2, #37	; 0x25
 8003d4e:	d1f9      	bne.n	8003d44 <_svfiprintf_r+0x50>
 8003d50:	ebba 0b04 	subs.w	fp, sl, r4
 8003d54:	d00b      	beq.n	8003d6e <_svfiprintf_r+0x7a>
 8003d56:	465b      	mov	r3, fp
 8003d58:	4622      	mov	r2, r4
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	f7ff ff6d 	bl	8003c3c <__ssputs_r>
 8003d62:	3001      	adds	r0, #1
 8003d64:	f000 80aa 	beq.w	8003ebc <_svfiprintf_r+0x1c8>
 8003d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d6a:	445a      	add	r2, fp
 8003d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80a2 	beq.w	8003ebc <_svfiprintf_r+0x1c8>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d82:	f10a 0a01 	add.w	sl, sl, #1
 8003d86:	9304      	str	r3, [sp, #16]
 8003d88:	9307      	str	r3, [sp, #28]
 8003d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d90:	4654      	mov	r4, sl
 8003d92:	2205      	movs	r2, #5
 8003d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d98:	4851      	ldr	r0, [pc, #324]	; (8003ee0 <_svfiprintf_r+0x1ec>)
 8003d9a:	f000 fa41 	bl	8004220 <memchr>
 8003d9e:	9a04      	ldr	r2, [sp, #16]
 8003da0:	b9d8      	cbnz	r0, 8003dda <_svfiprintf_r+0xe6>
 8003da2:	06d0      	lsls	r0, r2, #27
 8003da4:	bf44      	itt	mi
 8003da6:	2320      	movmi	r3, #32
 8003da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dac:	0711      	lsls	r1, r2, #28
 8003dae:	bf44      	itt	mi
 8003db0:	232b      	movmi	r3, #43	; 0x2b
 8003db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003db6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dba:	2b2a      	cmp	r3, #42	; 0x2a
 8003dbc:	d015      	beq.n	8003dea <_svfiprintf_r+0xf6>
 8003dbe:	4654      	mov	r4, sl
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f04f 0c0a 	mov.w	ip, #10
 8003dc6:	9a07      	ldr	r2, [sp, #28]
 8003dc8:	4621      	mov	r1, r4
 8003dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dce:	3b30      	subs	r3, #48	; 0x30
 8003dd0:	2b09      	cmp	r3, #9
 8003dd2:	d94e      	bls.n	8003e72 <_svfiprintf_r+0x17e>
 8003dd4:	b1b0      	cbz	r0, 8003e04 <_svfiprintf_r+0x110>
 8003dd6:	9207      	str	r2, [sp, #28]
 8003dd8:	e014      	b.n	8003e04 <_svfiprintf_r+0x110>
 8003dda:	eba0 0308 	sub.w	r3, r0, r8
 8003dde:	fa09 f303 	lsl.w	r3, r9, r3
 8003de2:	4313      	orrs	r3, r2
 8003de4:	46a2      	mov	sl, r4
 8003de6:	9304      	str	r3, [sp, #16]
 8003de8:	e7d2      	b.n	8003d90 <_svfiprintf_r+0x9c>
 8003dea:	9b03      	ldr	r3, [sp, #12]
 8003dec:	1d19      	adds	r1, r3, #4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	9103      	str	r1, [sp, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bfbb      	ittet	lt
 8003df6:	425b      	neglt	r3, r3
 8003df8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dfc:	9307      	strge	r3, [sp, #28]
 8003dfe:	9307      	strlt	r3, [sp, #28]
 8003e00:	bfb8      	it	lt
 8003e02:	9204      	strlt	r2, [sp, #16]
 8003e04:	7823      	ldrb	r3, [r4, #0]
 8003e06:	2b2e      	cmp	r3, #46	; 0x2e
 8003e08:	d10c      	bne.n	8003e24 <_svfiprintf_r+0x130>
 8003e0a:	7863      	ldrb	r3, [r4, #1]
 8003e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0e:	d135      	bne.n	8003e7c <_svfiprintf_r+0x188>
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	3402      	adds	r4, #2
 8003e14:	1d1a      	adds	r2, r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	9203      	str	r2, [sp, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bfb8      	it	lt
 8003e1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e22:	9305      	str	r3, [sp, #20]
 8003e24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ef0 <_svfiprintf_r+0x1fc>
 8003e28:	2203      	movs	r2, #3
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	7821      	ldrb	r1, [r4, #0]
 8003e2e:	f000 f9f7 	bl	8004220 <memchr>
 8003e32:	b140      	cbz	r0, 8003e46 <_svfiprintf_r+0x152>
 8003e34:	2340      	movs	r3, #64	; 0x40
 8003e36:	eba0 000a 	sub.w	r0, r0, sl
 8003e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e3e:	9b04      	ldr	r3, [sp, #16]
 8003e40:	3401      	adds	r4, #1
 8003e42:	4303      	orrs	r3, r0
 8003e44:	9304      	str	r3, [sp, #16]
 8003e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e4a:	2206      	movs	r2, #6
 8003e4c:	4825      	ldr	r0, [pc, #148]	; (8003ee4 <_svfiprintf_r+0x1f0>)
 8003e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e52:	f000 f9e5 	bl	8004220 <memchr>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d038      	beq.n	8003ecc <_svfiprintf_r+0x1d8>
 8003e5a:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <_svfiprintf_r+0x1f4>)
 8003e5c:	bb1b      	cbnz	r3, 8003ea6 <_svfiprintf_r+0x1b2>
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	3307      	adds	r3, #7
 8003e62:	f023 0307 	bic.w	r3, r3, #7
 8003e66:	3308      	adds	r3, #8
 8003e68:	9303      	str	r3, [sp, #12]
 8003e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6c:	4433      	add	r3, r6
 8003e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e70:	e767      	b.n	8003d42 <_svfiprintf_r+0x4e>
 8003e72:	460c      	mov	r4, r1
 8003e74:	2001      	movs	r0, #1
 8003e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e7a:	e7a5      	b.n	8003dc8 <_svfiprintf_r+0xd4>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f04f 0c0a 	mov.w	ip, #10
 8003e82:	4619      	mov	r1, r3
 8003e84:	3401      	adds	r4, #1
 8003e86:	9305      	str	r3, [sp, #20]
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e8e:	3a30      	subs	r2, #48	; 0x30
 8003e90:	2a09      	cmp	r2, #9
 8003e92:	d903      	bls.n	8003e9c <_svfiprintf_r+0x1a8>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0c5      	beq.n	8003e24 <_svfiprintf_r+0x130>
 8003e98:	9105      	str	r1, [sp, #20]
 8003e9a:	e7c3      	b.n	8003e24 <_svfiprintf_r+0x130>
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ea4:	e7f0      	b.n	8003e88 <_svfiprintf_r+0x194>
 8003ea6:	ab03      	add	r3, sp, #12
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	462a      	mov	r2, r5
 8003eac:	4638      	mov	r0, r7
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <_svfiprintf_r+0x1f8>)
 8003eb0:	a904      	add	r1, sp, #16
 8003eb2:	f3af 8000 	nop.w
 8003eb6:	1c42      	adds	r2, r0, #1
 8003eb8:	4606      	mov	r6, r0
 8003eba:	d1d6      	bne.n	8003e6a <_svfiprintf_r+0x176>
 8003ebc:	89ab      	ldrh	r3, [r5, #12]
 8003ebe:	065b      	lsls	r3, r3, #25
 8003ec0:	f53f af2c 	bmi.w	8003d1c <_svfiprintf_r+0x28>
 8003ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ec6:	b01d      	add	sp, #116	; 0x74
 8003ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ecc:	ab03      	add	r3, sp, #12
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	462a      	mov	r2, r5
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <_svfiprintf_r+0x1f8>)
 8003ed6:	a904      	add	r1, sp, #16
 8003ed8:	f000 f87c 	bl	8003fd4 <_printf_i>
 8003edc:	e7eb      	b.n	8003eb6 <_svfiprintf_r+0x1c2>
 8003ede:	bf00      	nop
 8003ee0:	080044bc 	.word	0x080044bc
 8003ee4:	080044c6 	.word	0x080044c6
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	08003c3d 	.word	0x08003c3d
 8003ef0:	080044c2 	.word	0x080044c2

08003ef4 <_printf_common>:
 8003ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef8:	4616      	mov	r6, r2
 8003efa:	4699      	mov	r9, r3
 8003efc:	688a      	ldr	r2, [r1, #8]
 8003efe:	690b      	ldr	r3, [r1, #16]
 8003f00:	4607      	mov	r7, r0
 8003f02:	4293      	cmp	r3, r2
 8003f04:	bfb8      	it	lt
 8003f06:	4613      	movlt	r3, r2
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f0e:	460c      	mov	r4, r1
 8003f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f14:	b10a      	cbz	r2, 8003f1a <_printf_common+0x26>
 8003f16:	3301      	adds	r3, #1
 8003f18:	6033      	str	r3, [r6, #0]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	0699      	lsls	r1, r3, #26
 8003f1e:	bf42      	ittt	mi
 8003f20:	6833      	ldrmi	r3, [r6, #0]
 8003f22:	3302      	addmi	r3, #2
 8003f24:	6033      	strmi	r3, [r6, #0]
 8003f26:	6825      	ldr	r5, [r4, #0]
 8003f28:	f015 0506 	ands.w	r5, r5, #6
 8003f2c:	d106      	bne.n	8003f3c <_printf_common+0x48>
 8003f2e:	f104 0a19 	add.w	sl, r4, #25
 8003f32:	68e3      	ldr	r3, [r4, #12]
 8003f34:	6832      	ldr	r2, [r6, #0]
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	42ab      	cmp	r3, r5
 8003f3a:	dc28      	bgt.n	8003f8e <_printf_common+0x9a>
 8003f3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f40:	1e13      	subs	r3, r2, #0
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	bf18      	it	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	0692      	lsls	r2, r2, #26
 8003f4a:	d42d      	bmi.n	8003fa8 <_printf_common+0xb4>
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	4638      	mov	r0, r7
 8003f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f54:	47c0      	blx	r8
 8003f56:	3001      	adds	r0, #1
 8003f58:	d020      	beq.n	8003f9c <_printf_common+0xa8>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	68e5      	ldr	r5, [r4, #12]
 8003f5e:	f003 0306 	and.w	r3, r3, #6
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	bf18      	it	ne
 8003f66:	2500      	movne	r5, #0
 8003f68:	6832      	ldr	r2, [r6, #0]
 8003f6a:	f04f 0600 	mov.w	r6, #0
 8003f6e:	68a3      	ldr	r3, [r4, #8]
 8003f70:	bf08      	it	eq
 8003f72:	1aad      	subeq	r5, r5, r2
 8003f74:	6922      	ldr	r2, [r4, #16]
 8003f76:	bf08      	it	eq
 8003f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	bfc4      	itt	gt
 8003f80:	1a9b      	subgt	r3, r3, r2
 8003f82:	18ed      	addgt	r5, r5, r3
 8003f84:	341a      	adds	r4, #26
 8003f86:	42b5      	cmp	r5, r6
 8003f88:	d11a      	bne.n	8003fc0 <_printf_common+0xcc>
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	e008      	b.n	8003fa0 <_printf_common+0xac>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4652      	mov	r2, sl
 8003f92:	4649      	mov	r1, r9
 8003f94:	4638      	mov	r0, r7
 8003f96:	47c0      	blx	r8
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d103      	bne.n	8003fa4 <_printf_common+0xb0>
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa4:	3501      	adds	r5, #1
 8003fa6:	e7c4      	b.n	8003f32 <_printf_common+0x3e>
 8003fa8:	2030      	movs	r0, #48	; 0x30
 8003faa:	18e1      	adds	r1, r4, r3
 8003fac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fb6:	4422      	add	r2, r4
 8003fb8:	3302      	adds	r3, #2
 8003fba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fbe:	e7c5      	b.n	8003f4c <_printf_common+0x58>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	47c0      	blx	r8
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d0e6      	beq.n	8003f9c <_printf_common+0xa8>
 8003fce:	3601      	adds	r6, #1
 8003fd0:	e7d9      	b.n	8003f86 <_printf_common+0x92>
	...

08003fd4 <_printf_i>:
 8003fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd8:	460c      	mov	r4, r1
 8003fda:	7e27      	ldrb	r7, [r4, #24]
 8003fdc:	4691      	mov	r9, r2
 8003fde:	2f78      	cmp	r7, #120	; 0x78
 8003fe0:	4680      	mov	r8, r0
 8003fe2:	469a      	mov	sl, r3
 8003fe4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fea:	d807      	bhi.n	8003ffc <_printf_i+0x28>
 8003fec:	2f62      	cmp	r7, #98	; 0x62
 8003fee:	d80a      	bhi.n	8004006 <_printf_i+0x32>
 8003ff0:	2f00      	cmp	r7, #0
 8003ff2:	f000 80d9 	beq.w	80041a8 <_printf_i+0x1d4>
 8003ff6:	2f58      	cmp	r7, #88	; 0x58
 8003ff8:	f000 80a4 	beq.w	8004144 <_printf_i+0x170>
 8003ffc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004004:	e03a      	b.n	800407c <_printf_i+0xa8>
 8004006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800400a:	2b15      	cmp	r3, #21
 800400c:	d8f6      	bhi.n	8003ffc <_printf_i+0x28>
 800400e:	a001      	add	r0, pc, #4	; (adr r0, 8004014 <_printf_i+0x40>)
 8004010:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004014:	0800406d 	.word	0x0800406d
 8004018:	08004081 	.word	0x08004081
 800401c:	08003ffd 	.word	0x08003ffd
 8004020:	08003ffd 	.word	0x08003ffd
 8004024:	08003ffd 	.word	0x08003ffd
 8004028:	08003ffd 	.word	0x08003ffd
 800402c:	08004081 	.word	0x08004081
 8004030:	08003ffd 	.word	0x08003ffd
 8004034:	08003ffd 	.word	0x08003ffd
 8004038:	08003ffd 	.word	0x08003ffd
 800403c:	08003ffd 	.word	0x08003ffd
 8004040:	0800418f 	.word	0x0800418f
 8004044:	080040b1 	.word	0x080040b1
 8004048:	08004171 	.word	0x08004171
 800404c:	08003ffd 	.word	0x08003ffd
 8004050:	08003ffd 	.word	0x08003ffd
 8004054:	080041b1 	.word	0x080041b1
 8004058:	08003ffd 	.word	0x08003ffd
 800405c:	080040b1 	.word	0x080040b1
 8004060:	08003ffd 	.word	0x08003ffd
 8004064:	08003ffd 	.word	0x08003ffd
 8004068:	08004179 	.word	0x08004179
 800406c:	680b      	ldr	r3, [r1, #0]
 800406e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	600a      	str	r2, [r1, #0]
 8004078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800407c:	2301      	movs	r3, #1
 800407e:	e0a4      	b.n	80041ca <_printf_i+0x1f6>
 8004080:	6825      	ldr	r5, [r4, #0]
 8004082:	6808      	ldr	r0, [r1, #0]
 8004084:	062e      	lsls	r6, r5, #24
 8004086:	f100 0304 	add.w	r3, r0, #4
 800408a:	d50a      	bpl.n	80040a2 <_printf_i+0xce>
 800408c:	6805      	ldr	r5, [r0, #0]
 800408e:	600b      	str	r3, [r1, #0]
 8004090:	2d00      	cmp	r5, #0
 8004092:	da03      	bge.n	800409c <_printf_i+0xc8>
 8004094:	232d      	movs	r3, #45	; 0x2d
 8004096:	426d      	negs	r5, r5
 8004098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800409c:	230a      	movs	r3, #10
 800409e:	485e      	ldr	r0, [pc, #376]	; (8004218 <_printf_i+0x244>)
 80040a0:	e019      	b.n	80040d6 <_printf_i+0x102>
 80040a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040a6:	6805      	ldr	r5, [r0, #0]
 80040a8:	600b      	str	r3, [r1, #0]
 80040aa:	bf18      	it	ne
 80040ac:	b22d      	sxthne	r5, r5
 80040ae:	e7ef      	b.n	8004090 <_printf_i+0xbc>
 80040b0:	680b      	ldr	r3, [r1, #0]
 80040b2:	6825      	ldr	r5, [r4, #0]
 80040b4:	1d18      	adds	r0, r3, #4
 80040b6:	6008      	str	r0, [r1, #0]
 80040b8:	0628      	lsls	r0, r5, #24
 80040ba:	d501      	bpl.n	80040c0 <_printf_i+0xec>
 80040bc:	681d      	ldr	r5, [r3, #0]
 80040be:	e002      	b.n	80040c6 <_printf_i+0xf2>
 80040c0:	0669      	lsls	r1, r5, #25
 80040c2:	d5fb      	bpl.n	80040bc <_printf_i+0xe8>
 80040c4:	881d      	ldrh	r5, [r3, #0]
 80040c6:	2f6f      	cmp	r7, #111	; 0x6f
 80040c8:	bf0c      	ite	eq
 80040ca:	2308      	moveq	r3, #8
 80040cc:	230a      	movne	r3, #10
 80040ce:	4852      	ldr	r0, [pc, #328]	; (8004218 <_printf_i+0x244>)
 80040d0:	2100      	movs	r1, #0
 80040d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040d6:	6866      	ldr	r6, [r4, #4]
 80040d8:	2e00      	cmp	r6, #0
 80040da:	bfa8      	it	ge
 80040dc:	6821      	ldrge	r1, [r4, #0]
 80040de:	60a6      	str	r6, [r4, #8]
 80040e0:	bfa4      	itt	ge
 80040e2:	f021 0104 	bicge.w	r1, r1, #4
 80040e6:	6021      	strge	r1, [r4, #0]
 80040e8:	b90d      	cbnz	r5, 80040ee <_printf_i+0x11a>
 80040ea:	2e00      	cmp	r6, #0
 80040ec:	d04d      	beq.n	800418a <_printf_i+0x1b6>
 80040ee:	4616      	mov	r6, r2
 80040f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80040f4:	fb03 5711 	mls	r7, r3, r1, r5
 80040f8:	5dc7      	ldrb	r7, [r0, r7]
 80040fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040fe:	462f      	mov	r7, r5
 8004100:	42bb      	cmp	r3, r7
 8004102:	460d      	mov	r5, r1
 8004104:	d9f4      	bls.n	80040f0 <_printf_i+0x11c>
 8004106:	2b08      	cmp	r3, #8
 8004108:	d10b      	bne.n	8004122 <_printf_i+0x14e>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	07df      	lsls	r7, r3, #31
 800410e:	d508      	bpl.n	8004122 <_printf_i+0x14e>
 8004110:	6923      	ldr	r3, [r4, #16]
 8004112:	6861      	ldr	r1, [r4, #4]
 8004114:	4299      	cmp	r1, r3
 8004116:	bfde      	ittt	le
 8004118:	2330      	movle	r3, #48	; 0x30
 800411a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800411e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004122:	1b92      	subs	r2, r2, r6
 8004124:	6122      	str	r2, [r4, #16]
 8004126:	464b      	mov	r3, r9
 8004128:	4621      	mov	r1, r4
 800412a:	4640      	mov	r0, r8
 800412c:	f8cd a000 	str.w	sl, [sp]
 8004130:	aa03      	add	r2, sp, #12
 8004132:	f7ff fedf 	bl	8003ef4 <_printf_common>
 8004136:	3001      	adds	r0, #1
 8004138:	d14c      	bne.n	80041d4 <_printf_i+0x200>
 800413a:	f04f 30ff 	mov.w	r0, #4294967295
 800413e:	b004      	add	sp, #16
 8004140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004144:	4834      	ldr	r0, [pc, #208]	; (8004218 <_printf_i+0x244>)
 8004146:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800414a:	680e      	ldr	r6, [r1, #0]
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004152:	061f      	lsls	r7, r3, #24
 8004154:	600e      	str	r6, [r1, #0]
 8004156:	d514      	bpl.n	8004182 <_printf_i+0x1ae>
 8004158:	07d9      	lsls	r1, r3, #31
 800415a:	bf44      	itt	mi
 800415c:	f043 0320 	orrmi.w	r3, r3, #32
 8004160:	6023      	strmi	r3, [r4, #0]
 8004162:	b91d      	cbnz	r5, 800416c <_printf_i+0x198>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	f023 0320 	bic.w	r3, r3, #32
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	2310      	movs	r3, #16
 800416e:	e7af      	b.n	80040d0 <_printf_i+0xfc>
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	f043 0320 	orr.w	r3, r3, #32
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	2378      	movs	r3, #120	; 0x78
 800417a:	4828      	ldr	r0, [pc, #160]	; (800421c <_printf_i+0x248>)
 800417c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004180:	e7e3      	b.n	800414a <_printf_i+0x176>
 8004182:	065e      	lsls	r6, r3, #25
 8004184:	bf48      	it	mi
 8004186:	b2ad      	uxthmi	r5, r5
 8004188:	e7e6      	b.n	8004158 <_printf_i+0x184>
 800418a:	4616      	mov	r6, r2
 800418c:	e7bb      	b.n	8004106 <_printf_i+0x132>
 800418e:	680b      	ldr	r3, [r1, #0]
 8004190:	6826      	ldr	r6, [r4, #0]
 8004192:	1d1d      	adds	r5, r3, #4
 8004194:	6960      	ldr	r0, [r4, #20]
 8004196:	600d      	str	r5, [r1, #0]
 8004198:	0635      	lsls	r5, r6, #24
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	d501      	bpl.n	80041a2 <_printf_i+0x1ce>
 800419e:	6018      	str	r0, [r3, #0]
 80041a0:	e002      	b.n	80041a8 <_printf_i+0x1d4>
 80041a2:	0671      	lsls	r1, r6, #25
 80041a4:	d5fb      	bpl.n	800419e <_printf_i+0x1ca>
 80041a6:	8018      	strh	r0, [r3, #0]
 80041a8:	2300      	movs	r3, #0
 80041aa:	4616      	mov	r6, r2
 80041ac:	6123      	str	r3, [r4, #16]
 80041ae:	e7ba      	b.n	8004126 <_printf_i+0x152>
 80041b0:	680b      	ldr	r3, [r1, #0]
 80041b2:	1d1a      	adds	r2, r3, #4
 80041b4:	600a      	str	r2, [r1, #0]
 80041b6:	681e      	ldr	r6, [r3, #0]
 80041b8:	2100      	movs	r1, #0
 80041ba:	4630      	mov	r0, r6
 80041bc:	6862      	ldr	r2, [r4, #4]
 80041be:	f000 f82f 	bl	8004220 <memchr>
 80041c2:	b108      	cbz	r0, 80041c8 <_printf_i+0x1f4>
 80041c4:	1b80      	subs	r0, r0, r6
 80041c6:	6060      	str	r0, [r4, #4]
 80041c8:	6863      	ldr	r3, [r4, #4]
 80041ca:	6123      	str	r3, [r4, #16]
 80041cc:	2300      	movs	r3, #0
 80041ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d2:	e7a8      	b.n	8004126 <_printf_i+0x152>
 80041d4:	4632      	mov	r2, r6
 80041d6:	4649      	mov	r1, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	47d0      	blx	sl
 80041de:	3001      	adds	r0, #1
 80041e0:	d0ab      	beq.n	800413a <_printf_i+0x166>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	079b      	lsls	r3, r3, #30
 80041e6:	d413      	bmi.n	8004210 <_printf_i+0x23c>
 80041e8:	68e0      	ldr	r0, [r4, #12]
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	4298      	cmp	r0, r3
 80041ee:	bfb8      	it	lt
 80041f0:	4618      	movlt	r0, r3
 80041f2:	e7a4      	b.n	800413e <_printf_i+0x16a>
 80041f4:	2301      	movs	r3, #1
 80041f6:	4632      	mov	r2, r6
 80041f8:	4649      	mov	r1, r9
 80041fa:	4640      	mov	r0, r8
 80041fc:	47d0      	blx	sl
 80041fe:	3001      	adds	r0, #1
 8004200:	d09b      	beq.n	800413a <_printf_i+0x166>
 8004202:	3501      	adds	r5, #1
 8004204:	68e3      	ldr	r3, [r4, #12]
 8004206:	9903      	ldr	r1, [sp, #12]
 8004208:	1a5b      	subs	r3, r3, r1
 800420a:	42ab      	cmp	r3, r5
 800420c:	dcf2      	bgt.n	80041f4 <_printf_i+0x220>
 800420e:	e7eb      	b.n	80041e8 <_printf_i+0x214>
 8004210:	2500      	movs	r5, #0
 8004212:	f104 0619 	add.w	r6, r4, #25
 8004216:	e7f5      	b.n	8004204 <_printf_i+0x230>
 8004218:	080044cd 	.word	0x080044cd
 800421c:	080044de 	.word	0x080044de

08004220 <memchr>:
 8004220:	4603      	mov	r3, r0
 8004222:	b510      	push	{r4, lr}
 8004224:	b2c9      	uxtb	r1, r1
 8004226:	4402      	add	r2, r0
 8004228:	4293      	cmp	r3, r2
 800422a:	4618      	mov	r0, r3
 800422c:	d101      	bne.n	8004232 <memchr+0x12>
 800422e:	2000      	movs	r0, #0
 8004230:	e003      	b.n	800423a <memchr+0x1a>
 8004232:	7804      	ldrb	r4, [r0, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	428c      	cmp	r4, r1
 8004238:	d1f6      	bne.n	8004228 <memchr+0x8>
 800423a:	bd10      	pop	{r4, pc}

0800423c <memcpy>:
 800423c:	440a      	add	r2, r1
 800423e:	4291      	cmp	r1, r2
 8004240:	f100 33ff 	add.w	r3, r0, #4294967295
 8004244:	d100      	bne.n	8004248 <memcpy+0xc>
 8004246:	4770      	bx	lr
 8004248:	b510      	push	{r4, lr}
 800424a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800424e:	4291      	cmp	r1, r2
 8004250:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004254:	d1f9      	bne.n	800424a <memcpy+0xe>
 8004256:	bd10      	pop	{r4, pc}

08004258 <memmove>:
 8004258:	4288      	cmp	r0, r1
 800425a:	b510      	push	{r4, lr}
 800425c:	eb01 0402 	add.w	r4, r1, r2
 8004260:	d902      	bls.n	8004268 <memmove+0x10>
 8004262:	4284      	cmp	r4, r0
 8004264:	4623      	mov	r3, r4
 8004266:	d807      	bhi.n	8004278 <memmove+0x20>
 8004268:	1e43      	subs	r3, r0, #1
 800426a:	42a1      	cmp	r1, r4
 800426c:	d008      	beq.n	8004280 <memmove+0x28>
 800426e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004276:	e7f8      	b.n	800426a <memmove+0x12>
 8004278:	4601      	mov	r1, r0
 800427a:	4402      	add	r2, r0
 800427c:	428a      	cmp	r2, r1
 800427e:	d100      	bne.n	8004282 <memmove+0x2a>
 8004280:	bd10      	pop	{r4, pc}
 8004282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800428a:	e7f7      	b.n	800427c <memmove+0x24>

0800428c <_free_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4605      	mov	r5, r0
 8004290:	2900      	cmp	r1, #0
 8004292:	d043      	beq.n	800431c <_free_r+0x90>
 8004294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004298:	1f0c      	subs	r4, r1, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	bfb8      	it	lt
 800429e:	18e4      	addlt	r4, r4, r3
 80042a0:	f000 f8d0 	bl	8004444 <__malloc_lock>
 80042a4:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <_free_r+0x94>)
 80042a6:	6813      	ldr	r3, [r2, #0]
 80042a8:	4610      	mov	r0, r2
 80042aa:	b933      	cbnz	r3, 80042ba <_free_r+0x2e>
 80042ac:	6063      	str	r3, [r4, #4]
 80042ae:	6014      	str	r4, [r2, #0]
 80042b0:	4628      	mov	r0, r5
 80042b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042b6:	f000 b8cb 	b.w	8004450 <__malloc_unlock>
 80042ba:	42a3      	cmp	r3, r4
 80042bc:	d90a      	bls.n	80042d4 <_free_r+0x48>
 80042be:	6821      	ldr	r1, [r4, #0]
 80042c0:	1862      	adds	r2, r4, r1
 80042c2:	4293      	cmp	r3, r2
 80042c4:	bf01      	itttt	eq
 80042c6:	681a      	ldreq	r2, [r3, #0]
 80042c8:	685b      	ldreq	r3, [r3, #4]
 80042ca:	1852      	addeq	r2, r2, r1
 80042cc:	6022      	streq	r2, [r4, #0]
 80042ce:	6063      	str	r3, [r4, #4]
 80042d0:	6004      	str	r4, [r0, #0]
 80042d2:	e7ed      	b.n	80042b0 <_free_r+0x24>
 80042d4:	461a      	mov	r2, r3
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	b10b      	cbz	r3, 80042de <_free_r+0x52>
 80042da:	42a3      	cmp	r3, r4
 80042dc:	d9fa      	bls.n	80042d4 <_free_r+0x48>
 80042de:	6811      	ldr	r1, [r2, #0]
 80042e0:	1850      	adds	r0, r2, r1
 80042e2:	42a0      	cmp	r0, r4
 80042e4:	d10b      	bne.n	80042fe <_free_r+0x72>
 80042e6:	6820      	ldr	r0, [r4, #0]
 80042e8:	4401      	add	r1, r0
 80042ea:	1850      	adds	r0, r2, r1
 80042ec:	4283      	cmp	r3, r0
 80042ee:	6011      	str	r1, [r2, #0]
 80042f0:	d1de      	bne.n	80042b0 <_free_r+0x24>
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4401      	add	r1, r0
 80042f8:	6011      	str	r1, [r2, #0]
 80042fa:	6053      	str	r3, [r2, #4]
 80042fc:	e7d8      	b.n	80042b0 <_free_r+0x24>
 80042fe:	d902      	bls.n	8004306 <_free_r+0x7a>
 8004300:	230c      	movs	r3, #12
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	e7d4      	b.n	80042b0 <_free_r+0x24>
 8004306:	6820      	ldr	r0, [r4, #0]
 8004308:	1821      	adds	r1, r4, r0
 800430a:	428b      	cmp	r3, r1
 800430c:	bf01      	itttt	eq
 800430e:	6819      	ldreq	r1, [r3, #0]
 8004310:	685b      	ldreq	r3, [r3, #4]
 8004312:	1809      	addeq	r1, r1, r0
 8004314:	6021      	streq	r1, [r4, #0]
 8004316:	6063      	str	r3, [r4, #4]
 8004318:	6054      	str	r4, [r2, #4]
 800431a:	e7c9      	b.n	80042b0 <_free_r+0x24>
 800431c:	bd38      	pop	{r3, r4, r5, pc}
 800431e:	bf00      	nop
 8004320:	2000010c 	.word	0x2000010c

08004324 <_malloc_r>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	1ccd      	adds	r5, r1, #3
 8004328:	f025 0503 	bic.w	r5, r5, #3
 800432c:	3508      	adds	r5, #8
 800432e:	2d0c      	cmp	r5, #12
 8004330:	bf38      	it	cc
 8004332:	250c      	movcc	r5, #12
 8004334:	2d00      	cmp	r5, #0
 8004336:	4606      	mov	r6, r0
 8004338:	db01      	blt.n	800433e <_malloc_r+0x1a>
 800433a:	42a9      	cmp	r1, r5
 800433c:	d903      	bls.n	8004346 <_malloc_r+0x22>
 800433e:	230c      	movs	r3, #12
 8004340:	6033      	str	r3, [r6, #0]
 8004342:	2000      	movs	r0, #0
 8004344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004346:	f000 f87d 	bl	8004444 <__malloc_lock>
 800434a:	4921      	ldr	r1, [pc, #132]	; (80043d0 <_malloc_r+0xac>)
 800434c:	680a      	ldr	r2, [r1, #0]
 800434e:	4614      	mov	r4, r2
 8004350:	b99c      	cbnz	r4, 800437a <_malloc_r+0x56>
 8004352:	4f20      	ldr	r7, [pc, #128]	; (80043d4 <_malloc_r+0xb0>)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	b923      	cbnz	r3, 8004362 <_malloc_r+0x3e>
 8004358:	4621      	mov	r1, r4
 800435a:	4630      	mov	r0, r6
 800435c:	f000 f862 	bl	8004424 <_sbrk_r>
 8004360:	6038      	str	r0, [r7, #0]
 8004362:	4629      	mov	r1, r5
 8004364:	4630      	mov	r0, r6
 8004366:	f000 f85d 	bl	8004424 <_sbrk_r>
 800436a:	1c43      	adds	r3, r0, #1
 800436c:	d123      	bne.n	80043b6 <_malloc_r+0x92>
 800436e:	230c      	movs	r3, #12
 8004370:	4630      	mov	r0, r6
 8004372:	6033      	str	r3, [r6, #0]
 8004374:	f000 f86c 	bl	8004450 <__malloc_unlock>
 8004378:	e7e3      	b.n	8004342 <_malloc_r+0x1e>
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	1b5b      	subs	r3, r3, r5
 800437e:	d417      	bmi.n	80043b0 <_malloc_r+0x8c>
 8004380:	2b0b      	cmp	r3, #11
 8004382:	d903      	bls.n	800438c <_malloc_r+0x68>
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	441c      	add	r4, r3
 8004388:	6025      	str	r5, [r4, #0]
 800438a:	e004      	b.n	8004396 <_malloc_r+0x72>
 800438c:	6863      	ldr	r3, [r4, #4]
 800438e:	42a2      	cmp	r2, r4
 8004390:	bf0c      	ite	eq
 8004392:	600b      	streq	r3, [r1, #0]
 8004394:	6053      	strne	r3, [r2, #4]
 8004396:	4630      	mov	r0, r6
 8004398:	f000 f85a 	bl	8004450 <__malloc_unlock>
 800439c:	f104 000b 	add.w	r0, r4, #11
 80043a0:	1d23      	adds	r3, r4, #4
 80043a2:	f020 0007 	bic.w	r0, r0, #7
 80043a6:	1ac2      	subs	r2, r0, r3
 80043a8:	d0cc      	beq.n	8004344 <_malloc_r+0x20>
 80043aa:	1a1b      	subs	r3, r3, r0
 80043ac:	50a3      	str	r3, [r4, r2]
 80043ae:	e7c9      	b.n	8004344 <_malloc_r+0x20>
 80043b0:	4622      	mov	r2, r4
 80043b2:	6864      	ldr	r4, [r4, #4]
 80043b4:	e7cc      	b.n	8004350 <_malloc_r+0x2c>
 80043b6:	1cc4      	adds	r4, r0, #3
 80043b8:	f024 0403 	bic.w	r4, r4, #3
 80043bc:	42a0      	cmp	r0, r4
 80043be:	d0e3      	beq.n	8004388 <_malloc_r+0x64>
 80043c0:	1a21      	subs	r1, r4, r0
 80043c2:	4630      	mov	r0, r6
 80043c4:	f000 f82e 	bl	8004424 <_sbrk_r>
 80043c8:	3001      	adds	r0, #1
 80043ca:	d1dd      	bne.n	8004388 <_malloc_r+0x64>
 80043cc:	e7cf      	b.n	800436e <_malloc_r+0x4a>
 80043ce:	bf00      	nop
 80043d0:	2000010c 	.word	0x2000010c
 80043d4:	20000110 	.word	0x20000110

080043d8 <_realloc_r>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	4607      	mov	r7, r0
 80043dc:	4614      	mov	r4, r2
 80043de:	460e      	mov	r6, r1
 80043e0:	b921      	cbnz	r1, 80043ec <_realloc_r+0x14>
 80043e2:	4611      	mov	r1, r2
 80043e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043e8:	f7ff bf9c 	b.w	8004324 <_malloc_r>
 80043ec:	b922      	cbnz	r2, 80043f8 <_realloc_r+0x20>
 80043ee:	f7ff ff4d 	bl	800428c <_free_r>
 80043f2:	4625      	mov	r5, r4
 80043f4:	4628      	mov	r0, r5
 80043f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043f8:	f000 f830 	bl	800445c <_malloc_usable_size_r>
 80043fc:	42a0      	cmp	r0, r4
 80043fe:	d20f      	bcs.n	8004420 <_realloc_r+0x48>
 8004400:	4621      	mov	r1, r4
 8004402:	4638      	mov	r0, r7
 8004404:	f7ff ff8e 	bl	8004324 <_malloc_r>
 8004408:	4605      	mov	r5, r0
 800440a:	2800      	cmp	r0, #0
 800440c:	d0f2      	beq.n	80043f4 <_realloc_r+0x1c>
 800440e:	4631      	mov	r1, r6
 8004410:	4622      	mov	r2, r4
 8004412:	f7ff ff13 	bl	800423c <memcpy>
 8004416:	4631      	mov	r1, r6
 8004418:	4638      	mov	r0, r7
 800441a:	f7ff ff37 	bl	800428c <_free_r>
 800441e:	e7e9      	b.n	80043f4 <_realloc_r+0x1c>
 8004420:	4635      	mov	r5, r6
 8004422:	e7e7      	b.n	80043f4 <_realloc_r+0x1c>

08004424 <_sbrk_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	2300      	movs	r3, #0
 8004428:	4d05      	ldr	r5, [pc, #20]	; (8004440 <_sbrk_r+0x1c>)
 800442a:	4604      	mov	r4, r0
 800442c:	4608      	mov	r0, r1
 800442e:	602b      	str	r3, [r5, #0]
 8004430:	f7fd fa18 	bl	8001864 <_sbrk>
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	d102      	bne.n	800443e <_sbrk_r+0x1a>
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	b103      	cbz	r3, 800443e <_sbrk_r+0x1a>
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	bd38      	pop	{r3, r4, r5, pc}
 8004440:	20000208 	.word	0x20000208

08004444 <__malloc_lock>:
 8004444:	4801      	ldr	r0, [pc, #4]	; (800444c <__malloc_lock+0x8>)
 8004446:	f000 b811 	b.w	800446c <__retarget_lock_acquire_recursive>
 800444a:	bf00      	nop
 800444c:	20000210 	.word	0x20000210

08004450 <__malloc_unlock>:
 8004450:	4801      	ldr	r0, [pc, #4]	; (8004458 <__malloc_unlock+0x8>)
 8004452:	f000 b80c 	b.w	800446e <__retarget_lock_release_recursive>
 8004456:	bf00      	nop
 8004458:	20000210 	.word	0x20000210

0800445c <_malloc_usable_size_r>:
 800445c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004460:	1f18      	subs	r0, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	bfbc      	itt	lt
 8004466:	580b      	ldrlt	r3, [r1, r0]
 8004468:	18c0      	addlt	r0, r0, r3
 800446a:	4770      	bx	lr

0800446c <__retarget_lock_acquire_recursive>:
 800446c:	4770      	bx	lr

0800446e <__retarget_lock_release_recursive>:
 800446e:	4770      	bx	lr

08004470 <_init>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	bf00      	nop
 8004474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004476:	bc08      	pop	{r3}
 8004478:	469e      	mov	lr, r3
 800447a:	4770      	bx	lr

0800447c <_fini>:
 800447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447e:	bf00      	nop
 8004480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004482:	bc08      	pop	{r3}
 8004484:	469e      	mov	lr, r3
 8004486:	4770      	bx	lr
