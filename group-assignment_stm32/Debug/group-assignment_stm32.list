
group-assignment_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080055ec  080055ec  000155ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005654  08005654  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08005654  08005654  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005654  08005654  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800565c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000094  080056f0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080056f0  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011600  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002731  00000000  00000000  000316bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00033df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00034b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189bd  00000000  00000000  000357f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f38b  00000000  00000000  0004e1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b183  00000000  00000000  0005d538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e86bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b98  00000000  00000000  000e8710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000094 	.word	0x20000094
 800012c:	00000000 	.word	0x00000000
 8000130:	080055d4 	.word	0x080055d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000098 	.word	0x20000098
 800014c:	080055d4 	.word	0x080055d4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <initSomeVariables>:
int button_flag[NO_OF_BUTTONS];

int TimeOutForKeyPress[NO_OF_BUTTONS];
//init all KeyReg

void initSomeVariables() { //call this function in main.c
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
	for (int i=0; i<NO_OF_BUTTONS; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	e021      	b.n	800098c <initSomeVariables+0x50>
		button_flag[i] = 0; //flags
 8000948:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <initSomeVariables+0x64>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2100      	movs	r1, #0
 800094e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg0[i] = NORMAL_STATE;
 8000952:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <initSomeVariables+0x68>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2101      	movs	r1, #1
 8000958:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg1[i] = NORMAL_STATE;
 800095c:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <initSomeVariables+0x6c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2101      	movs	r1, #1
 8000962:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg2[i] = NORMAL_STATE;
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <initSomeVariables+0x70>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2101      	movs	r1, #1
 800096c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg3[i] = NORMAL_STATE;
 8000970:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <initSomeVariables+0x74>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2101      	movs	r1, #1
 8000976:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TimeOutForKeyPress[i] = 300; //Auto change the buttons's state
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <initSomeVariables+0x78>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000982:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<NO_OF_BUTTONS; i++) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3301      	adds	r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b03      	cmp	r3, #3
 8000990:	ddda      	ble.n	8000948 <initSomeVariables+0xc>
	}
}
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000170 	.word	0x20000170
 80009a4:	20000140 	.word	0x20000140
 80009a8:	20000150 	.word	0x20000150
 80009ac:	20000180 	.word	0x20000180
 80009b0:	20000130 	.word	0x20000130
 80009b4:	20000160 	.word	0x20000160

080009b8 <getKeyInput>:

void getKeyInput() {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
	for (int i=0; i<NO_OF_BUTTONS; i++) {
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	e0d4      	b.n	8000b6e <getKeyInput+0x1b6>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d876      	bhi.n	8000ab8 <getKeyInput+0x100>
 80009ca:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <getKeyInput+0x18>)
 80009cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d0:	080009e1 	.word	0x080009e1
 80009d4:	08000a17 	.word	0x08000a17
 80009d8:	08000a4d 	.word	0x08000a4d
 80009dc:	08000a83 	.word	0x08000a83
		switch(i) {
			case 0:
				KeyReg2[i] = KeyReg1[i];
 80009e0:	4a67      	ldr	r2, [pc, #412]	; (8000b80 <getKeyInput+0x1c8>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009e8:	4966      	ldr	r1, [pc, #408]	; (8000b84 <getKeyInput+0x1cc>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg1[i] = KeyReg0[i];
 80009f0:	4a65      	ldr	r2, [pc, #404]	; (8000b88 <getKeyInput+0x1d0>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009f8:	4961      	ldr	r1, [pc, #388]	; (8000b80 <getKeyInput+0x1c8>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg0[i] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 8000a00:	2102      	movs	r1, #2
 8000a02:	4862      	ldr	r0, [pc, #392]	; (8000b8c <getKeyInput+0x1d4>)
 8000a04:	f002 f882 	bl	8002b0c <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4a5e      	ldr	r2, [pc, #376]	; (8000b88 <getKeyInput+0x1d0>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000a14:	e051      	b.n	8000aba <getKeyInput+0x102>
			case 1:
				KeyReg2[i] = KeyReg1[i];
 8000a16:	4a5a      	ldr	r2, [pc, #360]	; (8000b80 <getKeyInput+0x1c8>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a1e:	4959      	ldr	r1, [pc, #356]	; (8000b84 <getKeyInput+0x1cc>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg1[i] = KeyReg0[i];
 8000a26:	4a58      	ldr	r2, [pc, #352]	; (8000b88 <getKeyInput+0x1d0>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a2e:	4954      	ldr	r1, [pc, #336]	; (8000b80 <getKeyInput+0x1c8>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg0[i] = HAL_GPIO_ReadPin(A2_GPIO_Port,A2_Pin);
 8000a36:	2110      	movs	r1, #16
 8000a38:	4854      	ldr	r0, [pc, #336]	; (8000b8c <getKeyInput+0x1d4>)
 8000a3a:	f002 f867 	bl	8002b0c <HAL_GPIO_ReadPin>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4a51      	ldr	r2, [pc, #324]	; (8000b88 <getKeyInput+0x1d0>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000a4a:	e036      	b.n	8000aba <getKeyInput+0x102>
			case 2:
				KeyReg2[i] = KeyReg1[i];
 8000a4c:	4a4c      	ldr	r2, [pc, #304]	; (8000b80 <getKeyInput+0x1c8>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a54:	494b      	ldr	r1, [pc, #300]	; (8000b84 <getKeyInput+0x1cc>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg1[i] = KeyReg0[i];
 8000a5c:	4a4a      	ldr	r2, [pc, #296]	; (8000b88 <getKeyInput+0x1d0>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a64:	4946      	ldr	r1, [pc, #280]	; (8000b80 <getKeyInput+0x1c8>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg0[i] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4848      	ldr	r0, [pc, #288]	; (8000b90 <getKeyInput+0x1d8>)
 8000a70:	f002 f84c 	bl	8002b0c <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4619      	mov	r1, r3
 8000a78:	4a43      	ldr	r2, [pc, #268]	; (8000b88 <getKeyInput+0x1d0>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000a80:	e01b      	b.n	8000aba <getKeyInput+0x102>
			case 3:
				KeyReg2[i] = KeyReg1[i];
 8000a82:	4a3f      	ldr	r2, [pc, #252]	; (8000b80 <getKeyInput+0x1c8>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a8a:	493e      	ldr	r1, [pc, #248]	; (8000b84 <getKeyInput+0x1cc>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg1[i] = KeyReg0[i];
 8000a92:	4a3d      	ldr	r2, [pc, #244]	; (8000b88 <getKeyInput+0x1d0>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a9a:	4939      	ldr	r1, [pc, #228]	; (8000b80 <getKeyInput+0x1c8>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg0[i] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4839      	ldr	r0, [pc, #228]	; (8000b8c <getKeyInput+0x1d4>)
 8000aa6:	f002 f831 	bl	8002b0c <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4619      	mov	r1, r3
 8000aae:	4a36      	ldr	r2, [pc, #216]	; (8000b88 <getKeyInput+0x1d0>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000ab6:	e000      	b.n	8000aba <getKeyInput+0x102>
			default:
				//todo
				break;
 8000ab8:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000aba:	4a31      	ldr	r2, [pc, #196]	; (8000b80 <getKeyInput+0x1c8>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ac2:	4931      	ldr	r1, [pc, #196]	; (8000b88 <getKeyInput+0x1d0>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d14c      	bne.n	8000b68 <getKeyInput+0x1b0>
 8000ace:	4a2c      	ldr	r2, [pc, #176]	; (8000b80 <getKeyInput+0x1c8>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ad6:	492b      	ldr	r1, [pc, #172]	; (8000b84 <getKeyInput+0x1cc>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d142      	bne.n	8000b68 <getKeyInput+0x1b0>
			if (KeyReg2[i] != KeyReg3[i]){
 8000ae2:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <getKeyInput+0x1cc>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aea:	492a      	ldr	r1, [pc, #168]	; (8000b94 <getKeyInput+0x1dc>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d019      	beq.n	8000b2a <getKeyInput+0x172>
			  KeyReg3[i] = KeyReg2[i];
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <getKeyInput+0x1cc>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000afe:	4925      	ldr	r1, [pc, #148]	; (8000b94 <getKeyInput+0x1dc>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg3[i] == PRESSED_STATE){
 8000b06:	4a23      	ldr	r2, [pc, #140]	; (8000b94 <getKeyInput+0x1dc>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d12a      	bne.n	8000b68 <getKeyInput+0x1b0>
				TimeOutForKeyPress[i] = 300;
 8000b12:	4a21      	ldr	r2, [pc, #132]	; (8000b98 <getKeyInput+0x1e0>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000b1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				button_flag[i] = 1;
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	; (8000b9c <getKeyInput+0x1e4>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2101      	movs	r1, #1
 8000b24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b28:	e01e      	b.n	8000b68 <getKeyInput+0x1b0>
			  }
			} else{
				TimeOutForKeyPress[i]--;
 8000b2a:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <getKeyInput+0x1e0>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	1e5a      	subs	r2, r3, #1
 8000b34:	4918      	ldr	r1, [pc, #96]	; (8000b98 <getKeyInput+0x1e0>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000b3c:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <getKeyInput+0x1e0>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10f      	bne.n	8000b68 <getKeyInput+0x1b0>
					if (KeyReg3[i] == PRESSED_STATE){
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <getKeyInput+0x1dc>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d109      	bne.n	8000b68 <getKeyInput+0x1b0>
						TimeOutForKeyPress[i] = 100;
 8000b54:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <getKeyInput+0x1e0>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2164      	movs	r1, #100	; 0x64
 8000b5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						button_flag[i] = 1;
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <getKeyInput+0x1e4>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2101      	movs	r1, #1
 8000b64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<NO_OF_BUTTONS; i++) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	f77f af27 	ble.w	80009c4 <getKeyInput+0xc>
				}
			}
		}

	}
}
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000150 	.word	0x20000150
 8000b84:	20000180 	.word	0x20000180
 8000b88:	20000140 	.word	0x20000140
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	40010c00 	.word	0x40010c00
 8000b94:	20000130 	.word	0x20000130
 8000b98:	20000160 	.word	0x20000160
 8000b9c:	20000170 	.word	0x20000170

08000ba0 <isButtonPressed>:

int isButtonPressed(int index) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000ba8:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <isButtonPressed+0x30>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d106      	bne.n	8000bc2 <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <isButtonPressed+0x30>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <isButtonPressed+0x24>
	}
	return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000170 	.word	0x20000170

08000bd4 <getTimeAtIndex0>:
 */
#include "fsm_automatic.h"
#include "global.h"


int getTimeAtIndex0(int time) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	int temp = time/10;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <getTimeAtIndex0+0x24>)
 8000be0:	fb82 1203 	smull	r1, r2, r2, r3
 8000be4:	1092      	asrs	r2, r2, #2
 8000be6:	17db      	asrs	r3, r3, #31
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	60fb      	str	r3, [r7, #12]
	return temp;
 8000bec:	68fb      	ldr	r3, [r7, #12]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	66666667 	.word	0x66666667

08000bfc <getTimeAtIndex1>:
int getTimeAtIndex1(int time) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	return time%10;
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <getTimeAtIndex1+0x2c>)
 8000c08:	fb83 1302 	smull	r1, r3, r3, r2
 8000c0c:	1099      	asrs	r1, r3, #2
 8000c0e:	17d3      	asrs	r3, r2, #31
 8000c10:	1ac9      	subs	r1, r1, r3
 8000c12:	460b      	mov	r3, r1
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	1ad1      	subs	r1, r2, r3
 8000c1c:	460b      	mov	r3, r1
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	66666667 	.word	0x66666667

08000c2c <fsm_automatic_run1>:

int led7SegState = 1; //used for printing a particular case in virtual terminal
int led7SegState2 = 1;//used for printing a particular case in virtual terminal
int checkflag = 0;
void fsm_automatic_run1() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
	char buffer[10];
	switch(LANE1_STATUS) { //for lane 1
 8000c32:	4bb8      	ldr	r3, [pc, #736]	; (8000f14 <fsm_automatic_run1+0x2e8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	f200 81ad 	bhi.w	8000f98 <fsm_automatic_run1+0x36c>
 8000c3e:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <fsm_automatic_run1+0x18>)
 8000c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c44:	08000c55 	.word	0x08000c55
 8000c48:	08000c7f 	.word	0x08000c7f
 8000c4c:	08000d7b 	.word	0x08000d7b
 8000c50:	08000e77 	.word	0x08000e77
		case LANE1_INIT:
			initTrafficLight1();
 8000c54:	f000 fe22 	bl	800189c <initTrafficLight1>
			LANE1_STATUS = LANE1_RED;
 8000c58:	4bae      	ldr	r3, [pc, #696]	; (8000f14 <fsm_automatic_run1+0x2e8>)
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	601a      	str	r2, [r3, #0]
			setTimer1(led_duration[0]*1000);
 8000c5e:	4bae      	ldr	r3, [pc, #696]	; (8000f18 <fsm_automatic_run1+0x2ec>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 f89a 	bl	8001da4 <setTimer1>

			timer4_flag = 1;
 8000c70:	4baa      	ldr	r3, [pc, #680]	; (8000f1c <fsm_automatic_run1+0x2f0>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
			led7SegState = 1;
 8000c76:	4baa      	ldr	r3, [pc, #680]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
			break;
 8000c7c:	e193      	b.n	8000fa6 <fsm_automatic_run1+0x37a>
		case LANE1_RED:
			setTrafficRed1();
 8000c7e:	f000 fe55 	bl	800192c <setTrafficRed1>

			if (timer4_flag == 1) {
 8000c82:	4ba6      	ldr	r3, [pc, #664]	; (8000f1c <fsm_automatic_run1+0x2f0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d15c      	bne.n	8000d44 <fsm_automatic_run1+0x118>
				switch(led7SegState) {
 8000c8a:	4ba5      	ldr	r3, [pc, #660]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	f200 8181 	bhi.w	8000f98 <fsm_automatic_run1+0x36c>
 8000c96:	a201      	add	r2, pc, #4	; (adr r2, 8000c9c <fsm_automatic_run1+0x70>)
 8000c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9c:	08000cad 	.word	0x08000cad
 8000ca0:	08000ce5 	.word	0x08000ce5
 8000ca4:	08000d1d 	.word	0x08000d1d
 8000ca8:	08000d2b 	.word	0x08000d2b
				case 1:
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex0(led_duration[0]-countDownRed1));
 8000cac:	4b9a      	ldr	r3, [pc, #616]	; (8000f18 <fsm_automatic_run1+0x2ec>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b9c      	ldr	r3, [pc, #624]	; (8000f24 <fsm_automatic_run1+0x2f8>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff8c 	bl	8000bd4 <getTimeAtIndex0>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4999      	ldr	r1, [pc, #612]	; (8000f28 <fsm_automatic_run1+0x2fc>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f004 f84c 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8000cc8:	1d39      	adds	r1, r7, #4
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	220a      	movs	r2, #10
 8000cd0:	4896      	ldr	r0, [pc, #600]	; (8000f2c <fsm_automatic_run1+0x300>)
 8000cd2:	f003 fb28 	bl	8004326 <HAL_UART_Transmit>
					setTimer4(250);
 8000cd6:	20fa      	movs	r0, #250	; 0xfa
 8000cd8:	f001 f8b8 	bl	8001e4c <setTimer4>
					led7SegState = 2;
 8000cdc:	4b90      	ldr	r3, [pc, #576]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	601a      	str	r2, [r3, #0]
					break;
 8000ce2:	e02e      	b.n	8000d42 <fsm_automatic_run1+0x116>
				case 2:
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex1(led_duration[0]-countDownRed1));
 8000ce4:	4b8c      	ldr	r3, [pc, #560]	; (8000f18 <fsm_automatic_run1+0x2ec>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b8e      	ldr	r3, [pc, #568]	; (8000f24 <fsm_automatic_run1+0x2f8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff84 	bl	8000bfc <getTimeAtIndex1>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	498b      	ldr	r1, [pc, #556]	; (8000f28 <fsm_automatic_run1+0x2fc>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 f830 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8000d00:	1d39      	adds	r1, r7, #4
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	220a      	movs	r2, #10
 8000d08:	4888      	ldr	r0, [pc, #544]	; (8000f2c <fsm_automatic_run1+0x300>)
 8000d0a:	f003 fb0c 	bl	8004326 <HAL_UART_Transmit>
					setTimer4(250);
 8000d0e:	20fa      	movs	r0, #250	; 0xfa
 8000d10:	f001 f89c 	bl	8001e4c <setTimer4>
					led7SegState = 3;
 8000d14:	4b82      	ldr	r3, [pc, #520]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000d16:	2203      	movs	r2, #3
 8000d18:	601a      	str	r2, [r3, #0]
					break;
 8000d1a:	e012      	b.n	8000d42 <fsm_automatic_run1+0x116>
				case 3:
					setTimer4(250);
 8000d1c:	20fa      	movs	r0, #250	; 0xfa
 8000d1e:	f001 f895 	bl	8001e4c <setTimer4>
					led7SegState = 4;
 8000d22:	4b7f      	ldr	r3, [pc, #508]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000d24:	2204      	movs	r2, #4
 8000d26:	601a      	str	r2, [r3, #0]
					break;
 8000d28:	e00b      	b.n	8000d42 <fsm_automatic_run1+0x116>
				case 4:
					countDownRed1++;
 8000d2a:	4b7e      	ldr	r3, [pc, #504]	; (8000f24 <fsm_automatic_run1+0x2f8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	4a7c      	ldr	r2, [pc, #496]	; (8000f24 <fsm_automatic_run1+0x2f8>)
 8000d32:	6013      	str	r3, [r2, #0]
					setTimer4(250);
 8000d34:	20fa      	movs	r0, #250	; 0xfa
 8000d36:	f001 f889 	bl	8001e4c <setTimer4>
					led7SegState = 1;
 8000d3a:	4b79      	ldr	r3, [pc, #484]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
					break;
 8000d40:	bf00      	nop
				}
				default:
					break;
 8000d42:	e129      	b.n	8000f98 <fsm_automatic_run1+0x36c>
			}

			if(timer1_flag == 1) {
 8000d44:	4b7a      	ldr	r3, [pc, #488]	; (8000f30 <fsm_automatic_run1+0x304>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	f040 8127 	bne.w	8000f9c <fsm_automatic_run1+0x370>
				setTimer1(led_duration[2]*1000);
 8000d4e:	4b72      	ldr	r3, [pc, #456]	; (8000f18 <fsm_automatic_run1+0x2ec>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d56:	fb02 f303 	mul.w	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 f822 	bl	8001da4 <setTimer1>
				LANE1_STATUS = LANE1_GREEN;
 8000d60:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <fsm_automatic_run1+0x2e8>)
 8000d62:	2203      	movs	r2, #3
 8000d64:	601a      	str	r2, [r3, #0]

				countDownRed1 = 0; //reset
 8000d66:	4b6f      	ldr	r3, [pc, #444]	; (8000f24 <fsm_automatic_run1+0x2f8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
				timer4_flag = 1;
 8000d6c:	4b6b      	ldr	r3, [pc, #428]	; (8000f1c <fsm_automatic_run1+0x2f0>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
				led7SegState = 1;
 8000d72:	4b6b      	ldr	r3, [pc, #428]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

			}
			break;
 8000d78:	e110      	b.n	8000f9c <fsm_automatic_run1+0x370>
		case LANE1_GREEN:
			setTrafficGreen1();
 8000d7a:	f000 fdb3 	bl	80018e4 <setTrafficGreen1>

			if (timer4_flag == 1) {
 8000d7e:	4b67      	ldr	r3, [pc, #412]	; (8000f1c <fsm_automatic_run1+0x2f0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d15b      	bne.n	8000e3e <fsm_automatic_run1+0x212>
				switch(led7SegState) {
 8000d86:	4b66      	ldr	r3, [pc, #408]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d857      	bhi.n	8000e40 <fsm_automatic_run1+0x214>
 8000d90:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <fsm_automatic_run1+0x16c>)
 8000d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d96:	bf00      	nop
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000de1 	.word	0x08000de1
 8000da0:	08000e19 	.word	0x08000e19
 8000da4:	08000e27 	.word	0x08000e27
				case 1:
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex0(led_duration[2]-countDownGreen1));
 8000da8:	4b5b      	ldr	r3, [pc, #364]	; (8000f18 <fsm_automatic_run1+0x2ec>)
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	4b61      	ldr	r3, [pc, #388]	; (8000f34 <fsm_automatic_run1+0x308>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff0e 	bl	8000bd4 <getTimeAtIndex0>
 8000db8:	4602      	mov	r2, r0
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	495a      	ldr	r1, [pc, #360]	; (8000f28 <fsm_automatic_run1+0x2fc>)
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 ffce 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8000dc4:	1d39      	adds	r1, r7, #4
 8000dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dca:	220a      	movs	r2, #10
 8000dcc:	4857      	ldr	r0, [pc, #348]	; (8000f2c <fsm_automatic_run1+0x300>)
 8000dce:	f003 faaa 	bl	8004326 <HAL_UART_Transmit>
					setTimer4(250);
 8000dd2:	20fa      	movs	r0, #250	; 0xfa
 8000dd4:	f001 f83a 	bl	8001e4c <setTimer4>
					led7SegState = 2;
 8000dd8:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	601a      	str	r2, [r3, #0]
					break;
 8000dde:	e02f      	b.n	8000e40 <fsm_automatic_run1+0x214>
				case 2:
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex1(led_duration[2]-countDownGreen1));
 8000de0:	4b4d      	ldr	r3, [pc, #308]	; (8000f18 <fsm_automatic_run1+0x2ec>)
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	4b53      	ldr	r3, [pc, #332]	; (8000f34 <fsm_automatic_run1+0x308>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff06 	bl	8000bfc <getTimeAtIndex1>
 8000df0:	4602      	mov	r2, r0
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	494c      	ldr	r1, [pc, #304]	; (8000f28 <fsm_automatic_run1+0x2fc>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 ffb2 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8000dfc:	1d39      	adds	r1, r7, #4
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	220a      	movs	r2, #10
 8000e04:	4849      	ldr	r0, [pc, #292]	; (8000f2c <fsm_automatic_run1+0x300>)
 8000e06:	f003 fa8e 	bl	8004326 <HAL_UART_Transmit>
					setTimer4(250);
 8000e0a:	20fa      	movs	r0, #250	; 0xfa
 8000e0c:	f001 f81e 	bl	8001e4c <setTimer4>
					led7SegState = 3;
 8000e10:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000e12:	2203      	movs	r2, #3
 8000e14:	601a      	str	r2, [r3, #0]
					break;
 8000e16:	e013      	b.n	8000e40 <fsm_automatic_run1+0x214>
				case 3:
					setTimer4(250);
 8000e18:	20fa      	movs	r0, #250	; 0xfa
 8000e1a:	f001 f817 	bl	8001e4c <setTimer4>
					led7SegState = 4;
 8000e1e:	4b40      	ldr	r3, [pc, #256]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	601a      	str	r2, [r3, #0]
					break;
 8000e24:	e00c      	b.n	8000e40 <fsm_automatic_run1+0x214>
				case 4:
					countDownGreen1++;
 8000e26:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <fsm_automatic_run1+0x308>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a41      	ldr	r2, [pc, #260]	; (8000f34 <fsm_automatic_run1+0x308>)
 8000e2e:	6013      	str	r3, [r2, #0]
					setTimer4(250);
 8000e30:	20fa      	movs	r0, #250	; 0xfa
 8000e32:	f001 f80b 	bl	8001e4c <setTimer4>
					led7SegState = 1;
 8000e36:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
					break;
 8000e3c:	e000      	b.n	8000e40 <fsm_automatic_run1+0x214>
				}
			}
 8000e3e:	bf00      	nop

			if(timer1_flag == 1) {
 8000e40:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <fsm_automatic_run1+0x304>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	f040 80ab 	bne.w	8000fa0 <fsm_automatic_run1+0x374>
				setTimer1(led_duration[1]*1000);
 8000e4a:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <fsm_automatic_run1+0x2ec>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 ffa4 	bl	8001da4 <setTimer1>
				LANE1_STATUS = LANE1_YELLOW;
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <fsm_automatic_run1+0x2e8>)
 8000e5e:	2204      	movs	r2, #4
 8000e60:	601a      	str	r2, [r3, #0]

				countDownGreen1 = 0; //reset
 8000e62:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <fsm_automatic_run1+0x308>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
				timer4_flag = 1;
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <fsm_automatic_run1+0x2f0>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
				led7SegState = 1;//
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]

			}
			break;
 8000e74:	e094      	b.n	8000fa0 <fsm_automatic_run1+0x374>
		case LANE1_YELLOW:
			setTrafficYellow1();
 8000e76:	f000 fd7d 	bl	8001974 <setTrafficYellow1>

			if (timer4_flag == 1) {
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <fsm_automatic_run1+0x2f0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d16f      	bne.n	8000f62 <fsm_automatic_run1+0x336>
				switch(led7SegState) {
 8000e82:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d86b      	bhi.n	8000f64 <fsm_automatic_run1+0x338>
 8000e8c:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <fsm_automatic_run1+0x268>)
 8000e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e92:	bf00      	nop
 8000e94:	08000ea5 	.word	0x08000ea5
 8000e98:	08000edd 	.word	0x08000edd
 8000e9c:	08000f3d 	.word	0x08000f3d
 8000ea0:	08000f4b 	.word	0x08000f4b
				case 1:
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex0(led_duration[1]-countDownYellow1));
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <fsm_automatic_run1+0x2ec>)
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <fsm_automatic_run1+0x30c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe90 	bl	8000bd4 <getTimeAtIndex0>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	491b      	ldr	r1, [pc, #108]	; (8000f28 <fsm_automatic_run1+0x2fc>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 ff50 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8000ec0:	1d39      	adds	r1, r7, #4
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	220a      	movs	r2, #10
 8000ec8:	4818      	ldr	r0, [pc, #96]	; (8000f2c <fsm_automatic_run1+0x300>)
 8000eca:	f003 fa2c 	bl	8004326 <HAL_UART_Transmit>
					setTimer4(250);
 8000ece:	20fa      	movs	r0, #250	; 0xfa
 8000ed0:	f000 ffbc 	bl	8001e4c <setTimer4>
					led7SegState = 2;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	601a      	str	r2, [r3, #0]
					break;
 8000eda:	e043      	b.n	8000f64 <fsm_automatic_run1+0x338>
				case 2:
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex1(led_duration[1]-countDownYellow1));
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <fsm_automatic_run1+0x2ec>)
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <fsm_automatic_run1+0x30c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fe88 	bl	8000bfc <getTimeAtIndex1>
 8000eec:	4602      	mov	r2, r0
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	490d      	ldr	r1, [pc, #52]	; (8000f28 <fsm_automatic_run1+0x2fc>)
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 ff34 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8000ef8:	1d39      	adds	r1, r7, #4
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	220a      	movs	r2, #10
 8000f00:	480a      	ldr	r0, [pc, #40]	; (8000f2c <fsm_automatic_run1+0x300>)
 8000f02:	f003 fa10 	bl	8004326 <HAL_UART_Transmit>
					setTimer4(250);
 8000f06:	20fa      	movs	r0, #250	; 0xfa
 8000f08:	f000 ffa0 	bl	8001e4c <setTimer4>
					led7SegState = 3;
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <fsm_automatic_run1+0x2f4>)
 8000f0e:	2203      	movs	r2, #3
 8000f10:	601a      	str	r2, [r3, #0]
					break;
 8000f12:	e027      	b.n	8000f64 <fsm_automatic_run1+0x338>
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000018 	.word	0x20000018
 8000f1c:	200000fc 	.word	0x200000fc
 8000f20:	20000000 	.word	0x20000000
 8000f24:	200000b4 	.word	0x200000b4
 8000f28:	080055ec 	.word	0x080055ec
 8000f2c:	20000220 	.word	0x20000220
 8000f30:	200000e4 	.word	0x200000e4
 8000f34:	200000bc 	.word	0x200000bc
 8000f38:	200000b8 	.word	0x200000b8
				case 3:
					setTimer4(250);
 8000f3c:	20fa      	movs	r0, #250	; 0xfa
 8000f3e:	f000 ff85 	bl	8001e4c <setTimer4>
					led7SegState = 4;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <fsm_automatic_run1+0x384>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	601a      	str	r2, [r3, #0]
					break;
 8000f48:	e00c      	b.n	8000f64 <fsm_automatic_run1+0x338>
				case 4:
					countDownYellow1++;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <fsm_automatic_run1+0x388>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <fsm_automatic_run1+0x388>)
 8000f52:	6013      	str	r3, [r2, #0]
					setTimer4(250);
 8000f54:	20fa      	movs	r0, #250	; 0xfa
 8000f56:	f000 ff79 	bl	8001e4c <setTimer4>
					led7SegState = 1;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <fsm_automatic_run1+0x384>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
					break;
 8000f60:	e000      	b.n	8000f64 <fsm_automatic_run1+0x338>
				}
			}
 8000f62:	bf00      	nop

			if(timer1_flag == 1) {
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <fsm_automatic_run1+0x38c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d11b      	bne.n	8000fa4 <fsm_automatic_run1+0x378>
				setTimer1(led_duration[0]*1000);
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <fsm_automatic_run1+0x390>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f74:	fb02 f303 	mul.w	r3, r2, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 ff13 	bl	8001da4 <setTimer1>
				LANE1_STATUS = LANE1_RED;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <fsm_automatic_run1+0x394>)
 8000f80:	2202      	movs	r2, #2
 8000f82:	601a      	str	r2, [r3, #0]

				countDownYellow1 = 0; //reset
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <fsm_automatic_run1+0x388>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
				timer4_flag = 1;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <fsm_automatic_run1+0x398>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
				led7SegState = 1;//
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <fsm_automatic_run1+0x384>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	601a      	str	r2, [r3, #0]

			}
			break;
 8000f96:	e005      	b.n	8000fa4 <fsm_automatic_run1+0x378>
					break;
 8000f98:	bf00      	nop
 8000f9a:	e004      	b.n	8000fa6 <fsm_automatic_run1+0x37a>
			break;
 8000f9c:	bf00      	nop
 8000f9e:	e002      	b.n	8000fa6 <fsm_automatic_run1+0x37a>
			break;
 8000fa0:	bf00      	nop
 8000fa2:	e000      	b.n	8000fa6 <fsm_automatic_run1+0x37a>
			break;
 8000fa4:	bf00      	nop
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	200000b8 	.word	0x200000b8
 8000fb8:	200000e4 	.word	0x200000e4
 8000fbc:	20000018 	.word	0x20000018
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	200000fc 	.word	0x200000fc

08000fc8 <fsm_automatic_run2>:

void fsm_automatic_run2() {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
	char buffer[10];
	switch(LANE2_STATUS) { //for lane 2
 8000fce:	4bb1      	ldr	r3, [pc, #708]	; (8001294 <fsm_automatic_run2+0x2cc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3b0b      	subs	r3, #11
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	f200 81b2 	bhi.w	800133e <fsm_automatic_run2+0x376>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <fsm_automatic_run2+0x18>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	0800101b 	.word	0x0800101b
 8000fe8:	08001117 	.word	0x08001117
 8000fec:	08001213 	.word	0x08001213
		case LANE2_INIT:
			initTrafficLight2();
 8000ff0:	f000 fc68 	bl	80018c4 <initTrafficLight2>
			LANE2_STATUS = LANE2_GREEN;
 8000ff4:	4ba7      	ldr	r3, [pc, #668]	; (8001294 <fsm_automatic_run2+0x2cc>)
 8000ff6:	220d      	movs	r2, #13
 8000ff8:	601a      	str	r2, [r3, #0]
			setTimer2(led_duration[2]*1000);
 8000ffa:	4ba7      	ldr	r3, [pc, #668]	; (8001298 <fsm_automatic_run2+0x2d0>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fee8 	bl	8001ddc <setTimer2>

			timer3_flag = 1; //
 800100c:	4ba3      	ldr	r3, [pc, #652]	; (800129c <fsm_automatic_run2+0x2d4>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]
			led7SegState2 = 1;
 8001012:	4ba3      	ldr	r3, [pc, #652]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 8001014:	2201      	movs	r2, #1
 8001016:	601a      	str	r2, [r3, #0]
			break;
 8001018:	e191      	b.n	800133e <fsm_automatic_run2+0x376>
		case LANE2_RED:
			setTrafficRed2();
 800101a:	f000 fc9b 	bl	8001954 <setTrafficRed2>

			if (timer3_flag == 1) {
 800101e:	4b9f      	ldr	r3, [pc, #636]	; (800129c <fsm_automatic_run2+0x2d4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d15b      	bne.n	80010de <fsm_automatic_run2+0x116>
				switch(led7SegState2) {
 8001026:	4b9e      	ldr	r3, [pc, #632]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	3b01      	subs	r3, #1
 800102c:	2b03      	cmp	r3, #3
 800102e:	d857      	bhi.n	80010e0 <fsm_automatic_run2+0x118>
 8001030:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <fsm_automatic_run2+0x70>)
 8001032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001036:	bf00      	nop
 8001038:	08001049 	.word	0x08001049
 800103c:	08001057 	.word	0x08001057
 8001040:	08001065 	.word	0x08001065
 8001044:	0800109d 	.word	0x0800109d
				case 1:
					setTimer3(250);
 8001048:	20fa      	movs	r0, #250	; 0xfa
 800104a:	f000 fee3 	bl	8001e14 <setTimer3>
					led7SegState2 = 2;
 800104e:	4b94      	ldr	r3, [pc, #592]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 8001050:	2202      	movs	r2, #2
 8001052:	601a      	str	r2, [r3, #0]
					break;
 8001054:	e044      	b.n	80010e0 <fsm_automatic_run2+0x118>
				case 2:
					setTimer3(250);
 8001056:	20fa      	movs	r0, #250	; 0xfa
 8001058:	f000 fedc 	bl	8001e14 <setTimer3>
					led7SegState2 = 3;
 800105c:	4b90      	ldr	r3, [pc, #576]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 800105e:	2203      	movs	r2, #3
 8001060:	601a      	str	r2, [r3, #0]
					break;
 8001062:	e03d      	b.n	80010e0 <fsm_automatic_run2+0x118>
				case 3:
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex0(led_duration[0]-countDownRed2));
 8001064:	4b8c      	ldr	r3, [pc, #560]	; (8001298 <fsm_automatic_run2+0x2d0>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b8e      	ldr	r3, [pc, #568]	; (80012a4 <fsm_automatic_run2+0x2dc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fdb0 	bl	8000bd4 <getTimeAtIndex0>
 8001074:	4602      	mov	r2, r0
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	498b      	ldr	r1, [pc, #556]	; (80012a8 <fsm_automatic_run2+0x2e0>)
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fe70 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8001080:	1d39      	adds	r1, r7, #4
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	220a      	movs	r2, #10
 8001088:	4888      	ldr	r0, [pc, #544]	; (80012ac <fsm_automatic_run2+0x2e4>)
 800108a:	f003 f94c 	bl	8004326 <HAL_UART_Transmit>
					setTimer3(250);
 800108e:	20fa      	movs	r0, #250	; 0xfa
 8001090:	f000 fec0 	bl	8001e14 <setTimer3>
					led7SegState2 = 4;
 8001094:	4b82      	ldr	r3, [pc, #520]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 8001096:	2204      	movs	r2, #4
 8001098:	601a      	str	r2, [r3, #0]
					break;
 800109a:	e021      	b.n	80010e0 <fsm_automatic_run2+0x118>
				case 4:
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex1(led_duration[0]-countDownRed2));
 800109c:	4b7e      	ldr	r3, [pc, #504]	; (8001298 <fsm_automatic_run2+0x2d0>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b80      	ldr	r3, [pc, #512]	; (80012a4 <fsm_automatic_run2+0x2dc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fda8 	bl	8000bfc <getTimeAtIndex1>
 80010ac:	4602      	mov	r2, r0
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	497d      	ldr	r1, [pc, #500]	; (80012a8 <fsm_automatic_run2+0x2e0>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 fe54 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 80010b8:	1d39      	adds	r1, r7, #4
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	220a      	movs	r2, #10
 80010c0:	487a      	ldr	r0, [pc, #488]	; (80012ac <fsm_automatic_run2+0x2e4>)
 80010c2:	f003 f930 	bl	8004326 <HAL_UART_Transmit>
					countDownRed2++;
 80010c6:	4b77      	ldr	r3, [pc, #476]	; (80012a4 <fsm_automatic_run2+0x2dc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4a75      	ldr	r2, [pc, #468]	; (80012a4 <fsm_automatic_run2+0x2dc>)
 80010ce:	6013      	str	r3, [r2, #0]
					setTimer3(250);
 80010d0:	20fa      	movs	r0, #250	; 0xfa
 80010d2:	f000 fe9f 	bl	8001e14 <setTimer3>
					led7SegState2 = 1;
 80010d6:	4b72      	ldr	r3, [pc, #456]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
					break;
 80010dc:	e000      	b.n	80010e0 <fsm_automatic_run2+0x118>
				}
			}
 80010de:	bf00      	nop

			if(timer2_flag == 1) {
 80010e0:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <fsm_automatic_run2+0x2e8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	f040 8125 	bne.w	8001334 <fsm_automatic_run2+0x36c>
				setTimer2(led_duration[2]*1000);
 80010ea:	4b6b      	ldr	r3, [pc, #428]	; (8001298 <fsm_automatic_run2+0x2d0>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f2:	fb02 f303 	mul.w	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fe70 	bl	8001ddc <setTimer2>
				LANE2_STATUS = LANE2_GREEN;
 80010fc:	4b65      	ldr	r3, [pc, #404]	; (8001294 <fsm_automatic_run2+0x2cc>)
 80010fe:	220d      	movs	r2, #13
 8001100:	601a      	str	r2, [r3, #0]

				countDownRed2 = 0; //reset
 8001102:	4b68      	ldr	r3, [pc, #416]	; (80012a4 <fsm_automatic_run2+0x2dc>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
				led7SegState2 = 1; //
 8001108:	4b65      	ldr	r3, [pc, #404]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]
				timer3_flag = 1;
 800110e:	4b63      	ldr	r3, [pc, #396]	; (800129c <fsm_automatic_run2+0x2d4>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
			}
			break;
 8001114:	e10e      	b.n	8001334 <fsm_automatic_run2+0x36c>
		case LANE2_GREEN:
			setTrafficGreen2();
 8001116:	f000 fbf9 	bl	800190c <setTrafficGreen2>

			if (timer3_flag == 1) {
 800111a:	4b60      	ldr	r3, [pc, #384]	; (800129c <fsm_automatic_run2+0x2d4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d15b      	bne.n	80011da <fsm_automatic_run2+0x212>
				switch(led7SegState2) {
 8001122:	4b5f      	ldr	r3, [pc, #380]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3b01      	subs	r3, #1
 8001128:	2b03      	cmp	r3, #3
 800112a:	d857      	bhi.n	80011dc <fsm_automatic_run2+0x214>
 800112c:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <fsm_automatic_run2+0x16c>)
 800112e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001132:	bf00      	nop
 8001134:	08001145 	.word	0x08001145
 8001138:	08001153 	.word	0x08001153
 800113c:	08001161 	.word	0x08001161
 8001140:	08001199 	.word	0x08001199
				case 1:
					setTimer3(250);
 8001144:	20fa      	movs	r0, #250	; 0xfa
 8001146:	f000 fe65 	bl	8001e14 <setTimer3>
					led7SegState2 = 2;
 800114a:	4b55      	ldr	r3, [pc, #340]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 800114c:	2202      	movs	r2, #2
 800114e:	601a      	str	r2, [r3, #0]
					break;
 8001150:	e044      	b.n	80011dc <fsm_automatic_run2+0x214>
				case 2:
					setTimer3(250);
 8001152:	20fa      	movs	r0, #250	; 0xfa
 8001154:	f000 fe5e 	bl	8001e14 <setTimer3>
					led7SegState2 = 3;
 8001158:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 800115a:	2203      	movs	r2, #3
 800115c:	601a      	str	r2, [r3, #0]
					break;
 800115e:	e03d      	b.n	80011dc <fsm_automatic_run2+0x214>
				case 3:
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex0(led_duration[2]-countDownGreen2));
 8001160:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <fsm_automatic_run2+0x2d0>)
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <fsm_automatic_run2+0x2ec>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fd32 	bl	8000bd4 <getTimeAtIndex0>
 8001170:	4602      	mov	r2, r0
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	494c      	ldr	r1, [pc, #304]	; (80012a8 <fsm_automatic_run2+0x2e0>)
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fdf2 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 800117c:	1d39      	adds	r1, r7, #4
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	220a      	movs	r2, #10
 8001184:	4849      	ldr	r0, [pc, #292]	; (80012ac <fsm_automatic_run2+0x2e4>)
 8001186:	f003 f8ce 	bl	8004326 <HAL_UART_Transmit>
					setTimer3(250);
 800118a:	20fa      	movs	r0, #250	; 0xfa
 800118c:	f000 fe42 	bl	8001e14 <setTimer3>
					led7SegState2 = 4;
 8001190:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 8001192:	2204      	movs	r2, #4
 8001194:	601a      	str	r2, [r3, #0]
					break;
 8001196:	e021      	b.n	80011dc <fsm_automatic_run2+0x214>
				case 4:
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex1(led_duration[2]-countDownGreen2));
 8001198:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <fsm_automatic_run2+0x2d0>)
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	4b45      	ldr	r3, [pc, #276]	; (80012b4 <fsm_automatic_run2+0x2ec>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fd2a 	bl	8000bfc <getTimeAtIndex1>
 80011a8:	4602      	mov	r2, r0
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	493e      	ldr	r1, [pc, #248]	; (80012a8 <fsm_automatic_run2+0x2e0>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fdd6 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 80011b4:	1d39      	adds	r1, r7, #4
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	220a      	movs	r2, #10
 80011bc:	483b      	ldr	r0, [pc, #236]	; (80012ac <fsm_automatic_run2+0x2e4>)
 80011be:	f003 f8b2 	bl	8004326 <HAL_UART_Transmit>
					countDownGreen2++;
 80011c2:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <fsm_automatic_run2+0x2ec>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a3a      	ldr	r2, [pc, #232]	; (80012b4 <fsm_automatic_run2+0x2ec>)
 80011ca:	6013      	str	r3, [r2, #0]
					setTimer3(250);
 80011cc:	20fa      	movs	r0, #250	; 0xfa
 80011ce:	f000 fe21 	bl	8001e14 <setTimer3>
					led7SegState2 = 1;
 80011d2:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
					break;
 80011d8:	e000      	b.n	80011dc <fsm_automatic_run2+0x214>
				}
			}
 80011da:	bf00      	nop

			if(timer2_flag == 1) {
 80011dc:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <fsm_automatic_run2+0x2e8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	f040 80a9 	bne.w	8001338 <fsm_automatic_run2+0x370>
				setTimer2(led_duration[1]*1000);
 80011e6:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <fsm_automatic_run2+0x2d0>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ee:	fb02 f303 	mul.w	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fdf2 	bl	8001ddc <setTimer2>
				LANE2_STATUS = LANE2_YELLOW;
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <fsm_automatic_run2+0x2cc>)
 80011fa:	220e      	movs	r2, #14
 80011fc:	601a      	str	r2, [r3, #0]

				countDownGreen2 = 0; //reset
 80011fe:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <fsm_automatic_run2+0x2ec>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
				led7SegState2 = 1;//
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]
				timer3_flag = 1;
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <fsm_automatic_run2+0x2d4>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001210:	e092      	b.n	8001338 <fsm_automatic_run2+0x370>
		case LANE2_YELLOW:
			setTrafficYellow2();
 8001212:	f000 fbc3 	bl	800199c <setTrafficYellow2>

			if (timer3_flag == 1) {
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <fsm_automatic_run2+0x2d4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d16f      	bne.n	80012fe <fsm_automatic_run2+0x336>
				switch(led7SegState2) {
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3b01      	subs	r3, #1
 8001224:	2b03      	cmp	r3, #3
 8001226:	d86b      	bhi.n	8001300 <fsm_automatic_run2+0x338>
 8001228:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <fsm_automatic_run2+0x268>)
 800122a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122e:	bf00      	nop
 8001230:	08001241 	.word	0x08001241
 8001234:	0800124f 	.word	0x0800124f
 8001238:	0800125d 	.word	0x0800125d
 800123c:	080012bd 	.word	0x080012bd
				case 1:
					setTimer3(250);
 8001240:	20fa      	movs	r0, #250	; 0xfa
 8001242:	f000 fde7 	bl	8001e14 <setTimer3>
					led7SegState2 = 2;
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 8001248:	2202      	movs	r2, #2
 800124a:	601a      	str	r2, [r3, #0]
					break;
 800124c:	e058      	b.n	8001300 <fsm_automatic_run2+0x338>
				case 2:
					setTimer3(250);
 800124e:	20fa      	movs	r0, #250	; 0xfa
 8001250:	f000 fde0 	bl	8001e14 <setTimer3>
					led7SegState2 = 3;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 8001256:	2203      	movs	r2, #3
 8001258:	601a      	str	r2, [r3, #0]
					break;
 800125a:	e051      	b.n	8001300 <fsm_automatic_run2+0x338>
				case 3:
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex0(led_duration[1]-countDownYellow2));
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <fsm_automatic_run2+0x2d0>)
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <fsm_automatic_run2+0x2f0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fcb4 	bl	8000bd4 <getTimeAtIndex0>
 800126c:	4602      	mov	r2, r0
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	490d      	ldr	r1, [pc, #52]	; (80012a8 <fsm_automatic_run2+0x2e0>)
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fd74 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 8001278:	1d39      	adds	r1, r7, #4
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	220a      	movs	r2, #10
 8001280:	480a      	ldr	r0, [pc, #40]	; (80012ac <fsm_automatic_run2+0x2e4>)
 8001282:	f003 f850 	bl	8004326 <HAL_UART_Transmit>
					setTimer3(250);
 8001286:	20fa      	movs	r0, #250	; 0xfa
 8001288:	f000 fdc4 	bl	8001e14 <setTimer3>
					led7SegState2 = 4;
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <fsm_automatic_run2+0x2d8>)
 800128e:	2204      	movs	r2, #4
 8001290:	601a      	str	r2, [r3, #0]
					break;
 8001292:	e035      	b.n	8001300 <fsm_automatic_run2+0x338>
 8001294:	2000000c 	.word	0x2000000c
 8001298:	20000018 	.word	0x20000018
 800129c:	200000f4 	.word	0x200000f4
 80012a0:	20000004 	.word	0x20000004
 80012a4:	200000c0 	.word	0x200000c0
 80012a8:	080055ec 	.word	0x080055ec
 80012ac:	20000220 	.word	0x20000220
 80012b0:	200000ec 	.word	0x200000ec
 80012b4:	200000c8 	.word	0x200000c8
 80012b8:	200000c4 	.word	0x200000c4
				case 4:
					sprintf((char*)buffer, "!7SEG:%d#\r\n", getTimeAtIndex1(led_duration[1]-countDownYellow2));
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <fsm_automatic_run2+0x380>)
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <fsm_automatic_run2+0x384>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fc98 	bl	8000bfc <getTimeAtIndex1>
 80012cc:	4602      	mov	r2, r0
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	491f      	ldr	r1, [pc, #124]	; (8001350 <fsm_automatic_run2+0x388>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 fd44 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(&huart2, &buffer[0], 10, 1000);
 80012d8:	1d39      	adds	r1, r7, #4
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	220a      	movs	r2, #10
 80012e0:	481c      	ldr	r0, [pc, #112]	; (8001354 <fsm_automatic_run2+0x38c>)
 80012e2:	f003 f820 	bl	8004326 <HAL_UART_Transmit>
					countDownYellow2++;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <fsm_automatic_run2+0x384>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <fsm_automatic_run2+0x384>)
 80012ee:	6013      	str	r3, [r2, #0]
					setTimer3(250);
 80012f0:	20fa      	movs	r0, #250	; 0xfa
 80012f2:	f000 fd8f 	bl	8001e14 <setTimer3>
					led7SegState2 = 1;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <fsm_automatic_run2+0x390>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
					break;
 80012fc:	e000      	b.n	8001300 <fsm_automatic_run2+0x338>
				}
			}
 80012fe:	bf00      	nop

			if(timer2_flag == 1) {
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <fsm_automatic_run2+0x394>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d119      	bne.n	800133c <fsm_automatic_run2+0x374>
				setTimer2(led_duration[0]*1000);
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <fsm_automatic_run2+0x380>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fd61 	bl	8001ddc <setTimer2>
				LANE2_STATUS = LANE2_RED;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <fsm_automatic_run2+0x398>)
 800131c:	220c      	movs	r2, #12
 800131e:	601a      	str	r2, [r3, #0]

				countDownYellow2 = 0; //reset
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <fsm_automatic_run2+0x384>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
				led7SegState2 = 1;//
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <fsm_automatic_run2+0x390>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
				timer3_flag = 1;
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <fsm_automatic_run2+0x39c>)
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]
			}
			break;
 8001332:	e003      	b.n	800133c <fsm_automatic_run2+0x374>
			break;
 8001334:	bf00      	nop
 8001336:	e002      	b.n	800133e <fsm_automatic_run2+0x376>
			break;
 8001338:	bf00      	nop
 800133a:	e000      	b.n	800133e <fsm_automatic_run2+0x376>
			break;
 800133c:	bf00      	nop
	}

}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000018 	.word	0x20000018
 800134c:	200000c4 	.word	0x200000c4
 8001350:	080055ec 	.word	0x080055ec
 8001354:	20000220 	.word	0x20000220
 8001358:	20000004 	.word	0x20000004
 800135c:	200000ec 	.word	0x200000ec
 8001360:	2000000c 	.word	0x2000000c
 8001364:	200000f4 	.word	0x200000f4

08001368 <fsm_automatic_run0>:

//fsm for pedestrian
void fsm_automatic_run0() {
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	af00      	add	r7, sp, #0
	switch(LANE0_STATUS) {
 800136c:	4b5a      	ldr	r3, [pc, #360]	; (80014d8 <fsm_automatic_run0+0x170>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3b15      	subs	r3, #21
 8001372:	2b03      	cmp	r3, #3
 8001374:	f200 80aa 	bhi.w	80014cc <fsm_automatic_run0+0x164>
 8001378:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <fsm_automatic_run0+0x18>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	08001391 	.word	0x08001391
 8001384:	080013bf 	.word	0x080013bf
 8001388:	080013ed 	.word	0x080013ed
 800138c:	08001483 	.word	0x08001483
		case LANE0_INIT:
			initTrafficLight0();
 8001390:	f000 fa48 	bl	8001824 <initTrafficLight0>
			LANE0_STATUS = LANE0_GREEN;
 8001394:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <fsm_automatic_run0+0x170>)
 8001396:	2217      	movs	r2, #23
 8001398:	601a      	str	r2, [r3, #0]
			setTimer7(led_duration[2]*1000);
 800139a:	4b50      	ldr	r3, [pc, #320]	; (80014dc <fsm_automatic_run0+0x174>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fda4 	bl	8001ef4 <setTimer7>

			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, buzzerValue); //at this time, buzzerValue = 999; do not work
 80013ac:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <fsm_automatic_run0+0x178>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <fsm_automatic_run0+0x17c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34
			timer10_flag = 1; //used for buzzer; make it louder in case green light
 80013b6:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <fsm_automatic_run0+0x180>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
			break;
 80013bc:	e086      	b.n	80014cc <fsm_automatic_run0+0x164>
		case LANE0_RED:
			if (checkflag == 1) {
 80013be:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <fsm_automatic_run0+0x184>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d101      	bne.n	80013ca <fsm_automatic_run0+0x62>
				setTrafficRed0();
 80013c6:	f000 fa55 	bl	8001874 <setTrafficRed0>
			}

			if(timer7_flag == 1) {
 80013ca:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <fsm_automatic_run0+0x188>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d177      	bne.n	80014c2 <fsm_automatic_run0+0x15a>
				setTimer7(led_duration[2]*1000);
 80013d2:	4b42      	ldr	r3, [pc, #264]	; (80014dc <fsm_automatic_run0+0x174>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fd88 	bl	8001ef4 <setTimer7>
				LANE0_STATUS = LANE0_GREEN;
 80013e4:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <fsm_automatic_run0+0x170>)
 80013e6:	2217      	movs	r2, #23
 80013e8:	601a      	str	r2, [r3, #0]
			}
			break;
 80013ea:	e06a      	b.n	80014c2 <fsm_automatic_run0+0x15a>
		case LANE0_GREEN: //only this case the pedestrian can cross the street
			if (checkflag == 1) {
 80013ec:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <fsm_automatic_run0+0x184>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d135      	bne.n	8001460 <fsm_automatic_run0+0xf8>
				setTrafficGreen0();
 80013f4:	f000 fa2a 	bl	800184c <setTrafficGreen0>
				//Now make the buzzer louder in every 0.5s
				if (timer10_flag == 1) {
 80013f8:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <fsm_automatic_run0+0x180>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d12f      	bne.n	8001460 <fsm_automatic_run0+0xf8>
					setTimer10(500);
 8001400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001404:	f000 fd92 	bl	8001f2c <setTimer10>
					buzzerValue = buzzerValue - 999/(led_duration[2]/0.5); //decrease to value 0, so that the buzzer become more louder
 8001408:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <fsm_automatic_run0+0x178>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe fff1 	bl	80003f4 <__aeabi_i2d>
 8001412:	4604      	mov	r4, r0
 8001414:	460d      	mov	r5, r1
 8001416:	4b31      	ldr	r3, [pc, #196]	; (80014dc <fsm_automatic_run0+0x174>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe ffea 	bl	80003f4 <__aeabi_i2d>
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <fsm_automatic_run0+0x18c>)
 8001426:	f7ff f979 	bl	800071c <__aeabi_ddiv>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	a128      	add	r1, pc, #160	; (adr r1, 80014d0 <fsm_automatic_run0+0x168>)
 8001430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001434:	f7ff f972 	bl	800071c <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4620      	mov	r0, r4
 800143e:	4629      	mov	r1, r5
 8001440:	f7fe fe8a 	bl	8000158 <__aeabi_dsub>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fa4e 	bl	80008ec <__aeabi_d2iz>
 8001450:	4603      	mov	r3, r0
 8001452:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <fsm_automatic_run0+0x178>)
 8001454:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, buzzerValue);
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <fsm_automatic_run0+0x178>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <fsm_automatic_run0+0x17c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	635a      	str	r2, [r3, #52]	; 0x34
				}
			}

			if(timer7_flag == 1) {
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <fsm_automatic_run0+0x188>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d12e      	bne.n	80014c6 <fsm_automatic_run0+0x15e>
				setTimer7(led_duration[1]*1000);
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <fsm_automatic_run0+0x174>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fd3d 	bl	8001ef4 <setTimer7>
				LANE0_STATUS = LANE0_YELLOW;
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <fsm_automatic_run0+0x170>)
 800147c:	2218      	movs	r2, #24
 800147e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001480:	e021      	b.n	80014c6 <fsm_automatic_run0+0x15e>
		case LANE0_YELLOW:
			buzzerValue = 999; //reset to make it stop working
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <fsm_automatic_run0+0x178>)
 8001484:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001488:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, buzzerValue); //at this time, buzzerValue = 999; do not work
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <fsm_automatic_run0+0x178>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <fsm_automatic_run0+0x17c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	635a      	str	r2, [r3, #52]	; 0x34

			if (checkflag == 1) {
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <fsm_automatic_run0+0x184>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <fsm_automatic_run0+0x138>
				setTrafficRed0(); //red light as well. lights for pedestrian do not have yellow light
 800149c:	f000 f9ea 	bl	8001874 <setTrafficRed0>
			}

			if(timer7_flag == 1) {
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <fsm_automatic_run0+0x188>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d110      	bne.n	80014ca <fsm_automatic_run0+0x162>
				setTimer7(led_duration[0]*1000);
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <fsm_automatic_run0+0x174>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fd1d 	bl	8001ef4 <setTimer7>
				LANE0_STATUS = LANE0_RED;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <fsm_automatic_run0+0x170>)
 80014bc:	2216      	movs	r2, #22
 80014be:	601a      	str	r2, [r3, #0]
			}
			break;
 80014c0:	e003      	b.n	80014ca <fsm_automatic_run0+0x162>
			break;
 80014c2:	bf00      	nop
 80014c4:	e002      	b.n	80014cc <fsm_automatic_run0+0x164>
			break;
 80014c6:	bf00      	nop
 80014c8:	e000      	b.n	80014cc <fsm_automatic_run0+0x164>
			break;
 80014ca:	bf00      	nop
	}
}
 80014cc:	bf00      	nop
 80014ce:	bdb0      	pop	{r4, r5, r7, pc}
 80014d0:	00000000 	.word	0x00000000
 80014d4:	408f3800 	.word	0x408f3800
 80014d8:	20000010 	.word	0x20000010
 80014dc:	20000018 	.word	0x20000018
 80014e0:	20000014 	.word	0x20000014
 80014e4:	20000190 	.word	0x20000190
 80014e8:	2000011c 	.word	0x2000011c
 80014ec:	200000b0 	.word	0x200000b0
 80014f0:	20000114 	.word	0x20000114
 80014f4:	3fe00000 	.word	0x3fe00000

080014f8 <fsm_for_input_processing>:
int counterForRed = 0;
int counterForGreen = 0;
int counterForYellow = 0;

int loopFlag = 0;
void fsm_for_input_processing(void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	switch(buttonState){
 80014fc:	4b8c      	ldr	r3, [pc, #560]	; (8001730 <fsm_for_input_processing+0x238>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b03      	cmp	r3, #3
 8001502:	f200 8181 	bhi.w	8001808 <fsm_for_input_processing+0x310>
 8001506:	a201      	add	r2, pc, #4	; (adr r2, 800150c <fsm_for_input_processing+0x14>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	0800151d 	.word	0x0800151d
 8001510:	0800166b 	.word	0x0800166b
 8001514:	08001675 	.word	0x08001675
 8001518:	08001729 	.word	0x08001729
		case NORMAL: //Mode 1

			countDownGreen1 = 0;
 800151c:	4b85      	ldr	r3, [pc, #532]	; (8001734 <fsm_for_input_processing+0x23c>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
			countDownGreen2 = 0;
 8001522:	4b85      	ldr	r3, [pc, #532]	; (8001738 <fsm_for_input_processing+0x240>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
			countDownRed1 = 0;
 8001528:	4b84      	ldr	r3, [pc, #528]	; (800173c <fsm_for_input_processing+0x244>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
			countDownRed2 = 0;
 800152e:	4b84      	ldr	r3, [pc, #528]	; (8001740 <fsm_for_input_processing+0x248>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
			countDownYellow1 = 0;
 8001534:	4b83      	ldr	r3, [pc, #524]	; (8001744 <fsm_for_input_processing+0x24c>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
			countDownYellow2 = 0;
 800153a:	4b83      	ldr	r3, [pc, #524]	; (8001748 <fsm_for_input_processing+0x250>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
			setTimer6(1000);
 8001540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001544:	f000 fcba 	bl	8001ebc <setTimer6>

			LANE1_STATUS = LANE1_INIT;
 8001548:	4b80      	ldr	r3, [pc, #512]	; (800174c <fsm_for_input_processing+0x254>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]
			LANE2_STATUS = LANE2_INIT;
 800154e:	4b80      	ldr	r3, [pc, #512]	; (8001750 <fsm_for_input_processing+0x258>)
 8001550:	220b      	movs	r2, #11
 8001552:	601a      	str	r2, [r3, #0]
			LANE0_STATUS = LANE0_INIT;
 8001554:	4b7f      	ldr	r3, [pc, #508]	; (8001754 <fsm_for_input_processing+0x25c>)
 8001556:	2215      	movs	r2, #21
 8001558:	601a      	str	r2, [r3, #0]

			while(1) {
				if(timer5_flag == 1){
 800155a:	4b7f      	ldr	r3, [pc, #508]	; (8001758 <fsm_for_input_processing+0x260>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d107      	bne.n	8001572 <fsm_for_input_processing+0x7a>
					checkflag = 0; //reset checkflag
 8001562:	4b7e      	ldr	r3, [pc, #504]	; (800175c <fsm_for_input_processing+0x264>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
					timer5_flag = 0; //reset timer5_flag
 8001568:	4b7b      	ldr	r3, [pc, #492]	; (8001758 <fsm_for_input_processing+0x260>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
					initTrafficLight0(); //turn off all lights
 800156e:	f000 f959 	bl	8001824 <initTrafficLight0>
				}

				fsm_automatic_run1();
 8001572:	f7ff fb5b 	bl	8000c2c <fsm_automatic_run1>
				fsm_automatic_run2();
 8001576:	f7ff fd27 	bl	8000fc8 <fsm_automatic_run2>
				fsm_automatic_run0();
 800157a:	f7ff fef5 	bl	8001368 <fsm_automatic_run0>

				if(isButtonPressed(3) == 1) {
 800157e:	2003      	movs	r0, #3
 8001580:	f7ff fb0e 	bl	8000ba0 <isButtonPressed>
 8001584:	4603      	mov	r3, r0
 8001586:	2b01      	cmp	r3, #1
 8001588:	d111      	bne.n	80015ae <fsm_for_input_processing+0xb6>
					checkflag = 1;
 800158a:	4b74      	ldr	r3, [pc, #464]	; (800175c <fsm_for_input_processing+0x264>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]
					setTimer5((led_duration[0] + led_duration[1] + led_duration[2])*1000*2); //two cycles
 8001590:	4b73      	ldr	r3, [pc, #460]	; (8001760 <fsm_for_input_processing+0x268>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b72      	ldr	r3, [pc, #456]	; (8001760 <fsm_for_input_processing+0x268>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	441a      	add	r2, r3
 800159a:	4b71      	ldr	r3, [pc, #452]	; (8001760 <fsm_for_input_processing+0x268>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4413      	add	r3, r2
 80015a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 fc6b 	bl	8001e84 <setTimer5>
				}
				if(isButtonPressed(0) == 1) {
 80015ae:	2000      	movs	r0, #0
 80015b0:	f7ff faf6 	bl	8000ba0 <isButtonPressed>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d1cf      	bne.n	800155a <fsm_for_input_processing+0x62>
					buttonState = SET_TIME_RED;
 80015ba:	4b5d      	ldr	r3, [pc, #372]	; (8001730 <fsm_for_input_processing+0x238>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
					setTrafficRed1();
 80015c0:	f000 f9b4 	bl	800192c <setTrafficRed1>
					setTrafficRed2();
 80015c4:	f000 f9c6 	bl	8001954 <setTrafficRed2>
					loopFlag = 0; //reset
 80015c8:	4b66      	ldr	r3, [pc, #408]	; (8001764 <fsm_for_input_processing+0x26c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
					timer1_flag = 1; //for toggle LEDs in mode 2, 3, 4
 80015ce:	4b66      	ldr	r3, [pc, #408]	; (8001768 <fsm_for_input_processing+0x270>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
					break;
 80015d4:	bf00      	nop
				}
			}
			break;
 80015d6:	e117      	b.n	8001808 <fsm_for_input_processing+0x310>
		case SET_TIME_RED: //Mode 2
			while (loopFlag == 0) {
				if (timer1_flag == 1) { //toggle RED LEDs every 0.5s
 80015d8:	4b63      	ldr	r3, [pc, #396]	; (8001768 <fsm_for_input_processing+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d10c      	bne.n	80015fa <fsm_for_input_processing+0x102>
					setTimer1(500);
 80015e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e4:	f000 fbde 	bl	8001da4 <setTimer1>
					HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80015e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ec:	485f      	ldr	r0, [pc, #380]	; (800176c <fsm_for_input_processing+0x274>)
 80015ee:	f001 fabc 	bl	8002b6a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80015f2:	2120      	movs	r1, #32
 80015f4:	485e      	ldr	r0, [pc, #376]	; (8001770 <fsm_for_input_processing+0x278>)
 80015f6:	f001 fab8 	bl	8002b6a <HAL_GPIO_TogglePin>
				}

				if (isButtonPressed(1) == 1) counterForRed++;
 80015fa:	2001      	movs	r0, #1
 80015fc:	f7ff fad0 	bl	8000ba0 <isButtonPressed>
 8001600:	4603      	mov	r3, r0
 8001602:	2b01      	cmp	r3, #1
 8001604:	d104      	bne.n	8001610 <fsm_for_input_processing+0x118>
 8001606:	4b5b      	ldr	r3, [pc, #364]	; (8001774 <fsm_for_input_processing+0x27c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	4a59      	ldr	r2, [pc, #356]	; (8001774 <fsm_for_input_processing+0x27c>)
 800160e:	6013      	str	r3, [r2, #0]

				if(isButtonPressed(2) == 1) {
 8001610:	2002      	movs	r0, #2
 8001612:	f7ff fac5 	bl	8000ba0 <isButtonPressed>
 8001616:	4603      	mov	r3, r0
 8001618:	2b01      	cmp	r3, #1
 800161a:	d110      	bne.n	800163e <fsm_for_input_processing+0x146>
					led_duration[0] += counterForRed;
 800161c:	4b50      	ldr	r3, [pc, #320]	; (8001760 <fsm_for_input_processing+0x268>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b54      	ldr	r3, [pc, #336]	; (8001774 <fsm_for_input_processing+0x27c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4413      	add	r3, r2
 8001626:	4a4e      	ldr	r2, [pc, #312]	; (8001760 <fsm_for_input_processing+0x268>)
 8001628:	6013      	str	r3, [r2, #0]
					if (led_duration[0] > 99) led_duration[0] = 1;
 800162a:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <fsm_for_input_processing+0x268>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b63      	cmp	r3, #99	; 0x63
 8001630:	dd02      	ble.n	8001638 <fsm_for_input_processing+0x140>
 8001632:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <fsm_for_input_processing+0x268>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]
					counterForRed = 0; //reset
 8001638:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <fsm_for_input_processing+0x27c>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
				}

				if(isButtonPressed(0) == 1) {
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff faae 	bl	8000ba0 <isButtonPressed>
 8001644:	4603      	mov	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	d10f      	bne.n	800166a <fsm_for_input_processing+0x172>
					buttonState = SET_TIME_YELLOW;
 800164a:	4b39      	ldr	r3, [pc, #228]	; (8001730 <fsm_for_input_processing+0x238>)
 800164c:	2202      	movs	r2, #2
 800164e:	701a      	strb	r2, [r3, #0]
					setTrafficYellow1();
 8001650:	f000 f990 	bl	8001974 <setTrafficYellow1>
					setTrafficYellow2();
 8001654:	f000 f9a2 	bl	800199c <setTrafficYellow2>
					loopFlag = 1;
 8001658:	4b42      	ldr	r3, [pc, #264]	; (8001764 <fsm_for_input_processing+0x26c>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]
					timer1_flag = 1; //for toggle LEDs in mode 2, 3, 4
 800165e:	4b42      	ldr	r3, [pc, #264]	; (8001768 <fsm_for_input_processing+0x270>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
					counterForRed = 0; //rest
 8001664:	4b43      	ldr	r3, [pc, #268]	; (8001774 <fsm_for_input_processing+0x27c>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 800166a:	4b3e      	ldr	r3, [pc, #248]	; (8001764 <fsm_for_input_processing+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0b2      	beq.n	80015d8 <fsm_for_input_processing+0xe0>
				}
			}
			break;
 8001672:	e0c9      	b.n	8001808 <fsm_for_input_processing+0x310>
		case SET_TIME_YELLOW: //Mode 3
			loopFlag = 0;
 8001674:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <fsm_for_input_processing+0x26c>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 800167a:	e050      	b.n	800171e <fsm_for_input_processing+0x226>
				if (timer1_flag == 1) { //toggle YELLOW LEDs every 0.5s
 800167c:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <fsm_for_input_processing+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d114      	bne.n	80016ae <fsm_for_input_processing+0x1b6>
					setTimer1(500);
 8001684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001688:	f000 fb8c 	bl	8001da4 <setTimer1>
					HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 800168c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001690:	4836      	ldr	r0, [pc, #216]	; (800176c <fsm_for_input_processing+0x274>)
 8001692:	f001 fa6a 	bl	8002b6a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8001696:	2108      	movs	r1, #8
 8001698:	4835      	ldr	r0, [pc, #212]	; (8001770 <fsm_for_input_processing+0x278>)
 800169a:	f001 fa66 	bl	8002b6a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 800169e:	2120      	movs	r1, #32
 80016a0:	4833      	ldr	r0, [pc, #204]	; (8001770 <fsm_for_input_processing+0x278>)
 80016a2:	f001 fa62 	bl	8002b6a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 80016a6:	2110      	movs	r1, #16
 80016a8:	4831      	ldr	r0, [pc, #196]	; (8001770 <fsm_for_input_processing+0x278>)
 80016aa:	f001 fa5e 	bl	8002b6a <HAL_GPIO_TogglePin>
				}

				if (isButtonPressed(1) == 1) counterForYellow++;
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff fa76 	bl	8000ba0 <isButtonPressed>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d104      	bne.n	80016c4 <fsm_for_input_processing+0x1cc>
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <fsm_for_input_processing+0x280>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a2d      	ldr	r2, [pc, #180]	; (8001778 <fsm_for_input_processing+0x280>)
 80016c2:	6013      	str	r3, [r2, #0]

				if(isButtonPressed(2) == 1) {
 80016c4:	2002      	movs	r0, #2
 80016c6:	f7ff fa6b 	bl	8000ba0 <isButtonPressed>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d110      	bne.n	80016f2 <fsm_for_input_processing+0x1fa>
					led_duration[1] += counterForYellow;
 80016d0:	4b23      	ldr	r3, [pc, #140]	; (8001760 <fsm_for_input_processing+0x268>)
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <fsm_for_input_processing+0x280>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	4a21      	ldr	r2, [pc, #132]	; (8001760 <fsm_for_input_processing+0x268>)
 80016dc:	6053      	str	r3, [r2, #4]
					if (led_duration[1] > 99) led_duration[1] = 1;
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <fsm_for_input_processing+0x268>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b63      	cmp	r3, #99	; 0x63
 80016e4:	dd02      	ble.n	80016ec <fsm_for_input_processing+0x1f4>
 80016e6:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <fsm_for_input_processing+0x268>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	605a      	str	r2, [r3, #4]
					counterForYellow = 0; //reset
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <fsm_for_input_processing+0x280>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
				}

				if(isButtonPressed(0) == 1) {
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fa54 	bl	8000ba0 <isButtonPressed>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10f      	bne.n	800171e <fsm_for_input_processing+0x226>
					buttonState = SET_TIME_GREEN;
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <fsm_for_input_processing+0x238>)
 8001700:	2203      	movs	r2, #3
 8001702:	701a      	strb	r2, [r3, #0]
					setTrafficGreen1();
 8001704:	f000 f8ee 	bl	80018e4 <setTrafficGreen1>
					setTrafficGreen2();
 8001708:	f000 f900 	bl	800190c <setTrafficGreen2>
					loopFlag = 1;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <fsm_for_input_processing+0x26c>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]
					timer1_flag = 1; //for toggle LEDs in mode 2, 3, 4
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <fsm_for_input_processing+0x270>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]
					counterForYellow = 0; //reset
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <fsm_for_input_processing+0x280>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <fsm_for_input_processing+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0aa      	beq.n	800167c <fsm_for_input_processing+0x184>
				}
			}
			break;
 8001726:	e06f      	b.n	8001808 <fsm_for_input_processing+0x310>
		case SET_TIME_GREEN: //Mode 4
			loopFlag = 0;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <fsm_for_input_processing+0x26c>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 800172e:	e066      	b.n	80017fe <fsm_for_input_processing+0x306>
 8001730:	200000cc 	.word	0x200000cc
 8001734:	200000bc 	.word	0x200000bc
 8001738:	200000c8 	.word	0x200000c8
 800173c:	200000b4 	.word	0x200000b4
 8001740:	200000c0 	.word	0x200000c0
 8001744:	200000b8 	.word	0x200000b8
 8001748:	200000c4 	.word	0x200000c4
 800174c:	20000008 	.word	0x20000008
 8001750:	2000000c 	.word	0x2000000c
 8001754:	20000010 	.word	0x20000010
 8001758:	20000104 	.word	0x20000104
 800175c:	200000b0 	.word	0x200000b0
 8001760:	20000018 	.word	0x20000018
 8001764:	200000dc 	.word	0x200000dc
 8001768:	200000e4 	.word	0x200000e4
 800176c:	40010800 	.word	0x40010800
 8001770:	40010c00 	.word	0x40010c00
 8001774:	200000d0 	.word	0x200000d0
 8001778:	200000d8 	.word	0x200000d8
				if (timer1_flag == 1) { //toggle GREEN LEDs every 0.5s
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <fsm_for_input_processing+0x314>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d10b      	bne.n	800179c <fsm_for_input_processing+0x2a4>
					setTimer1(500);
 8001784:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001788:	f000 fb0c 	bl	8001da4 <setTimer1>
					HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 800178c:	2108      	movs	r1, #8
 800178e:	4820      	ldr	r0, [pc, #128]	; (8001810 <fsm_for_input_processing+0x318>)
 8001790:	f001 f9eb 	bl	8002b6a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8001794:	2110      	movs	r1, #16
 8001796:	481e      	ldr	r0, [pc, #120]	; (8001810 <fsm_for_input_processing+0x318>)
 8001798:	f001 f9e7 	bl	8002b6a <HAL_GPIO_TogglePin>
				}

				if (isButtonPressed(1) == 1) counterForGreen++;
 800179c:	2001      	movs	r0, #1
 800179e:	f7ff f9ff 	bl	8000ba0 <isButtonPressed>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d104      	bne.n	80017b2 <fsm_for_input_processing+0x2ba>
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <fsm_for_input_processing+0x31c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a19      	ldr	r2, [pc, #100]	; (8001814 <fsm_for_input_processing+0x31c>)
 80017b0:	6013      	str	r3, [r2, #0]

				if(isButtonPressed(2) == 1) {
 80017b2:	2002      	movs	r0, #2
 80017b4:	f7ff f9f4 	bl	8000ba0 <isButtonPressed>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d110      	bne.n	80017e0 <fsm_for_input_processing+0x2e8>
					led_duration[2] += counterForGreen;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <fsm_for_input_processing+0x320>)
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <fsm_for_input_processing+0x31c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a13      	ldr	r2, [pc, #76]	; (8001818 <fsm_for_input_processing+0x320>)
 80017ca:	6093      	str	r3, [r2, #8]
					if (led_duration[2] > 99) led_duration[2] = 1;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <fsm_for_input_processing+0x320>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b63      	cmp	r3, #99	; 0x63
 80017d2:	dd02      	ble.n	80017da <fsm_for_input_processing+0x2e2>
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <fsm_for_input_processing+0x320>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	609a      	str	r2, [r3, #8]
					counterForGreen = 0; //reset
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <fsm_for_input_processing+0x31c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
				}

				if(isButtonPressed(0) == 1) {
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff f9dd 	bl	8000ba0 <isButtonPressed>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d108      	bne.n	80017fe <fsm_for_input_processing+0x306>
					buttonState = NORMAL;
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <fsm_for_input_processing+0x324>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
					loopFlag = 1;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <fsm_for_input_processing+0x328>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
					counterForGreen = 0; //reset
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <fsm_for_input_processing+0x31c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <fsm_for_input_processing+0x328>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0ba      	beq.n	800177c <fsm_for_input_processing+0x284>
				}
			}
			break;
 8001806:	bf00      	nop
	}
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200000e4 	.word	0x200000e4
 8001810:	40010c00 	.word	0x40010c00
 8001814:	200000d4 	.word	0x200000d4
 8001818:	20000018 	.word	0x20000018
 800181c:	200000cc 	.word	0x200000cc
 8001820:	200000dc 	.word	0x200000dc

08001824 <initTrafficLight0>:
//	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, ((number>>4)&0x01)^0x01);
//	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, ((number>>5)&0x01)^0x01);
//	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, ((number>>6)&0x01)^0x01);
//}

void initTrafficLight0() {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET); //0
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <initTrafficLight0+0x20>)
 8001830:	f001 f983 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET); //0
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183a:	4803      	ldr	r0, [pc, #12]	; (8001848 <initTrafficLight0+0x24>)
 800183c:	f001 f97d 	bl	8002b3a <HAL_GPIO_WritePin>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40010c00 	.word	0x40010c00
 8001848:	40010800 	.word	0x40010800

0800184c <setTrafficGreen0>:

void setTrafficGreen0() {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET); //1
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <setTrafficGreen0+0x20>)
 8001858:	f001 f96f 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET); //0
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001862:	4803      	ldr	r0, [pc, #12]	; (8001870 <setTrafficGreen0+0x24>)
 8001864:	f001 f969 	bl	8002b3a <HAL_GPIO_WritePin>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40010c00 	.word	0x40010c00
 8001870:	40010800 	.word	0x40010800

08001874 <setTrafficRed0>:

void setTrafficRed0() {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET); //1
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <setTrafficRed0+0x20>)
 8001880:	f001 f95b 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET); //0
 8001884:	2200      	movs	r2, #0
 8001886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800188a:	4803      	ldr	r0, [pc, #12]	; (8001898 <setTrafficRed0+0x24>)
 800188c:	f001 f955 	bl	8002b3a <HAL_GPIO_WritePin>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40010c00 	.word	0x40010c00
 8001898:	40010800 	.word	0x40010800

0800189c <initTrafficLight1>:
void setTrafficYellow0() {
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET); //1
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET); //1
}

void initTrafficLight1() {
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET); //0
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <initTrafficLight1+0x20>)
 80018a8:	f001 f947 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET); //0
 80018ac:	2200      	movs	r2, #0
 80018ae:	2108      	movs	r1, #8
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <initTrafficLight1+0x24>)
 80018b2:	f001 f942 	bl	8002b3a <HAL_GPIO_WritePin>
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40010800 	.word	0x40010800
 80018c0:	40010c00 	.word	0x40010c00

080018c4 <initTrafficLight2>:

void initTrafficLight2() {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET); //0
 80018c8:	2200      	movs	r2, #0
 80018ca:	2120      	movs	r1, #32
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <initTrafficLight2+0x1c>)
 80018ce:	f001 f934 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET); //0
 80018d2:	2200      	movs	r2, #0
 80018d4:	2110      	movs	r1, #16
 80018d6:	4802      	ldr	r0, [pc, #8]	; (80018e0 <initTrafficLight2+0x1c>)
 80018d8:	f001 f92f 	bl	8002b3a <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40010c00 	.word	0x40010c00

080018e4 <setTrafficGreen1>:
void setTrafficGreen1() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET); //0
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <setTrafficGreen1+0x20>)
 80018f0:	f001 f923 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET); //1
 80018f4:	2201      	movs	r2, #1
 80018f6:	2108      	movs	r1, #8
 80018f8:	4803      	ldr	r0, [pc, #12]	; (8001908 <setTrafficGreen1+0x24>)
 80018fa:	f001 f91e 	bl	8002b3a <HAL_GPIO_WritePin>
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40010800 	.word	0x40010800
 8001908:	40010c00 	.word	0x40010c00

0800190c <setTrafficGreen2>:
void setTrafficGreen2() {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET); //0
 8001910:	2200      	movs	r2, #0
 8001912:	2120      	movs	r1, #32
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <setTrafficGreen2+0x1c>)
 8001916:	f001 f910 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET); //1
 800191a:	2201      	movs	r2, #1
 800191c:	2110      	movs	r1, #16
 800191e:	4802      	ldr	r0, [pc, #8]	; (8001928 <setTrafficGreen2+0x1c>)
 8001920:	f001 f90b 	bl	8002b3a <HAL_GPIO_WritePin>
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40010c00 	.word	0x40010c00

0800192c <setTrafficRed1>:

void setTrafficRed1() {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET); //1
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <setTrafficRed1+0x20>)
 8001938:	f001 f8ff 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET); //0
 800193c:	2200      	movs	r2, #0
 800193e:	2108      	movs	r1, #8
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <setTrafficRed1+0x24>)
 8001942:	f001 f8fa 	bl	8002b3a <HAL_GPIO_WritePin>
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40010800 	.word	0x40010800
 8001950:	40010c00 	.word	0x40010c00

08001954 <setTrafficRed2>:
void setTrafficRed2() {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET); //1
 8001958:	2201      	movs	r2, #1
 800195a:	2120      	movs	r1, #32
 800195c:	4804      	ldr	r0, [pc, #16]	; (8001970 <setTrafficRed2+0x1c>)
 800195e:	f001 f8ec 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET); //0
 8001962:	2200      	movs	r2, #0
 8001964:	2110      	movs	r1, #16
 8001966:	4802      	ldr	r0, [pc, #8]	; (8001970 <setTrafficRed2+0x1c>)
 8001968:	f001 f8e7 	bl	8002b3a <HAL_GPIO_WritePin>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40010c00 	.word	0x40010c00

08001974 <setTrafficYellow1>:

void setTrafficYellow1() {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET); //1
 8001978:	2201      	movs	r2, #1
 800197a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <setTrafficYellow1+0x20>)
 8001980:	f001 f8db 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET); //1
 8001984:	2201      	movs	r2, #1
 8001986:	2108      	movs	r1, #8
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <setTrafficYellow1+0x24>)
 800198a:	f001 f8d6 	bl	8002b3a <HAL_GPIO_WritePin>
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40010800 	.word	0x40010800
 8001998:	40010c00 	.word	0x40010c00

0800199c <setTrafficYellow2>:

void setTrafficYellow2() {
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET); //1
 80019a0:	2201      	movs	r2, #1
 80019a2:	2120      	movs	r1, #32
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <setTrafficYellow2+0x1c>)
 80019a6:	f001 f8c8 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET); //1
 80019aa:	2201      	movs	r2, #1
 80019ac:	2110      	movs	r1, #16
 80019ae:	4802      	ldr	r0, [pc, #8]	; (80019b8 <setTrafficYellow2+0x1c>)
 80019b0:	f001 f8c3 	bl	8002b3a <HAL_GPIO_WritePin>
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40010c00 	.word	0x40010c00

080019bc <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	if ( huart -> Instance == USART2 ) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_UART_RxCpltCallback+0x30>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d10a      	bne.n	80019e4 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit (&huart2 , &temp , 1 , 50) ;
 80019ce:	2332      	movs	r3, #50	; 0x32
 80019d0:	2201      	movs	r2, #1
 80019d2:	4907      	ldr	r1, [pc, #28]	; (80019f0 <HAL_UART_RxCpltCallback+0x34>)
 80019d4:	4807      	ldr	r0, [pc, #28]	; (80019f4 <HAL_UART_RxCpltCallback+0x38>)
 80019d6:	f002 fca6 	bl	8004326 <HAL_UART_Transmit>
		HAL_UART_Receive_IT (&huart2 , &temp , 1) ;
 80019da:	2201      	movs	r2, #1
 80019dc:	4904      	ldr	r1, [pc, #16]	; (80019f0 <HAL_UART_RxCpltCallback+0x34>)
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <HAL_UART_RxCpltCallback+0x38>)
 80019e0:	f002 fd33 	bl	800444a <HAL_UART_Receive_IT>
	}
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40004400 	.word	0x40004400
 80019f0:	200000e0 	.word	0x200000e0
 80019f4:	20000220 	.word	0x20000220

080019f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019fc:	f000 fce2 	bl	80023c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a00:	f000 f822 	bl	8001a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a04:	f000 f94e 	bl	8001ca4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001a08:	f000 f860 	bl	8001acc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001a0c:	f000 f920 	bl	8001c50 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001a10:	f000 f8a8 	bl	8001b64 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart2 , &temp , 1) ;
 8001a14:	2201      	movs	r2, #1
 8001a16:	4908      	ldr	r1, [pc, #32]	; (8001a38 <main+0x40>)
 8001a18:	4808      	ldr	r0, [pc, #32]	; (8001a3c <main+0x44>)
 8001a1a:	f002 fd16 	bl	800444a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT (&htim2);
 8001a1e:	4808      	ldr	r0, [pc, #32]	; (8001a40 <main+0x48>)
 8001a20:	f001 fd26 	bl	8003470 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a24:	2100      	movs	r1, #0
 8001a26:	4807      	ldr	r0, [pc, #28]	; (8001a44 <main+0x4c>)
 8001a28:	f001 fdcc 	bl	80035c4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initSomeVariables();
 8001a2c:	f7fe ff86 	bl	800093c <initSomeVariables>
  while (1)
  {
	  fsm_for_input_processing();
 8001a30:	f7ff fd62 	bl	80014f8 <fsm_for_input_processing>
 8001a34:	e7fc      	b.n	8001a30 <main+0x38>
 8001a36:	bf00      	nop
 8001a38:	200000e0 	.word	0x200000e0
 8001a3c:	20000220 	.word	0x20000220
 8001a40:	200001d8 	.word	0x200001d8
 8001a44:	20000190 	.word	0x20000190

08001a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b090      	sub	sp, #64	; 0x40
 8001a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4e:	f107 0318 	add.w	r3, r7, #24
 8001a52:	2228      	movs	r2, #40	; 0x28
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 f97a 	bl	8004d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a72:	2310      	movs	r3, #16
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a76:	2302      	movs	r3, #2
 8001a78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001a7e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 f887 	bl	8002b9c <HAL_RCC_OscConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001a94:	f000 f980 	bl	8001d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a98:	230f      	movs	r3, #15
 8001a9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 faf2 	bl	800309c <HAL_RCC_ClockConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001abe:	f000 f96b 	bl	8001d98 <Error_Handler>
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3740      	adds	r7, #64	; 0x40
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <MX_TIM2_Init+0x94>)
 8001aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_TIM2_Init+0x94>)
 8001af2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001af6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <MX_TIM2_Init+0x94>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <MX_TIM2_Init+0x94>)
 8001b00:	220a      	movs	r2, #10
 8001b02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <MX_TIM2_Init+0x94>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MX_TIM2_Init+0x94>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b10:	4813      	ldr	r0, [pc, #76]	; (8001b60 <MX_TIM2_Init+0x94>)
 8001b12:	f001 fc5d 	bl	80033d0 <HAL_TIM_Base_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b1c:	f000 f93c 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <MX_TIM2_Init+0x94>)
 8001b2e:	f001 ffb1 	bl	8003a94 <HAL_TIM_ConfigClockSource>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b38:	f000 f92e 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b44:	463b      	mov	r3, r7
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_TIM2_Init+0x94>)
 8001b4a:	f002 fb2f 	bl	80041ac <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b54:	f000 f920 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200001d8 	.word	0x200001d8

08001b64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08e      	sub	sp, #56	; 0x38
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	f107 0320 	add.w	r3, r7, #32
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
 8001b90:	615a      	str	r2, [r3, #20]
 8001b92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b94:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001b96:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001b98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001b9c:	223f      	movs	r2, #63	; 0x3f
 8001b9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001ba8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bae:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bba:	4823      	ldr	r0, [pc, #140]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001bbc:	f001 fc08 	bl	80033d0 <HAL_TIM_Base_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001bc6:	f000 f8e7 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	481c      	ldr	r0, [pc, #112]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001bd8:	f001 ff5c 	bl	8003a94 <HAL_TIM_ConfigClockSource>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001be2:	f000 f8d9 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001be6:	4818      	ldr	r0, [pc, #96]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001be8:	f001 fc94 	bl	8003514 <HAL_TIM_PWM_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001bf2:	f000 f8d1 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	4619      	mov	r1, r3
 8001c04:	4810      	ldr	r0, [pc, #64]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001c06:	f002 fad1 	bl	80041ac <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c10:	f000 f8c2 	bl	8001d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c14:	2360      	movs	r3, #96	; 0x60
 8001c16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2200      	movs	r2, #0
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4807      	ldr	r0, [pc, #28]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001c2c:	f001 fe74 	bl	8003918 <HAL_TIM_PWM_ConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001c36:	f000 f8af 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <MX_TIM3_Init+0xe4>)
 8001c3c:	f000 faa0 	bl	8002180 <HAL_TIM_MspPostInit>

}
 8001c40:	bf00      	nop
 8001c42:	3738      	adds	r7, #56	; 0x38
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000190 	.word	0x20000190
 8001c4c:	40000400 	.word	0x40000400

08001c50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_USART2_UART_Init+0x4c>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <MX_USART2_UART_Init+0x50>)
 8001c58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_USART2_UART_Init+0x4c>)
 8001c5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_USART2_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_USART2_UART_Init+0x4c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_USART2_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_USART2_UART_Init+0x4c>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <MX_USART2_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_USART2_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_USART2_UART_Init+0x4c>)
 8001c88:	f002 fb00 	bl	800428c <HAL_UART_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c92:	f000 f881 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000220 	.word	0x20000220
 8001ca0:	40004400 	.word	0x40004400

08001ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a2d      	ldr	r2, [pc, #180]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001cd6:	f043 0308 	orr.w	r3, r3, #8
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001cee:	4822      	ldr	r0, [pc, #136]	; (8001d78 <MX_GPIO_Init+0xd4>)
 8001cf0:	f000 ff23 	bl	8002b3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001cfa:	4820      	ldr	r0, [pc, #128]	; (8001d7c <MX_GPIO_Init+0xd8>)
 8001cfc:	f000 ff1d 	bl	8002b3a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8001d00:	2313      	movs	r3, #19
 8001d02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	4619      	mov	r1, r3
 8001d12:	481a      	ldr	r0, [pc, #104]	; (8001d7c <MX_GPIO_Init+0xd8>)
 8001d14:	f000 fd76 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 0308 	add.w	r3, r7, #8
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4813      	ldr	r0, [pc, #76]	; (8001d78 <MX_GPIO_Init+0xd4>)
 8001d2c:	f000 fd6a 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8001d30:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001d34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	4619      	mov	r1, r3
 8001d48:	480b      	ldr	r0, [pc, #44]	; (8001d78 <MX_GPIO_Init+0xd4>)
 8001d4a:	f000 fd5b 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8001d4e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001d52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 0308 	add.w	r3, r7, #8
 8001d64:	4619      	mov	r1, r3
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_GPIO_Init+0xd8>)
 8001d68:	f000 fd4c 	bl	8002804 <HAL_GPIO_Init>

}
 8001d6c:	bf00      	nop
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010c00 	.word	0x40010c00
 8001d7c:	40010800 	.word	0x40010800

08001d80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	timerRun();
 8001d88:	f000 f8ec 	bl	8001f64 <timerRun>
	getKeyInput();
 8001d8c:	f7fe fe14 	bl	80009b8 <getKeyInput>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9c:	b672      	cpsid	i
}
 8001d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <Error_Handler+0x8>
	...

08001da4 <setTimer1>:

int timer10_flag = 0;
int timer10_counter = 0;


void setTimer1(int duration) {
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <setTimer1+0x2c>)
 8001db0:	fb82 1203 	smull	r1, r2, r2, r3
 8001db4:	1092      	asrs	r2, r2, #2
 8001db6:	17db      	asrs	r3, r3, #31
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <setTimer1+0x30>)
 8001dbc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <setTimer1+0x34>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	66666667 	.word	0x66666667
 8001dd4:	200000e8 	.word	0x200000e8
 8001dd8:	200000e4 	.word	0x200000e4

08001ddc <setTimer2>:
void setTimer2(int duration) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <setTimer2+0x2c>)
 8001de8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dec:	1092      	asrs	r2, r2, #2
 8001dee:	17db      	asrs	r3, r3, #31
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <setTimer2+0x30>)
 8001df4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <setTimer2+0x34>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	66666667 	.word	0x66666667
 8001e0c:	200000f0 	.word	0x200000f0
 8001e10:	200000ec 	.word	0x200000ec

08001e14 <setTimer3>:

void setTimer3(int duration) {
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <setTimer3+0x2c>)
 8001e20:	fb82 1203 	smull	r1, r2, r2, r3
 8001e24:	1092      	asrs	r2, r2, #2
 8001e26:	17db      	asrs	r3, r3, #31
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <setTimer3+0x30>)
 8001e2c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <setTimer3+0x34>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	66666667 	.word	0x66666667
 8001e44:	200000f8 	.word	0x200000f8
 8001e48:	200000f4 	.word	0x200000f4

08001e4c <setTimer4>:

void setTimer4(int duration) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <setTimer4+0x2c>)
 8001e58:	fb82 1203 	smull	r1, r2, r2, r3
 8001e5c:	1092      	asrs	r2, r2, #2
 8001e5e:	17db      	asrs	r3, r3, #31
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <setTimer4+0x30>)
 8001e64:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <setTimer4+0x34>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	66666667 	.word	0x66666667
 8001e7c:	20000100 	.word	0x20000100
 8001e80:	200000fc 	.word	0x200000fc

08001e84 <setTimer5>:

void setTimer5(int duration) {
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <setTimer5+0x2c>)
 8001e90:	fb82 1203 	smull	r1, r2, r2, r3
 8001e94:	1092      	asrs	r2, r2, #2
 8001e96:	17db      	asrs	r3, r3, #31
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <setTimer5+0x30>)
 8001e9c:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <setTimer5+0x34>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	66666667 	.word	0x66666667
 8001eb4:	20000108 	.word	0x20000108
 8001eb8:	20000104 	.word	0x20000104

08001ebc <setTimer6>:

void setTimer6(int duration) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <setTimer6+0x2c>)
 8001ec8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ecc:	1092      	asrs	r2, r2, #2
 8001ece:	17db      	asrs	r3, r3, #31
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	4a06      	ldr	r2, [pc, #24]	; (8001eec <setTimer6+0x30>)
 8001ed4:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <setTimer6+0x34>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	66666667 	.word	0x66666667
 8001eec:	20000110 	.word	0x20000110
 8001ef0:	2000010c 	.word	0x2000010c

08001ef4 <setTimer7>:

void setTimer7(int duration) {
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <setTimer7+0x2c>)
 8001f00:	fb82 1203 	smull	r1, r2, r2, r3
 8001f04:	1092      	asrs	r2, r2, #2
 8001f06:	17db      	asrs	r3, r3, #31
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <setTimer7+0x30>)
 8001f0c:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <setTimer7+0x34>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	66666667 	.word	0x66666667
 8001f24:	20000118 	.word	0x20000118
 8001f28:	20000114 	.word	0x20000114

08001f2c <setTimer10>:

void setTimer10(int duration) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	timer10_counter = duration/TICK;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <setTimer10+0x2c>)
 8001f38:	fb82 1203 	smull	r1, r2, r2, r3
 8001f3c:	1092      	asrs	r2, r2, #2
 8001f3e:	17db      	asrs	r3, r3, #31
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	4a06      	ldr	r2, [pc, #24]	; (8001f5c <setTimer10+0x30>)
 8001f44:	6013      	str	r3, [r2, #0]
	timer10_flag = 0;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <setTimer10+0x34>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	66666667 	.word	0x66666667
 8001f5c:	20000120 	.word	0x20000120
 8001f60:	2000011c 	.word	0x2000011c

08001f64 <timerRun>:

void timerRun() {
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001f68:	4b41      	ldr	r3, [pc, #260]	; (8002070 <timerRun+0x10c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	dd0b      	ble.n	8001f88 <timerRun+0x24>
		timer1_counter--;
 8001f70:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <timerRun+0x10c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	4a3e      	ldr	r2, [pc, #248]	; (8002070 <timerRun+0x10c>)
 8001f78:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <timerRun+0x10c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	dc02      	bgt.n	8001f88 <timerRun+0x24>
			timer1_flag = 1;
 8001f82:	4b3c      	ldr	r3, [pc, #240]	; (8002074 <timerRun+0x110>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <timerRun+0x114>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	dd0b      	ble.n	8001fa8 <timerRun+0x44>
		timer2_counter--;
 8001f90:	4b39      	ldr	r3, [pc, #228]	; (8002078 <timerRun+0x114>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	4a38      	ldr	r2, [pc, #224]	; (8002078 <timerRun+0x114>)
 8001f98:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8001f9a:	4b37      	ldr	r3, [pc, #220]	; (8002078 <timerRun+0x114>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	dc02      	bgt.n	8001fa8 <timerRun+0x44>
			timer2_flag = 1;
 8001fa2:	4b36      	ldr	r3, [pc, #216]	; (800207c <timerRun+0x118>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8001fa8:	4b35      	ldr	r3, [pc, #212]	; (8002080 <timerRun+0x11c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	dd0b      	ble.n	8001fc8 <timerRun+0x64>
		timer3_counter--;
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <timerRun+0x11c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	4a32      	ldr	r2, [pc, #200]	; (8002080 <timerRun+0x11c>)
 8001fb8:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8001fba:	4b31      	ldr	r3, [pc, #196]	; (8002080 <timerRun+0x11c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	dc02      	bgt.n	8001fc8 <timerRun+0x64>
			timer3_flag = 1;
 8001fc2:	4b30      	ldr	r3, [pc, #192]	; (8002084 <timerRun+0x120>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0) {
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <timerRun+0x124>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	dd0b      	ble.n	8001fe8 <timerRun+0x84>
		timer4_counter--;
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <timerRun+0x124>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	4a2c      	ldr	r2, [pc, #176]	; (8002088 <timerRun+0x124>)
 8001fd8:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <timerRun+0x124>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	dc02      	bgt.n	8001fe8 <timerRun+0x84>
			timer4_flag = 1;
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <timerRun+0x128>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0) {
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <timerRun+0x12c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	dd0b      	ble.n	8002008 <timerRun+0xa4>
		timer5_counter--;
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <timerRun+0x12c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	4a26      	ldr	r2, [pc, #152]	; (8002090 <timerRun+0x12c>)
 8001ff8:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8001ffa:	4b25      	ldr	r3, [pc, #148]	; (8002090 <timerRun+0x12c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	dc02      	bgt.n	8002008 <timerRun+0xa4>
			timer5_flag = 1;
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <timerRun+0x130>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0) {
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <timerRun+0x134>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	dd0b      	ble.n	8002028 <timerRun+0xc4>
		timer6_counter--;
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <timerRun+0x134>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	3b01      	subs	r3, #1
 8002016:	4a20      	ldr	r2, [pc, #128]	; (8002098 <timerRun+0x134>)
 8002018:	6013      	str	r3, [r2, #0]
		if (timer6_counter <= 0) {
 800201a:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <timerRun+0x134>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	dc02      	bgt.n	8002028 <timerRun+0xc4>
			timer6_flag = 1;
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <timerRun+0x138>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0) {
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <timerRun+0x13c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	dd0b      	ble.n	8002048 <timerRun+0xe4>
		timer7_counter--;
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <timerRun+0x13c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3b01      	subs	r3, #1
 8002036:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <timerRun+0x13c>)
 8002038:	6013      	str	r3, [r2, #0]
		if (timer7_counter <= 0) {
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <timerRun+0x13c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	dc02      	bgt.n	8002048 <timerRun+0xe4>
			timer7_flag = 1;
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <timerRun+0x140>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer10_counter > 0) {
 8002048:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <timerRun+0x144>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	dd0b      	ble.n	8002068 <timerRun+0x104>
		timer7_counter--;
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <timerRun+0x13c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3b01      	subs	r3, #1
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <timerRun+0x13c>)
 8002058:	6013      	str	r3, [r2, #0]
		if (timer7_counter <= 0) {
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <timerRun+0x13c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	dc02      	bgt.n	8002068 <timerRun+0x104>
			timer7_flag = 1;
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <timerRun+0x140>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	200000e8 	.word	0x200000e8
 8002074:	200000e4 	.word	0x200000e4
 8002078:	200000f0 	.word	0x200000f0
 800207c:	200000ec 	.word	0x200000ec
 8002080:	200000f8 	.word	0x200000f8
 8002084:	200000f4 	.word	0x200000f4
 8002088:	20000100 	.word	0x20000100
 800208c:	200000fc 	.word	0x200000fc
 8002090:	20000108 	.word	0x20000108
 8002094:	20000104 	.word	0x20000104
 8002098:	20000110 	.word	0x20000110
 800209c:	2000010c 	.word	0x2000010c
 80020a0:	20000118 	.word	0x20000118
 80020a4:	20000114 	.word	0x20000114
 80020a8:	20000120 	.word	0x20000120

080020ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_MspInit+0x5c>)
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	4a14      	ldr	r2, [pc, #80]	; (8002108 <HAL_MspInit+0x5c>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6193      	str	r3, [r2, #24]
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_MspInit+0x5c>)
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_MspInit+0x5c>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <HAL_MspInit+0x5c>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	61d3      	str	r3, [r2, #28]
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_MspInit+0x5c>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_MspInit+0x60>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_MspInit+0x60>)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	40021000 	.word	0x40021000
 800210c:	40010000 	.word	0x40010000

08002110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d114      	bne.n	800214c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_TIM_Base_MspInit+0x68>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a14      	ldr	r2, [pc, #80]	; (8002178 <HAL_TIM_Base_MspInit+0x68>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_TIM_Base_MspInit+0x68>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	201c      	movs	r0, #28
 8002140:	f000 fa79 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002144:	201c      	movs	r0, #28
 8002146:	f000 fa92 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800214a:	e010      	b.n	800216e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_TIM_Base_MspInit+0x6c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10b      	bne.n	800216e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_TIM_Base_MspInit+0x68>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_TIM_Base_MspInit+0x68>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	61d3      	str	r3, [r2, #28]
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_TIM_Base_MspInit+0x68>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	40000400 	.word	0x40000400

08002180 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <HAL_TIM_MspPostInit+0x58>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d117      	bne.n	80021d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_TIM_MspPostInit+0x5c>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <HAL_TIM_MspPostInit+0x5c>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6193      	str	r3, [r2, #24]
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_TIM_MspPostInit+0x5c>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 80021b8:	2340      	movs	r3, #64	; 0x40
 80021ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 80021c4:	f107 0310 	add.w	r3, r7, #16
 80021c8:	4619      	mov	r1, r3
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <HAL_TIM_MspPostInit+0x60>)
 80021cc:	f000 fb1a 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010800 	.word	0x40010800

080021e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0310 	add.w	r3, r7, #16
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1f      	ldr	r2, [pc, #124]	; (800227c <HAL_UART_MspInit+0x98>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d137      	bne.n	8002274 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_UART_MspInit+0x9c>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <HAL_UART_MspInit+0x9c>)
 800220a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220e:	61d3      	str	r3, [r2, #28]
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_UART_MspInit+0x9c>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_UART_MspInit+0x9c>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a17      	ldr	r2, [pc, #92]	; (8002280 <HAL_UART_MspInit+0x9c>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_UART_MspInit+0x9c>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002234:	2304      	movs	r3, #4
 8002236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	4619      	mov	r1, r3
 8002246:	480f      	ldr	r0, [pc, #60]	; (8002284 <HAL_UART_MspInit+0xa0>)
 8002248:	f000 fadc 	bl	8002804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800224c:	2308      	movs	r3, #8
 800224e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	4619      	mov	r1, r3
 800225e:	4809      	ldr	r0, [pc, #36]	; (8002284 <HAL_UART_MspInit+0xa0>)
 8002260:	f000 fad0 	bl	8002804 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	2026      	movs	r0, #38	; 0x26
 800226a:	f000 f9e4 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800226e:	2026      	movs	r0, #38	; 0x26
 8002270:	f000 f9fd 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002274:	bf00      	nop
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40004400 	.word	0x40004400
 8002280:	40021000 	.word	0x40021000
 8002284:	40010800 	.word	0x40010800

08002288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800228c:	e7fe      	b.n	800228c <NMI_Handler+0x4>

0800228e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <HardFault_Handler+0x4>

08002294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <MemManage_Handler+0x4>

0800229a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <BusFault_Handler+0x4>

080022a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <UsageFault_Handler+0x4>

080022a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ce:	f000 f8bf 	bl	8002450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <TIM2_IRQHandler+0x10>)
 80022de:	f001 fa13 	bl	8003708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200001d8 	.word	0x200001d8

080022ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <USART2_IRQHandler+0x10>)
 80022f2:	f002 f8db 	bl	80044ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000220 	.word	0x20000220

08002300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <_sbrk+0x5c>)
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <_sbrk+0x60>)
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <_sbrk+0x64>)
 800231e:	4a12      	ldr	r2, [pc, #72]	; (8002368 <_sbrk+0x68>)
 8002320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	429a      	cmp	r2, r3
 800232e:	d207      	bcs.n	8002340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002330:	f002 fce4 	bl	8004cfc <__errno>
 8002334:	4603      	mov	r3, r0
 8002336:	220c      	movs	r2, #12
 8002338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	e009      	b.n	8002354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <_sbrk+0x64>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <_sbrk+0x64>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <_sbrk+0x64>)
 8002350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20005000 	.word	0x20005000
 8002360:	00000400 	.word	0x00000400
 8002364:	20000124 	.word	0x20000124
 8002368:	20000278 	.word	0x20000278

0800236c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002378:	480c      	ldr	r0, [pc, #48]	; (80023ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800237a:	490d      	ldr	r1, [pc, #52]	; (80023b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800237c:	4a0d      	ldr	r2, [pc, #52]	; (80023b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002380:	e002      	b.n	8002388 <LoopCopyDataInit>

08002382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002386:	3304      	adds	r3, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800238c:	d3f9      	bcc.n	8002382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002390:	4c0a      	ldr	r4, [pc, #40]	; (80023bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002394:	e001      	b.n	800239a <LoopFillZerobss>

08002396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002398:	3204      	adds	r2, #4

0800239a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800239c:	d3fb      	bcc.n	8002396 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800239e:	f7ff ffe5 	bl	800236c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023a2:	f002 fcb1 	bl	8004d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023a6:	f7ff fb27 	bl	80019f8 <main>
  bx lr
 80023aa:	4770      	bx	lr
  ldr r0, =_sdata
 80023ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80023b4:	0800565c 	.word	0x0800565c
  ldr r2, =_sbss
 80023b8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80023bc:	20000278 	.word	0x20000278

080023c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023c0:	e7fe      	b.n	80023c0 <ADC1_2_IRQHandler>
	...

080023c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <HAL_Init+0x28>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a07      	ldr	r2, [pc, #28]	; (80023ec <HAL_Init+0x28>)
 80023ce:	f043 0310 	orr.w	r3, r3, #16
 80023d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 f923 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023da:	200f      	movs	r0, #15
 80023dc:	f000 f808 	bl	80023f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e0:	f7ff fe64 	bl	80020ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40022000 	.word	0x40022000

080023f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_InitTick+0x54>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_InitTick+0x58>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002406:	fbb3 f3f1 	udiv	r3, r3, r1
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f93b 	bl	800268a <HAL_SYSTICK_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e00e      	b.n	800243c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b0f      	cmp	r3, #15
 8002422:	d80a      	bhi.n	800243a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002424:	2200      	movs	r2, #0
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	f04f 30ff 	mov.w	r0, #4294967295
 800242c:	f000 f903 	bl	8002636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002430:	4a06      	ldr	r2, [pc, #24]	; (800244c <HAL_InitTick+0x5c>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000024 	.word	0x20000024
 8002448:	2000002c 	.word	0x2000002c
 800244c:	20000028 	.word	0x20000028

08002450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_IncTick+0x1c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_IncTick+0x20>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4413      	add	r3, r2
 8002460:	4a03      	ldr	r2, [pc, #12]	; (8002470 <HAL_IncTick+0x20>)
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	2000002c 	.word	0x2000002c
 8002470:	20000264 	.word	0x20000264

08002474 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return uwTick;
 8002478:	4b02      	ldr	r3, [pc, #8]	; (8002484 <HAL_GetTick+0x10>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	20000264 	.word	0x20000264

08002488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ba:	4a04      	ldr	r2, [pc, #16]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60d3      	str	r3, [r2, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db0b      	blt.n	8002516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4906      	ldr	r1, [pc, #24]	; (8002520 <__NVIC_EnableIRQ+0x34>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2001      	movs	r0, #1
 800250e:	fa00 f202 	lsl.w	r2, r0, r2
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	e000e100 	.word	0xe000e100

08002524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	db0a      	blt.n	800254e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	490c      	ldr	r1, [pc, #48]	; (8002570 <__NVIC_SetPriority+0x4c>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	0112      	lsls	r2, r2, #4
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	440b      	add	r3, r1
 8002548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800254c:	e00a      	b.n	8002564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4908      	ldr	r1, [pc, #32]	; (8002574 <__NVIC_SetPriority+0x50>)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	3b04      	subs	r3, #4
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	440b      	add	r3, r1
 8002562:	761a      	strb	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	2b04      	cmp	r3, #4
 8002594:	bf28      	it	cs
 8002596:	2304      	movcs	r3, #4
 8002598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3304      	adds	r3, #4
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d902      	bls.n	80025a8 <NVIC_EncodePriority+0x30>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3b03      	subs	r3, #3
 80025a6:	e000      	b.n	80025aa <NVIC_EncodePriority+0x32>
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	401a      	ands	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ca:	43d9      	mvns	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	4313      	orrs	r3, r2
         );
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f7ff ff90 	bl	8002524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff2d 	bl	8002488 <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff42 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff90 	bl	8002578 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5f 	bl	8002524 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff35 	bl	80024ec <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ffa2 	bl	80025dc <SysTick_Config>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d008      	beq.n	80026ca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2204      	movs	r2, #4
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e020      	b.n	800270c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 020e 	bic.w	r2, r2, #14
 80026d8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f202 	lsl.w	r2, r1, r2
 80026f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800270a:	7bfb      	ldrb	r3, [r7, #15]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
	...

08002718 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800272a:	2b02      	cmp	r3, #2
 800272c:	d005      	beq.n	800273a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2204      	movs	r2, #4
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e051      	b.n	80027de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 020e 	bic.w	r2, r2, #14
 8002748:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <HAL_DMA_Abort_IT+0xd0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d029      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xa0>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a20      	ldr	r2, [pc, #128]	; (80027ec <HAL_DMA_Abort_IT+0xd4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d022      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x9c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_DMA_Abort_IT+0xd8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d01a      	beq.n	80027ae <HAL_DMA_Abort_IT+0x96>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <HAL_DMA_Abort_IT+0xdc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d012      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x90>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <HAL_DMA_Abort_IT+0xe0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00a      	beq.n	80027a2 <HAL_DMA_Abort_IT+0x8a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <HAL_DMA_Abort_IT+0xe4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d102      	bne.n	800279c <HAL_DMA_Abort_IT+0x84>
 8002796:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800279a:	e00e      	b.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 800279c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a0:	e00b      	b.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 80027a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a6:	e008      	b.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 80027a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ac:	e005      	b.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 80027ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027b2:	e002      	b.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 80027b4:	2310      	movs	r3, #16
 80027b6:	e000      	b.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 80027b8:	2301      	movs	r3, #1
 80027ba:	4a11      	ldr	r2, [pc, #68]	; (8002800 <HAL_DMA_Abort_IT+0xe8>)
 80027bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
    } 
  }
  return status;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40020008 	.word	0x40020008
 80027ec:	4002001c 	.word	0x4002001c
 80027f0:	40020030 	.word	0x40020030
 80027f4:	40020044 	.word	0x40020044
 80027f8:	40020058 	.word	0x40020058
 80027fc:	4002006c 	.word	0x4002006c
 8002800:	40020000 	.word	0x40020000

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b08b      	sub	sp, #44	; 0x2c
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002816:	e169      	b.n	8002aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002818:	2201      	movs	r2, #1
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	429a      	cmp	r2, r3
 8002832:	f040 8158 	bne.w	8002ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4a9a      	ldr	r2, [pc, #616]	; (8002aa4 <HAL_GPIO_Init+0x2a0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d05e      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002840:	4a98      	ldr	r2, [pc, #608]	; (8002aa4 <HAL_GPIO_Init+0x2a0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d875      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 8002846:	4a98      	ldr	r2, [pc, #608]	; (8002aa8 <HAL_GPIO_Init+0x2a4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d058      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 800284c:	4a96      	ldr	r2, [pc, #600]	; (8002aa8 <HAL_GPIO_Init+0x2a4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d86f      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 8002852:	4a96      	ldr	r2, [pc, #600]	; (8002aac <HAL_GPIO_Init+0x2a8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d052      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002858:	4a94      	ldr	r2, [pc, #592]	; (8002aac <HAL_GPIO_Init+0x2a8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d869      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 800285e:	4a94      	ldr	r2, [pc, #592]	; (8002ab0 <HAL_GPIO_Init+0x2ac>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d04c      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002864:	4a92      	ldr	r2, [pc, #584]	; (8002ab0 <HAL_GPIO_Init+0x2ac>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d863      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 800286a:	4a92      	ldr	r2, [pc, #584]	; (8002ab4 <HAL_GPIO_Init+0x2b0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d046      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002870:	4a90      	ldr	r2, [pc, #576]	; (8002ab4 <HAL_GPIO_Init+0x2b0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d85d      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 8002876:	2b12      	cmp	r3, #18
 8002878:	d82a      	bhi.n	80028d0 <HAL_GPIO_Init+0xcc>
 800287a:	2b12      	cmp	r3, #18
 800287c:	d859      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 800287e:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <HAL_GPIO_Init+0x80>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	080028ff 	.word	0x080028ff
 8002888:	080028d9 	.word	0x080028d9
 800288c:	080028eb 	.word	0x080028eb
 8002890:	0800292d 	.word	0x0800292d
 8002894:	08002933 	.word	0x08002933
 8002898:	08002933 	.word	0x08002933
 800289c:	08002933 	.word	0x08002933
 80028a0:	08002933 	.word	0x08002933
 80028a4:	08002933 	.word	0x08002933
 80028a8:	08002933 	.word	0x08002933
 80028ac:	08002933 	.word	0x08002933
 80028b0:	08002933 	.word	0x08002933
 80028b4:	08002933 	.word	0x08002933
 80028b8:	08002933 	.word	0x08002933
 80028bc:	08002933 	.word	0x08002933
 80028c0:	08002933 	.word	0x08002933
 80028c4:	08002933 	.word	0x08002933
 80028c8:	080028e1 	.word	0x080028e1
 80028cc:	080028f5 	.word	0x080028f5
 80028d0:	4a79      	ldr	r2, [pc, #484]	; (8002ab8 <HAL_GPIO_Init+0x2b4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028d6:	e02c      	b.n	8002932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	623b      	str	r3, [r7, #32]
          break;
 80028de:	e029      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	3304      	adds	r3, #4
 80028e6:	623b      	str	r3, [r7, #32]
          break;
 80028e8:	e024      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	3308      	adds	r3, #8
 80028f0:	623b      	str	r3, [r7, #32]
          break;
 80028f2:	e01f      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	330c      	adds	r3, #12
 80028fa:	623b      	str	r3, [r7, #32]
          break;
 80028fc:	e01a      	b.n	8002934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002906:	2304      	movs	r3, #4
 8002908:	623b      	str	r3, [r7, #32]
          break;
 800290a:	e013      	b.n	8002934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002914:	2308      	movs	r3, #8
 8002916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	611a      	str	r2, [r3, #16]
          break;
 800291e:	e009      	b.n	8002934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002920:	2308      	movs	r3, #8
 8002922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	615a      	str	r2, [r3, #20]
          break;
 800292a:	e003      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
          break;
 8002930:	e000      	b.n	8002934 <HAL_GPIO_Init+0x130>
          break;
 8002932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2bff      	cmp	r3, #255	; 0xff
 8002938:	d801      	bhi.n	800293e <HAL_GPIO_Init+0x13a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	e001      	b.n	8002942 <HAL_GPIO_Init+0x13e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2bff      	cmp	r3, #255	; 0xff
 8002948:	d802      	bhi.n	8002950 <HAL_GPIO_Init+0x14c>
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	e002      	b.n	8002956 <HAL_GPIO_Init+0x152>
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	3b08      	subs	r3, #8
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	210f      	movs	r1, #15
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	401a      	ands	r2, r3
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	431a      	orrs	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80b1 	beq.w	8002ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002984:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_GPIO_Init+0x2b8>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_GPIO_Init+0x2b8>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6193      	str	r3, [r2, #24]
 8002990:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_GPIO_Init+0x2b8>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800299c:	4a48      	ldr	r2, [pc, #288]	; (8002ac0 <HAL_GPIO_Init+0x2bc>)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	3302      	adds	r3, #2
 80029a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	220f      	movs	r2, #15
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a40      	ldr	r2, [pc, #256]	; (8002ac4 <HAL_GPIO_Init+0x2c0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d013      	beq.n	80029f0 <HAL_GPIO_Init+0x1ec>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a3f      	ldr	r2, [pc, #252]	; (8002ac8 <HAL_GPIO_Init+0x2c4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00d      	beq.n	80029ec <HAL_GPIO_Init+0x1e8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a3e      	ldr	r2, [pc, #248]	; (8002acc <HAL_GPIO_Init+0x2c8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d007      	beq.n	80029e8 <HAL_GPIO_Init+0x1e4>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a3d      	ldr	r2, [pc, #244]	; (8002ad0 <HAL_GPIO_Init+0x2cc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_GPIO_Init+0x1e0>
 80029e0:	2303      	movs	r3, #3
 80029e2:	e006      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029e4:	2304      	movs	r3, #4
 80029e6:	e004      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029f0:	2300      	movs	r3, #0
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	f002 0203 	and.w	r2, r2, #3
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	4093      	lsls	r3, r2
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a02:	492f      	ldr	r1, [pc, #188]	; (8002ac0 <HAL_GPIO_Init+0x2bc>)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d006      	beq.n	8002a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	492c      	ldr	r1, [pc, #176]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	e006      	b.n	8002a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	4928      	ldr	r1, [pc, #160]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d006      	beq.n	8002a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a44:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	4922      	ldr	r1, [pc, #136]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
 8002a50:	e006      	b.n	8002a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	491e      	ldr	r1, [pc, #120]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d006      	beq.n	8002a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	4918      	ldr	r1, [pc, #96]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4914      	ldr	r1, [pc, #80]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d021      	beq.n	8002ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60cb      	str	r3, [r1, #12]
 8002aa0:	e021      	b.n	8002ae6 <HAL_GPIO_Init+0x2e2>
 8002aa2:	bf00      	nop
 8002aa4:	10320000 	.word	0x10320000
 8002aa8:	10310000 	.word	0x10310000
 8002aac:	10220000 	.word	0x10220000
 8002ab0:	10210000 	.word	0x10210000
 8002ab4:	10120000 	.word	0x10120000
 8002ab8:	10110000 	.word	0x10110000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40010000 	.word	0x40010000
 8002ac4:	40010800 	.word	0x40010800
 8002ac8:	40010c00 	.word	0x40010c00
 8002acc:	40011000 	.word	0x40011000
 8002ad0:	40011400 	.word	0x40011400
 8002ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_GPIO_Init+0x304>)
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	4909      	ldr	r1, [pc, #36]	; (8002b08 <HAL_GPIO_Init+0x304>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	3301      	adds	r3, #1
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f47f ae8e 	bne.w	8002818 <HAL_GPIO_Init+0x14>
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	372c      	adds	r7, #44	; 0x2c
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	40010400 	.word	0x40010400

08002b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	887b      	ldrh	r3, [r7, #2]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	e001      	b.n	8002b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	807b      	strh	r3, [r7, #2]
 8002b46:	4613      	mov	r3, r2
 8002b48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b4a:	787b      	ldrb	r3, [r7, #1]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b50:	887a      	ldrh	r2, [r7, #2]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b56:	e003      	b.n	8002b60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	041a      	lsls	r2, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b7c:	887a      	ldrh	r2, [r7, #2]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	041a      	lsls	r2, r3, #16
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	400b      	ands	r3, r1
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	611a      	str	r2, [r3, #16]
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e26c      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8087 	beq.w	8002cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bbc:	4b92      	ldr	r3, [pc, #584]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d00c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc8:	4b8f      	ldr	r3, [pc, #572]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d112      	bne.n	8002bfa <HAL_RCC_OscConfig+0x5e>
 8002bd4:	4b8c      	ldr	r3, [pc, #560]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be0:	d10b      	bne.n	8002bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be2:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d06c      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x12c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d168      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e246      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x76>
 8002c04:	4b80      	ldr	r3, [pc, #512]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7f      	ldr	r2, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e02e      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x98>
 8002c1a:	4b7b      	ldr	r3, [pc, #492]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7a      	ldr	r2, [pc, #488]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b78      	ldr	r3, [pc, #480]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a77      	ldr	r2, [pc, #476]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e01d      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0xbc>
 8002c3e:	4b72      	ldr	r3, [pc, #456]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a71      	ldr	r2, [pc, #452]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a6e      	ldr	r2, [pc, #440]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c58:	4b6b      	ldr	r3, [pc, #428]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a6a      	ldr	r2, [pc, #424]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a67      	ldr	r2, [pc, #412]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7ff fbfc 	bl	8002474 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7ff fbf8 	bl	8002474 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1fa      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b5d      	ldr	r3, [pc, #372]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0xe4>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7ff fbe8 	bl	8002474 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7ff fbe4 	bl	8002474 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e1e6      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x10c>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d063      	beq.n	8002d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd6:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ce2:	4b49      	ldr	r3, [pc, #292]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d11c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x18c>
 8002cee:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d116      	bne.n	8002d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfa:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x176>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e1ba      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b3d      	ldr	r3, [pc, #244]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4939      	ldr	r1, [pc, #228]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	e03a      	b.n	8002d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d30:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7ff fb9d 	bl	8002474 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3e:	f7ff fb99 	bl	8002474 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e19b      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4927      	ldr	r1, [pc, #156]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]
 8002d70:	e015      	b.n	8002d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7ff fb7c 	bl	8002474 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d80:	f7ff fb78 	bl	8002474 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e17a      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d03a      	beq.n	8002e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d019      	beq.n	8002de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_RCC_OscConfig+0x274>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db8:	f7ff fb5c 	bl	8002474 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc0:	f7ff fb58 	bl	8002474 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e15a      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dde:	2001      	movs	r0, #1
 8002de0:	f000 fad8 	bl	8003394 <RCC_Delay>
 8002de4:	e01c      	b.n	8002e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCC_OscConfig+0x274>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7ff fb42 	bl	8002474 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df2:	e00f      	b.n	8002e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df4:	f7ff fb3e 	bl	8002474 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d908      	bls.n	8002e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e140      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	42420000 	.word	0x42420000
 8002e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b9e      	ldr	r3, [pc, #632]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e9      	bne.n	8002df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a6 	beq.w	8002f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b97      	ldr	r3, [pc, #604]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10d      	bne.n	8002e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b94      	ldr	r3, [pc, #592]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4a93      	ldr	r2, [pc, #588]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	61d3      	str	r3, [r2, #28]
 8002e4a:	4b91      	ldr	r3, [pc, #580]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	4b8e      	ldr	r3, [pc, #568]	; (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d118      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e66:	4b8b      	ldr	r3, [pc, #556]	; (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a8a      	ldr	r2, [pc, #552]	; (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e72:	f7ff faff 	bl	8002474 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7ff fafb 	bl	8002474 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b64      	cmp	r3, #100	; 0x64
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e0fd      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	4b81      	ldr	r3, [pc, #516]	; (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x312>
 8002ea0:	4b7b      	ldr	r3, [pc, #492]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4a7a      	ldr	r2, [pc, #488]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6213      	str	r3, [r2, #32]
 8002eac:	e02d      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x334>
 8002eb6:	4b76      	ldr	r3, [pc, #472]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4a75      	ldr	r2, [pc, #468]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6213      	str	r3, [r2, #32]
 8002ec2:	4b73      	ldr	r3, [pc, #460]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a72      	ldr	r2, [pc, #456]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6213      	str	r3, [r2, #32]
 8002ece:	e01c      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x356>
 8002ed8:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a6c      	ldr	r2, [pc, #432]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	4b6a      	ldr	r3, [pc, #424]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a69      	ldr	r2, [pc, #420]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	e00b      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002ef2:	4b67      	ldr	r3, [pc, #412]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a66      	ldr	r2, [pc, #408]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6213      	str	r3, [r2, #32]
 8002efe:	4b64      	ldr	r3, [pc, #400]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a63      	ldr	r2, [pc, #396]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d015      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7ff faaf 	bl	8002474 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7ff faab 	bl	8002474 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0ab      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	4b57      	ldr	r3, [pc, #348]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ee      	beq.n	8002f1a <HAL_RCC_OscConfig+0x37e>
 8002f3c:	e014      	b.n	8002f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7ff fa99 	bl	8002474 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7ff fa95 	bl	8002474 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e095      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	4b4c      	ldr	r3, [pc, #304]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ee      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4b48      	ldr	r3, [pc, #288]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4a47      	ldr	r2, [pc, #284]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8081 	beq.w	8003086 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f84:	4b42      	ldr	r3, [pc, #264]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d061      	beq.n	8003054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d146      	bne.n	8003026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f98:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <HAL_RCC_OscConfig+0x4fc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7ff fa69 	bl	8002474 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7ff fa65 	bl	8002474 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e067      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb8:	4b35      	ldr	r3, [pc, #212]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fcc:	d108      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	492d      	ldr	r1, [pc, #180]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a19      	ldr	r1, [r3, #32]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	4927      	ldr	r1, [pc, #156]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_OscConfig+0x4fc>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7ff fa39 	bl	8002474 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003006:	f7ff fa35 	bl	8002474 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e037      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x46a>
 8003024:	e02f      	b.n	8003086 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <HAL_RCC_OscConfig+0x4fc>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7ff fa22 	bl	8002474 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7ff fa1e 	bl	8002474 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e020      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x498>
 8003052:	e018      	b.n	8003086 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e013      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	429a      	cmp	r2, r3
 8003072:	d106      	bne.n	8003082 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	40007000 	.word	0x40007000
 8003098:	42420060 	.word	0x42420060

0800309c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0d0      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b6a      	ldr	r3, [pc, #424]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d910      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b67      	ldr	r3, [pc, #412]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0207 	bic.w	r2, r3, #7
 80030c6:	4965      	ldr	r1, [pc, #404]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b63      	ldr	r3, [pc, #396]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b8      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f8:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a58      	ldr	r2, [pc, #352]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a52      	ldr	r2, [pc, #328]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800311a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b50      	ldr	r3, [pc, #320]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	494d      	ldr	r1, [pc, #308]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d040      	beq.n	80031bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d115      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b41      	ldr	r3, [pc, #260]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e073      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e06b      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4936      	ldr	r1, [pc, #216]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800318c:	f7ff f972 	bl	8002474 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	e00a      	b.n	80031aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f7ff f96e 	bl	8002474 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e053      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 020c 	and.w	r2, r3, #12
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1eb      	bne.n	8003194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d210      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	4922      	ldr	r1, [pc, #136]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e032      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4916      	ldr	r1, [pc, #88]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	490e      	ldr	r1, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800322a:	f000 f821 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490a      	ldr	r1, [pc, #40]	; (8003264 <HAL_RCC_ClockConfig+0x1c8>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1cc>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x1d0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff f8d0 	bl	80023f0 <HAL_InitTick>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40022000 	.word	0x40022000
 8003260:	40021000 	.word	0x40021000
 8003264:	08005608 	.word	0x08005608
 8003268:	20000024 	.word	0x20000024
 800326c:	20000028 	.word	0x20000028

08003270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	b490      	push	{r4, r7}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003276:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003278:	1d3c      	adds	r4, r7, #4
 800327a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800327c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003280:	f240 2301 	movw	r3, #513	; 0x201
 8003284:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	2300      	movs	r3, #0
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	2300      	movs	r3, #0
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800329a:	4b22      	ldr	r3, [pc, #136]	; (8003324 <HAL_RCC_GetSysClockFreq+0xb4>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d002      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x40>
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_GetSysClockFreq+0x46>
 80032ae:	e02d      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032b0:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032b2:	623b      	str	r3, [r7, #32]
      break;
 80032b4:	e02d      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	0c9b      	lsrs	r3, r3, #18
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032c2:	4413      	add	r3, r2
 80032c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d013      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	0c5b      	lsrs	r3, r3, #17
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032e2:	4413      	add	r3, r2
 80032e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	4a0e      	ldr	r2, [pc, #56]	; (8003328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ee:	fb02 f203 	mul.w	r2, r2, r3
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	e004      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	4a0b      	ldr	r2, [pc, #44]	; (800332c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	623b      	str	r3, [r7, #32]
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800330e:	623b      	str	r3, [r7, #32]
      break;
 8003310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003312:	6a3b      	ldr	r3, [r7, #32]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3728      	adds	r7, #40	; 0x28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc90      	pop	{r4, r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	080055f8 	.word	0x080055f8
 8003324:	40021000 	.word	0x40021000
 8003328:	007a1200 	.word	0x007a1200
 800332c:	003d0900 	.word	0x003d0900

08003330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <HAL_RCC_GetHCLKFreq+0x10>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	20000024 	.word	0x20000024

08003344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003348:	f7ff fff2 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	08005618 	.word	0x08005618

0800336c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003370:	f7ff ffde 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	0adb      	lsrs	r3, r3, #11
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000
 8003390:	08005618 	.word	0x08005618

08003394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <RCC_Delay+0x34>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <RCC_Delay+0x38>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	0a5b      	lsrs	r3, r3, #9
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033b0:	bf00      	nop
  }
  while (Delay --);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1e5a      	subs	r2, r3, #1
 80033b6:	60fa      	str	r2, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f9      	bne.n	80033b0 <RCC_Delay+0x1c>
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	20000024 	.word	0x20000024
 80033cc:	10624dd3 	.word	0x10624dd3

080033d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e041      	b.n	8003466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fe8a 	bl	8002110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f000 fc28 	bl	8003c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d001      	beq.n	8003488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e03a      	b.n	80034fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a18      	ldr	r2, [pc, #96]	; (8003508 <HAL_TIM_Base_Start_IT+0x98>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00e      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x58>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d009      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x58>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <HAL_TIM_Base_Start_IT+0x9c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x58>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a13      	ldr	r2, [pc, #76]	; (8003510 <HAL_TIM_Base_Start_IT+0xa0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d111      	bne.n	80034ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d010      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	e007      	b.n	80034fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40000400 	.word	0x40000400
 8003510:	40000800 	.word	0x40000800

08003514 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e041      	b.n	80035aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f839 	bl	80035b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	4619      	mov	r1, r3
 8003552:	4610      	mov	r0, r2
 8003554:	f000 fb86 	bl	8003c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <HAL_TIM_PWM_Start+0x24>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e022      	b.n	800362e <HAL_TIM_PWM_Start+0x6a>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d109      	bne.n	8003602 <HAL_TIM_PWM_Start+0x3e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	e015      	b.n	800362e <HAL_TIM_PWM_Start+0x6a>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d109      	bne.n	800361c <HAL_TIM_PWM_Start+0x58>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	e008      	b.n	800362e <HAL_TIM_PWM_Start+0x6a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	bf14      	ite	ne
 8003628:	2301      	movne	r3, #1
 800362a:	2300      	moveq	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e05e      	b.n	80036f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d104      	bne.n	8003646 <HAL_TIM_PWM_Start+0x82>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003644:	e013      	b.n	800366e <HAL_TIM_PWM_Start+0xaa>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d104      	bne.n	8003656 <HAL_TIM_PWM_Start+0x92>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003654:	e00b      	b.n	800366e <HAL_TIM_PWM_Start+0xaa>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d104      	bne.n	8003666 <HAL_TIM_PWM_Start+0xa2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003664:	e003      	b.n	800366e <HAL_TIM_PWM_Start+0xaa>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2201      	movs	r2, #1
 8003674:	6839      	ldr	r1, [r7, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fd74 	bl	8004164 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_TIM_PWM_Start+0x138>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d107      	bne.n	8003696 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a18      	ldr	r2, [pc, #96]	; (80036fc <HAL_TIM_PWM_Start+0x138>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_TIM_PWM_Start+0xfa>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a8:	d009      	beq.n	80036be <HAL_TIM_PWM_Start+0xfa>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a14      	ldr	r2, [pc, #80]	; (8003700 <HAL_TIM_PWM_Start+0x13c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_TIM_PWM_Start+0xfa>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a12      	ldr	r2, [pc, #72]	; (8003704 <HAL_TIM_PWM_Start+0x140>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d111      	bne.n	80036e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b06      	cmp	r3, #6
 80036ce:	d010      	beq.n	80036f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e0:	e007      	b.n	80036f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800

08003708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d122      	bne.n	8003764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b02      	cmp	r3, #2
 800372a:	d11b      	bne.n	8003764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0202 	mvn.w	r2, #2
 8003734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fa6f 	bl	8003c2e <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fa62 	bl	8003c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fa71 	bl	8003c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b04      	cmp	r3, #4
 8003770:	d122      	bne.n	80037b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b04      	cmp	r3, #4
 800377e:	d11b      	bne.n	80037b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0204 	mvn.w	r2, #4
 8003788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2202      	movs	r2, #2
 800378e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fa45 	bl	8003c2e <HAL_TIM_IC_CaptureCallback>
 80037a4:	e005      	b.n	80037b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fa38 	bl	8003c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fa47 	bl	8003c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d122      	bne.n	800380c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d11b      	bne.n	800380c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0208 	mvn.w	r2, #8
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2204      	movs	r2, #4
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fa1b 	bl	8003c2e <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fa0e 	bl	8003c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fa1d 	bl	8003c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b10      	cmp	r3, #16
 8003818:	d122      	bne.n	8003860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b10      	cmp	r3, #16
 8003826:	d11b      	bne.n	8003860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0210 	mvn.w	r2, #16
 8003830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2208      	movs	r2, #8
 8003836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f9f1 	bl	8003c2e <HAL_TIM_IC_CaptureCallback>
 800384c:	e005      	b.n	800385a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f9e4 	bl	8003c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f9f3 	bl	8003c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d10e      	bne.n	800388c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d107      	bne.n	800388c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0201 	mvn.w	r2, #1
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe fa7a 	bl	8001d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	2b80      	cmp	r3, #128	; 0x80
 8003898:	d10e      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	2b80      	cmp	r3, #128	; 0x80
 80038a6:	d107      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fce1 	bl	800427a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	d10e      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d107      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9b7 	bl	8003c52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d10e      	bne.n	8003910 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d107      	bne.n	8003910 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0220 	mvn.w	r2, #32
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fcac 	bl	8004268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800392e:	2302      	movs	r3, #2
 8003930:	e0ac      	b.n	8003a8c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b0c      	cmp	r3, #12
 800393e:	f200 809f 	bhi.w	8003a80 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	0800397d 	.word	0x0800397d
 800394c:	08003a81 	.word	0x08003a81
 8003950:	08003a81 	.word	0x08003a81
 8003954:	08003a81 	.word	0x08003a81
 8003958:	080039bd 	.word	0x080039bd
 800395c:	08003a81 	.word	0x08003a81
 8003960:	08003a81 	.word	0x08003a81
 8003964:	08003a81 	.word	0x08003a81
 8003968:	080039ff 	.word	0x080039ff
 800396c:	08003a81 	.word	0x08003a81
 8003970:	08003a81 	.word	0x08003a81
 8003974:	08003a81 	.word	0x08003a81
 8003978:	08003a3f 	.word	0x08003a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f9d0 	bl	8003d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6999      	ldr	r1, [r3, #24]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	619a      	str	r2, [r3, #24]
      break;
 80039ba:	e062      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fa16 	bl	8003df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6999      	ldr	r1, [r3, #24]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	619a      	str	r2, [r3, #24]
      break;
 80039fc:	e041      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fa5f 	bl	8003ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0208 	orr.w	r2, r2, #8
 8003a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0204 	bic.w	r2, r2, #4
 8003a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69d9      	ldr	r1, [r3, #28]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	61da      	str	r2, [r3, #28]
      break;
 8003a3c:	e021      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 faa9 	bl	8003f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69d9      	ldr	r1, [r3, #28]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	021a      	lsls	r2, r3, #8
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	61da      	str	r2, [r3, #28]
      break;
 8003a7e:	e000      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003a80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_TIM_ConfigClockSource+0x18>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e0b3      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x180>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003aca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ad2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae4:	d03e      	beq.n	8003b64 <HAL_TIM_ConfigClockSource+0xd0>
 8003ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aea:	f200 8087 	bhi.w	8003bfc <HAL_TIM_ConfigClockSource+0x168>
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	f000 8085 	beq.w	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	d87f      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x168>
 8003afc:	2b70      	cmp	r3, #112	; 0x70
 8003afe:	d01a      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0xa2>
 8003b00:	2b70      	cmp	r3, #112	; 0x70
 8003b02:	d87b      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x168>
 8003b04:	2b60      	cmp	r3, #96	; 0x60
 8003b06:	d050      	beq.n	8003baa <HAL_TIM_ConfigClockSource+0x116>
 8003b08:	2b60      	cmp	r3, #96	; 0x60
 8003b0a:	d877      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x168>
 8003b0c:	2b50      	cmp	r3, #80	; 0x50
 8003b0e:	d03c      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0xf6>
 8003b10:	2b50      	cmp	r3, #80	; 0x50
 8003b12:	d873      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x168>
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d058      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x136>
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d86f      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x168>
 8003b1c:	2b30      	cmp	r3, #48	; 0x30
 8003b1e:	d064      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x156>
 8003b20:	2b30      	cmp	r3, #48	; 0x30
 8003b22:	d86b      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x168>
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d060      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x156>
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d867      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x168>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d05c      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x156>
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d05a      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b34:	e062      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6899      	ldr	r1, [r3, #8]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f000 faee 	bl	8004126 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	609a      	str	r2, [r3, #8]
      break;
 8003b62:	e04e      	b.n	8003c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	6899      	ldr	r1, [r3, #8]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f000 fad7 	bl	8004126 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b86:	609a      	str	r2, [r3, #8]
      break;
 8003b88:	e03b      	b.n	8003c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6859      	ldr	r1, [r3, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	461a      	mov	r2, r3
 8003b98:	f000 fa4e 	bl	8004038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2150      	movs	r1, #80	; 0x50
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 faa5 	bl	80040f2 <TIM_ITRx_SetConfig>
      break;
 8003ba8:	e02b      	b.n	8003c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6859      	ldr	r1, [r3, #4]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f000 fa6c 	bl	8004094 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2160      	movs	r1, #96	; 0x60
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fa95 	bl	80040f2 <TIM_ITRx_SetConfig>
      break;
 8003bc8:	e01b      	b.n	8003c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	6859      	ldr	r1, [r3, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f000 fa2e 	bl	8004038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2140      	movs	r1, #64	; 0x40
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fa85 	bl	80040f2 <TIM_ITRx_SetConfig>
      break;
 8003be8:	e00b      	b.n	8003c02 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f000 fa7c 	bl	80040f2 <TIM_ITRx_SetConfig>
        break;
 8003bfa:	e002      	b.n	8003c02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bfc:	bf00      	nop
 8003bfe:	e000      	b.n	8003c02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr

08003c2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a29      	ldr	r2, [pc, #164]	; (8003d1c <TIM_Base_SetConfig+0xb8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00b      	beq.n	8003c94 <TIM_Base_SetConfig+0x30>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c82:	d007      	beq.n	8003c94 <TIM_Base_SetConfig+0x30>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <TIM_Base_SetConfig+0xbc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_Base_SetConfig+0x30>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a25      	ldr	r2, [pc, #148]	; (8003d24 <TIM_Base_SetConfig+0xc0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d108      	bne.n	8003ca6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <TIM_Base_SetConfig+0xb8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00b      	beq.n	8003cc6 <TIM_Base_SetConfig+0x62>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb4:	d007      	beq.n	8003cc6 <TIM_Base_SetConfig+0x62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a19      	ldr	r2, [pc, #100]	; (8003d20 <TIM_Base_SetConfig+0xbc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_Base_SetConfig+0x62>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a18      	ldr	r2, [pc, #96]	; (8003d24 <TIM_Base_SetConfig+0xc0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d108      	bne.n	8003cd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <TIM_Base_SetConfig+0xb8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d103      	bne.n	8003d0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	615a      	str	r2, [r3, #20]
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	40012c00 	.word	0x40012c00
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40000800 	.word	0x40000800

08003d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 0302 	bic.w	r3, r3, #2
 8003d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a1c      	ldr	r2, [pc, #112]	; (8003df0 <TIM_OC1_SetConfig+0xc8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d10c      	bne.n	8003d9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f023 0308 	bic.w	r3, r3, #8
 8003d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f023 0304 	bic.w	r3, r3, #4
 8003d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <TIM_OC1_SetConfig+0xc8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d111      	bne.n	8003dca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	621a      	str	r2, [r3, #32]
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40012c00 	.word	0x40012c00

08003df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f023 0210 	bic.w	r2, r3, #16
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 0320 	bic.w	r3, r3, #32
 8003e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <TIM_OC2_SetConfig+0xd0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d10d      	bne.n	8003e70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <TIM_OC2_SetConfig+0xd0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d113      	bne.n	8003ea0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	40012c00 	.word	0x40012c00

08003ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0303 	bic.w	r3, r3, #3
 8003efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <TIM_OC3_SetConfig+0xd0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10d      	bne.n	8003f42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a14      	ldr	r2, [pc, #80]	; (8003f98 <TIM_OC3_SetConfig+0xd0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d113      	bne.n	8003f72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40012c00 	.word	0x40012c00

08003f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	031b      	lsls	r3, r3, #12
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a0f      	ldr	r2, [pc, #60]	; (8004034 <TIM_OC4_SetConfig+0x98>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d109      	bne.n	8004010 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004002:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	019b      	lsls	r3, r3, #6
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	40012c00 	.word	0x40012c00

08004038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f023 0201 	bic.w	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 030a 	bic.w	r3, r3, #10
 8004074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f023 0210 	bic.w	r2, r3, #16
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	031b      	lsls	r3, r3, #12
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	621a      	str	r2, [r3, #32]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	f043 0307 	orr.w	r3, r3, #7
 8004114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	609a      	str	r2, [r3, #8]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr

08004126 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004126:	b480      	push	{r7}
 8004128:	b087      	sub	sp, #28
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004140:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	021a      	lsls	r2, r3, #8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	431a      	orrs	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4313      	orrs	r3, r2
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	609a      	str	r2, [r3, #8]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2201      	movs	r2, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1a      	ldr	r2, [r3, #32]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	43db      	mvns	r3, r3
 8004186:	401a      	ands	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	431a      	orrs	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e046      	b.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a16      	ldr	r2, [pc, #88]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004210:	d009      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a10      	ldr	r2, [pc, #64]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d10c      	bne.n	8004240 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800422c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	4313      	orrs	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40000400 	.word	0x40000400
 8004264:	40000800 	.word	0x40000800

08004268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e03f      	b.n	800431e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fd ff96 	bl	80021e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2224      	movs	r2, #36	; 0x24
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fc85 	bl	8004be0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004304:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b08a      	sub	sp, #40	; 0x28
 800432a:	af02      	add	r7, sp, #8
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	4613      	mov	r3, r2
 8004334:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b20      	cmp	r3, #32
 8004344:	d17c      	bne.n	8004440 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_UART_Transmit+0x2c>
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e075      	b.n	8004442 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_UART_Transmit+0x3e>
 8004360:	2302      	movs	r3, #2
 8004362:	e06e      	b.n	8004442 <HAL_UART_Transmit+0x11c>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2221      	movs	r2, #33	; 0x21
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800437a:	f7fe f87b 	bl	8002474 <HAL_GetTick>
 800437e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	88fa      	ldrh	r2, [r7, #6]
 8004384:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	88fa      	ldrh	r2, [r7, #6]
 800438a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004394:	d108      	bne.n	80043a8 <HAL_UART_Transmit+0x82>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d104      	bne.n	80043a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	e003      	b.n	80043b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043b8:	e02a      	b.n	8004410 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2200      	movs	r2, #0
 80043c2:	2180      	movs	r1, #128	; 0x80
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 fa38 	bl	800483a <UART_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e036      	b.n	8004442 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	3302      	adds	r3, #2
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	e007      	b.n	8004402 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	781a      	ldrb	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	3301      	adds	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1cf      	bne.n	80043ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2200      	movs	r2, #0
 8004422:	2140      	movs	r1, #64	; 0x40
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 fa08 	bl	800483a <UART_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e006      	b.n	8004442 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004440:	2302      	movs	r3, #2
  }
}
 8004442:	4618      	mov	r0, r3
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	4613      	mov	r3, r2
 8004456:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b20      	cmp	r3, #32
 8004462:	d11d      	bne.n	80044a0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_UART_Receive_IT+0x26>
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e016      	b.n	80044a2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_UART_Receive_IT+0x38>
 800447e:	2302      	movs	r3, #2
 8004480:	e00f      	b.n	80044a2 <HAL_UART_Receive_IT+0x58>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	461a      	mov	r2, r3
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fa19 	bl	80048ce <UART_Start_Receive_IT>
 800449c:	4603      	mov	r3, r0
 800449e:	e000      	b.n	80044a2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044a0:	2302      	movs	r3, #2
  }
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10d      	bne.n	80044fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_UART_IRQHandler+0x52>
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fac9 	bl	8004a8e <UART_Receive_IT>
      return;
 80044fc:	e17b      	b.n	80047f6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80b1 	beq.w	8004668 <HAL_UART_IRQHandler+0x1bc>
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d105      	bne.n	800451c <HAL_UART_IRQHandler+0x70>
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80a6 	beq.w	8004668 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_UART_IRQHandler+0x90>
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f043 0201 	orr.w	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_UART_IRQHandler+0xb0>
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	f043 0202 	orr.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_UART_IRQHandler+0xd0>
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	f043 0204 	orr.w	r2, r3, #4
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00f      	beq.n	80045a6 <HAL_UART_IRQHandler+0xfa>
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d104      	bne.n	800459a <HAL_UART_IRQHandler+0xee>
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f043 0208 	orr.w	r2, r3, #8
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 811e 	beq.w	80047ec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <HAL_UART_IRQHandler+0x11e>
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fa62 	bl	8004a8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <HAL_UART_IRQHandler+0x146>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d031      	beq.n	8004656 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f9a4 	bl	8004940 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d023      	beq.n	800464e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004614:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	2b00      	cmp	r3, #0
 800461c:	d013      	beq.n	8004646 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	4a76      	ldr	r2, [pc, #472]	; (80047fc <HAL_UART_IRQHandler+0x350>)
 8004624:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe f874 	bl	8002718 <HAL_DMA_Abort_IT>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d016      	beq.n	8004664 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004640:	4610      	mov	r0, r2
 8004642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004644:	e00e      	b.n	8004664 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f8e3 	bl	8004812 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464c:	e00a      	b.n	8004664 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8df 	bl	8004812 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004654:	e006      	b.n	8004664 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f8db 	bl	8004812 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004662:	e0c3      	b.n	80047ec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	bf00      	nop
    return;
 8004666:	e0c1      	b.n	80047ec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	2b01      	cmp	r3, #1
 800466e:	f040 80a1 	bne.w	80047b4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 809b 	beq.w	80047b4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8095 	beq.w	80047b4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d04e      	beq.n	800474c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80046b8:	8a3b      	ldrh	r3, [r7, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8098 	beq.w	80047f0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046c4:	8a3a      	ldrh	r2, [r7, #16]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	f080 8092 	bcs.w	80047f0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8a3a      	ldrh	r2, [r7, #16]
 80046d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d02b      	beq.n	8004734 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046ea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0210 	bic.w	r2, r2, #16
 8004728:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd ffb7 	bl	80026a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800473c:	b29b      	uxth	r3, r3
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	b29b      	uxth	r3, r3
 8004742:	4619      	mov	r1, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f86d 	bl	8004824 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800474a:	e051      	b.n	80047f0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004754:	b29b      	uxth	r3, r3
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d047      	beq.n	80047f4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004764:	8a7b      	ldrh	r3, [r7, #18]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d044      	beq.n	80047f4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004778:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695a      	ldr	r2, [r3, #20]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0210 	bic.w	r2, r2, #16
 80047a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047a8:	8a7b      	ldrh	r3, [r7, #18]
 80047aa:	4619      	mov	r1, r3
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f839 	bl	8004824 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047b2:	e01f      	b.n	80047f4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <HAL_UART_IRQHandler+0x324>
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f8f9 	bl	80049c0 <UART_Transmit_IT>
    return;
 80047ce:	e012      	b.n	80047f6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00d      	beq.n	80047f6 <HAL_UART_IRQHandler+0x34a>
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f93a 	bl	8004a5e <UART_EndTransmit_IT>
    return;
 80047ea:	e004      	b.n	80047f6 <HAL_UART_IRQHandler+0x34a>
    return;
 80047ec:	bf00      	nop
 80047ee:	e002      	b.n	80047f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80047f0:	bf00      	nop
 80047f2:	e000      	b.n	80047f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80047f4:	bf00      	nop
  }
}
 80047f6:	3728      	adds	r7, #40	; 0x28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	08004999 	.word	0x08004999

08004800 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484a:	e02c      	b.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004852:	d028      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <UART_WaitOnFlagUntilTimeout+0x30>
 800485a:	f7fd fe0b 	bl	8002474 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	429a      	cmp	r2, r3
 8004868:	d21d      	bcs.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004878:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695a      	ldr	r2, [r3, #20]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e00f      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4013      	ands	r3, r2
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d0c3      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	4613      	mov	r3, r2
 80048da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	88fa      	ldrh	r2, [r7, #6]
 80048e6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2222      	movs	r2, #34	; 0x22
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004912:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0220 	orr.w	r2, r2, #32
 8004932:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004956:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695a      	ldr	r2, [r3, #20]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	2b01      	cmp	r3, #1
 800496e:	d107      	bne.n	8004980 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0210 	bic.w	r2, r2, #16
 800497e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7ff ff2d 	bl	8004812 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b21      	cmp	r3, #33	; 0x21
 80049d2:	d13e      	bne.n	8004a52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049dc:	d114      	bne.n	8004a08 <UART_Transmit_IT+0x48>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d110      	bne.n	8004a08 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	1c9a      	adds	r2, r3, #2
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]
 8004a06:	e008      	b.n	8004a1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	1c59      	adds	r1, r3, #1
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6211      	str	r1, [r2, #32]
 8004a12:	781a      	ldrb	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	4619      	mov	r1, r3
 8004a28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e000      	b.n	8004a54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
  }
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr

08004a5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff febe 	bl	8004800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b22      	cmp	r3, #34	; 0x22
 8004aa0:	f040 8099 	bne.w	8004bd6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aac:	d117      	bne.n	8004ade <UART_Receive_IT+0x50>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d113      	bne.n	8004ade <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	1c9a      	adds	r2, r3, #2
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	629a      	str	r2, [r3, #40]	; 0x28
 8004adc:	e026      	b.n	8004b2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d007      	beq.n	8004b02 <UART_Receive_IT+0x74>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <UART_Receive_IT+0x82>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	e008      	b.n	8004b22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d148      	bne.n	8004bd2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0220 	bic.w	r2, r2, #32
 8004b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d123      	bne.n	8004bc8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0210 	bic.w	r2, r2, #16
 8004b94:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d10a      	bne.n	8004bba <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff fe2f 	bl	8004824 <HAL_UARTEx_RxEventCallback>
 8004bc6:	e002      	b.n	8004bce <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fc fef7 	bl	80019bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e002      	b.n	8004bd8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e000      	b.n	8004bd8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
  }
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c1a:	f023 030c 	bic.w	r3, r3, #12
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	430b      	orrs	r3, r1
 8004c26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2c      	ldr	r2, [pc, #176]	; (8004cf4 <UART_SetConfig+0x114>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d103      	bne.n	8004c50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c48:	f7fe fb90 	bl	800336c <HAL_RCC_GetPCLK2Freq>
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	e002      	b.n	8004c56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c50:	f7fe fb78 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8004c54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009a      	lsls	r2, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6c:	4a22      	ldr	r2, [pc, #136]	; (8004cf8 <UART_SetConfig+0x118>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	0119      	lsls	r1, r3, #4
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009a      	lsls	r2, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <UART_SetConfig+0x118>)
 8004c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	2064      	movs	r0, #100	; 0x64
 8004c96:	fb00 f303 	mul.w	r3, r0, r3
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	3332      	adds	r3, #50	; 0x32
 8004ca0:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <UART_SetConfig+0x118>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cac:	4419      	add	r1, r3
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009a      	lsls	r2, r3, #2
 8004cb8:	441a      	add	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <UART_SetConfig+0x118>)
 8004cc6:	fba3 0302 	umull	r0, r3, r3, r2
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	2064      	movs	r0, #100	; 0x64
 8004cce:	fb00 f303 	mul.w	r3, r0, r3
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	3332      	adds	r3, #50	; 0x32
 8004cd8:	4a07      	ldr	r2, [pc, #28]	; (8004cf8 <UART_SetConfig+0x118>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	440a      	add	r2, r1
 8004cea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40013800 	.word	0x40013800
 8004cf8:	51eb851f 	.word	0x51eb851f

08004cfc <__errno>:
 8004cfc:	4b01      	ldr	r3, [pc, #4]	; (8004d04 <__errno+0x8>)
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000030 	.word	0x20000030

08004d08 <__libc_init_array>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	2600      	movs	r6, #0
 8004d0c:	4d0c      	ldr	r5, [pc, #48]	; (8004d40 <__libc_init_array+0x38>)
 8004d0e:	4c0d      	ldr	r4, [pc, #52]	; (8004d44 <__libc_init_array+0x3c>)
 8004d10:	1b64      	subs	r4, r4, r5
 8004d12:	10a4      	asrs	r4, r4, #2
 8004d14:	42a6      	cmp	r6, r4
 8004d16:	d109      	bne.n	8004d2c <__libc_init_array+0x24>
 8004d18:	f000 fc5c 	bl	80055d4 <_init>
 8004d1c:	2600      	movs	r6, #0
 8004d1e:	4d0a      	ldr	r5, [pc, #40]	; (8004d48 <__libc_init_array+0x40>)
 8004d20:	4c0a      	ldr	r4, [pc, #40]	; (8004d4c <__libc_init_array+0x44>)
 8004d22:	1b64      	subs	r4, r4, r5
 8004d24:	10a4      	asrs	r4, r4, #2
 8004d26:	42a6      	cmp	r6, r4
 8004d28:	d105      	bne.n	8004d36 <__libc_init_array+0x2e>
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
 8004d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d30:	4798      	blx	r3
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7ee      	b.n	8004d14 <__libc_init_array+0xc>
 8004d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3a:	4798      	blx	r3
 8004d3c:	3601      	adds	r6, #1
 8004d3e:	e7f2      	b.n	8004d26 <__libc_init_array+0x1e>
 8004d40:	08005654 	.word	0x08005654
 8004d44:	08005654 	.word	0x08005654
 8004d48:	08005654 	.word	0x08005654
 8004d4c:	08005658 	.word	0x08005658

08004d50 <memset>:
 8004d50:	4603      	mov	r3, r0
 8004d52:	4402      	add	r2, r0
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d100      	bne.n	8004d5a <memset+0xa>
 8004d58:	4770      	bx	lr
 8004d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5e:	e7f9      	b.n	8004d54 <memset+0x4>

08004d60 <siprintf>:
 8004d60:	b40e      	push	{r1, r2, r3}
 8004d62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d66:	b500      	push	{lr}
 8004d68:	b09c      	sub	sp, #112	; 0x70
 8004d6a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d6c:	9002      	str	r0, [sp, #8]
 8004d6e:	9006      	str	r0, [sp, #24]
 8004d70:	9107      	str	r1, [sp, #28]
 8004d72:	9104      	str	r1, [sp, #16]
 8004d74:	4808      	ldr	r0, [pc, #32]	; (8004d98 <siprintf+0x38>)
 8004d76:	4909      	ldr	r1, [pc, #36]	; (8004d9c <siprintf+0x3c>)
 8004d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d7c:	9105      	str	r1, [sp, #20]
 8004d7e:	6800      	ldr	r0, [r0, #0]
 8004d80:	a902      	add	r1, sp, #8
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	f000 f868 	bl	8004e58 <_svfiprintf_r>
 8004d88:	2200      	movs	r2, #0
 8004d8a:	9b02      	ldr	r3, [sp, #8]
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	b01c      	add	sp, #112	; 0x70
 8004d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d94:	b003      	add	sp, #12
 8004d96:	4770      	bx	lr
 8004d98:	20000030 	.word	0x20000030
 8004d9c:	ffff0208 	.word	0xffff0208

08004da0 <__ssputs_r>:
 8004da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004da4:	688e      	ldr	r6, [r1, #8]
 8004da6:	4682      	mov	sl, r0
 8004da8:	429e      	cmp	r6, r3
 8004daa:	460c      	mov	r4, r1
 8004dac:	4690      	mov	r8, r2
 8004dae:	461f      	mov	r7, r3
 8004db0:	d838      	bhi.n	8004e24 <__ssputs_r+0x84>
 8004db2:	898a      	ldrh	r2, [r1, #12]
 8004db4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004db8:	d032      	beq.n	8004e20 <__ssputs_r+0x80>
 8004dba:	6825      	ldr	r5, [r4, #0]
 8004dbc:	6909      	ldr	r1, [r1, #16]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	eba5 0901 	sub.w	r9, r5, r1
 8004dc4:	6965      	ldr	r5, [r4, #20]
 8004dc6:	444b      	add	r3, r9
 8004dc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dd0:	106d      	asrs	r5, r5, #1
 8004dd2:	429d      	cmp	r5, r3
 8004dd4:	bf38      	it	cc
 8004dd6:	461d      	movcc	r5, r3
 8004dd8:	0553      	lsls	r3, r2, #21
 8004dda:	d531      	bpl.n	8004e40 <__ssputs_r+0xa0>
 8004ddc:	4629      	mov	r1, r5
 8004dde:	f000 fb53 	bl	8005488 <_malloc_r>
 8004de2:	4606      	mov	r6, r0
 8004de4:	b950      	cbnz	r0, 8004dfc <__ssputs_r+0x5c>
 8004de6:	230c      	movs	r3, #12
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dec:	f8ca 3000 	str.w	r3, [sl]
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df6:	81a3      	strh	r3, [r4, #12]
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	464a      	mov	r2, r9
 8004dfe:	6921      	ldr	r1, [r4, #16]
 8004e00:	f000 face 	bl	80053a0 <memcpy>
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	6126      	str	r6, [r4, #16]
 8004e12:	444e      	add	r6, r9
 8004e14:	6026      	str	r6, [r4, #0]
 8004e16:	463e      	mov	r6, r7
 8004e18:	6165      	str	r5, [r4, #20]
 8004e1a:	eba5 0509 	sub.w	r5, r5, r9
 8004e1e:	60a5      	str	r5, [r4, #8]
 8004e20:	42be      	cmp	r6, r7
 8004e22:	d900      	bls.n	8004e26 <__ssputs_r+0x86>
 8004e24:	463e      	mov	r6, r7
 8004e26:	4632      	mov	r2, r6
 8004e28:	4641      	mov	r1, r8
 8004e2a:	6820      	ldr	r0, [r4, #0]
 8004e2c:	f000 fac6 	bl	80053bc <memmove>
 8004e30:	68a3      	ldr	r3, [r4, #8]
 8004e32:	6822      	ldr	r2, [r4, #0]
 8004e34:	1b9b      	subs	r3, r3, r6
 8004e36:	4432      	add	r2, r6
 8004e38:	2000      	movs	r0, #0
 8004e3a:	60a3      	str	r3, [r4, #8]
 8004e3c:	6022      	str	r2, [r4, #0]
 8004e3e:	e7db      	b.n	8004df8 <__ssputs_r+0x58>
 8004e40:	462a      	mov	r2, r5
 8004e42:	f000 fb7b 	bl	800553c <_realloc_r>
 8004e46:	4606      	mov	r6, r0
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d1e1      	bne.n	8004e10 <__ssputs_r+0x70>
 8004e4c:	4650      	mov	r0, sl
 8004e4e:	6921      	ldr	r1, [r4, #16]
 8004e50:	f000 face 	bl	80053f0 <_free_r>
 8004e54:	e7c7      	b.n	8004de6 <__ssputs_r+0x46>
	...

08004e58 <_svfiprintf_r>:
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	4698      	mov	r8, r3
 8004e5e:	898b      	ldrh	r3, [r1, #12]
 8004e60:	4607      	mov	r7, r0
 8004e62:	061b      	lsls	r3, r3, #24
 8004e64:	460d      	mov	r5, r1
 8004e66:	4614      	mov	r4, r2
 8004e68:	b09d      	sub	sp, #116	; 0x74
 8004e6a:	d50e      	bpl.n	8004e8a <_svfiprintf_r+0x32>
 8004e6c:	690b      	ldr	r3, [r1, #16]
 8004e6e:	b963      	cbnz	r3, 8004e8a <_svfiprintf_r+0x32>
 8004e70:	2140      	movs	r1, #64	; 0x40
 8004e72:	f000 fb09 	bl	8005488 <_malloc_r>
 8004e76:	6028      	str	r0, [r5, #0]
 8004e78:	6128      	str	r0, [r5, #16]
 8004e7a:	b920      	cbnz	r0, 8004e86 <_svfiprintf_r+0x2e>
 8004e7c:	230c      	movs	r3, #12
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	f04f 30ff 	mov.w	r0, #4294967295
 8004e84:	e0d1      	b.n	800502a <_svfiprintf_r+0x1d2>
 8004e86:	2340      	movs	r3, #64	; 0x40
 8004e88:	616b      	str	r3, [r5, #20]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8e:	2320      	movs	r3, #32
 8004e90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e94:	2330      	movs	r3, #48	; 0x30
 8004e96:	f04f 0901 	mov.w	r9, #1
 8004e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005044 <_svfiprintf_r+0x1ec>
 8004ea2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	469a      	mov	sl, r3
 8004eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eae:	b10a      	cbz	r2, 8004eb4 <_svfiprintf_r+0x5c>
 8004eb0:	2a25      	cmp	r2, #37	; 0x25
 8004eb2:	d1f9      	bne.n	8004ea8 <_svfiprintf_r+0x50>
 8004eb4:	ebba 0b04 	subs.w	fp, sl, r4
 8004eb8:	d00b      	beq.n	8004ed2 <_svfiprintf_r+0x7a>
 8004eba:	465b      	mov	r3, fp
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	f7ff ff6d 	bl	8004da0 <__ssputs_r>
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	f000 80aa 	beq.w	8005020 <_svfiprintf_r+0x1c8>
 8004ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ece:	445a      	add	r2, fp
 8004ed0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 80a2 	beq.w	8005020 <_svfiprintf_r+0x1c8>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ee6:	f10a 0a01 	add.w	sl, sl, #1
 8004eea:	9304      	str	r3, [sp, #16]
 8004eec:	9307      	str	r3, [sp, #28]
 8004eee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ef2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ef4:	4654      	mov	r4, sl
 8004ef6:	2205      	movs	r2, #5
 8004ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004efc:	4851      	ldr	r0, [pc, #324]	; (8005044 <_svfiprintf_r+0x1ec>)
 8004efe:	f000 fa41 	bl	8005384 <memchr>
 8004f02:	9a04      	ldr	r2, [sp, #16]
 8004f04:	b9d8      	cbnz	r0, 8004f3e <_svfiprintf_r+0xe6>
 8004f06:	06d0      	lsls	r0, r2, #27
 8004f08:	bf44      	itt	mi
 8004f0a:	2320      	movmi	r3, #32
 8004f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f10:	0711      	lsls	r1, r2, #28
 8004f12:	bf44      	itt	mi
 8004f14:	232b      	movmi	r3, #43	; 0x2b
 8004f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f20:	d015      	beq.n	8004f4e <_svfiprintf_r+0xf6>
 8004f22:	4654      	mov	r4, sl
 8004f24:	2000      	movs	r0, #0
 8004f26:	f04f 0c0a 	mov.w	ip, #10
 8004f2a:	9a07      	ldr	r2, [sp, #28]
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f32:	3b30      	subs	r3, #48	; 0x30
 8004f34:	2b09      	cmp	r3, #9
 8004f36:	d94e      	bls.n	8004fd6 <_svfiprintf_r+0x17e>
 8004f38:	b1b0      	cbz	r0, 8004f68 <_svfiprintf_r+0x110>
 8004f3a:	9207      	str	r2, [sp, #28]
 8004f3c:	e014      	b.n	8004f68 <_svfiprintf_r+0x110>
 8004f3e:	eba0 0308 	sub.w	r3, r0, r8
 8004f42:	fa09 f303 	lsl.w	r3, r9, r3
 8004f46:	4313      	orrs	r3, r2
 8004f48:	46a2      	mov	sl, r4
 8004f4a:	9304      	str	r3, [sp, #16]
 8004f4c:	e7d2      	b.n	8004ef4 <_svfiprintf_r+0x9c>
 8004f4e:	9b03      	ldr	r3, [sp, #12]
 8004f50:	1d19      	adds	r1, r3, #4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	9103      	str	r1, [sp, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bfbb      	ittet	lt
 8004f5a:	425b      	neglt	r3, r3
 8004f5c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f60:	9307      	strge	r3, [sp, #28]
 8004f62:	9307      	strlt	r3, [sp, #28]
 8004f64:	bfb8      	it	lt
 8004f66:	9204      	strlt	r2, [sp, #16]
 8004f68:	7823      	ldrb	r3, [r4, #0]
 8004f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f6c:	d10c      	bne.n	8004f88 <_svfiprintf_r+0x130>
 8004f6e:	7863      	ldrb	r3, [r4, #1]
 8004f70:	2b2a      	cmp	r3, #42	; 0x2a
 8004f72:	d135      	bne.n	8004fe0 <_svfiprintf_r+0x188>
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	3402      	adds	r4, #2
 8004f78:	1d1a      	adds	r2, r3, #4
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	9203      	str	r2, [sp, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bfb8      	it	lt
 8004f82:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f86:	9305      	str	r3, [sp, #20]
 8004f88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005054 <_svfiprintf_r+0x1fc>
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	4650      	mov	r0, sl
 8004f90:	7821      	ldrb	r1, [r4, #0]
 8004f92:	f000 f9f7 	bl	8005384 <memchr>
 8004f96:	b140      	cbz	r0, 8004faa <_svfiprintf_r+0x152>
 8004f98:	2340      	movs	r3, #64	; 0x40
 8004f9a:	eba0 000a 	sub.w	r0, r0, sl
 8004f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8004fa2:	9b04      	ldr	r3, [sp, #16]
 8004fa4:	3401      	adds	r4, #1
 8004fa6:	4303      	orrs	r3, r0
 8004fa8:	9304      	str	r3, [sp, #16]
 8004faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fae:	2206      	movs	r2, #6
 8004fb0:	4825      	ldr	r0, [pc, #148]	; (8005048 <_svfiprintf_r+0x1f0>)
 8004fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fb6:	f000 f9e5 	bl	8005384 <memchr>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d038      	beq.n	8005030 <_svfiprintf_r+0x1d8>
 8004fbe:	4b23      	ldr	r3, [pc, #140]	; (800504c <_svfiprintf_r+0x1f4>)
 8004fc0:	bb1b      	cbnz	r3, 800500a <_svfiprintf_r+0x1b2>
 8004fc2:	9b03      	ldr	r3, [sp, #12]
 8004fc4:	3307      	adds	r3, #7
 8004fc6:	f023 0307 	bic.w	r3, r3, #7
 8004fca:	3308      	adds	r3, #8
 8004fcc:	9303      	str	r3, [sp, #12]
 8004fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd0:	4433      	add	r3, r6
 8004fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd4:	e767      	b.n	8004ea6 <_svfiprintf_r+0x4e>
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	2001      	movs	r0, #1
 8004fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fde:	e7a5      	b.n	8004f2c <_svfiprintf_r+0xd4>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f04f 0c0a 	mov.w	ip, #10
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	3401      	adds	r4, #1
 8004fea:	9305      	str	r3, [sp, #20]
 8004fec:	4620      	mov	r0, r4
 8004fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ff2:	3a30      	subs	r2, #48	; 0x30
 8004ff4:	2a09      	cmp	r2, #9
 8004ff6:	d903      	bls.n	8005000 <_svfiprintf_r+0x1a8>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0c5      	beq.n	8004f88 <_svfiprintf_r+0x130>
 8004ffc:	9105      	str	r1, [sp, #20]
 8004ffe:	e7c3      	b.n	8004f88 <_svfiprintf_r+0x130>
 8005000:	4604      	mov	r4, r0
 8005002:	2301      	movs	r3, #1
 8005004:	fb0c 2101 	mla	r1, ip, r1, r2
 8005008:	e7f0      	b.n	8004fec <_svfiprintf_r+0x194>
 800500a:	ab03      	add	r3, sp, #12
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	462a      	mov	r2, r5
 8005010:	4638      	mov	r0, r7
 8005012:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <_svfiprintf_r+0x1f8>)
 8005014:	a904      	add	r1, sp, #16
 8005016:	f3af 8000 	nop.w
 800501a:	1c42      	adds	r2, r0, #1
 800501c:	4606      	mov	r6, r0
 800501e:	d1d6      	bne.n	8004fce <_svfiprintf_r+0x176>
 8005020:	89ab      	ldrh	r3, [r5, #12]
 8005022:	065b      	lsls	r3, r3, #25
 8005024:	f53f af2c 	bmi.w	8004e80 <_svfiprintf_r+0x28>
 8005028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800502a:	b01d      	add	sp, #116	; 0x74
 800502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005030:	ab03      	add	r3, sp, #12
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	462a      	mov	r2, r5
 8005036:	4638      	mov	r0, r7
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <_svfiprintf_r+0x1f8>)
 800503a:	a904      	add	r1, sp, #16
 800503c:	f000 f87c 	bl	8005138 <_printf_i>
 8005040:	e7eb      	b.n	800501a <_svfiprintf_r+0x1c2>
 8005042:	bf00      	nop
 8005044:	08005620 	.word	0x08005620
 8005048:	0800562a 	.word	0x0800562a
 800504c:	00000000 	.word	0x00000000
 8005050:	08004da1 	.word	0x08004da1
 8005054:	08005626 	.word	0x08005626

08005058 <_printf_common>:
 8005058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800505c:	4616      	mov	r6, r2
 800505e:	4699      	mov	r9, r3
 8005060:	688a      	ldr	r2, [r1, #8]
 8005062:	690b      	ldr	r3, [r1, #16]
 8005064:	4607      	mov	r7, r0
 8005066:	4293      	cmp	r3, r2
 8005068:	bfb8      	it	lt
 800506a:	4613      	movlt	r3, r2
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005072:	460c      	mov	r4, r1
 8005074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005078:	b10a      	cbz	r2, 800507e <_printf_common+0x26>
 800507a:	3301      	adds	r3, #1
 800507c:	6033      	str	r3, [r6, #0]
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	0699      	lsls	r1, r3, #26
 8005082:	bf42      	ittt	mi
 8005084:	6833      	ldrmi	r3, [r6, #0]
 8005086:	3302      	addmi	r3, #2
 8005088:	6033      	strmi	r3, [r6, #0]
 800508a:	6825      	ldr	r5, [r4, #0]
 800508c:	f015 0506 	ands.w	r5, r5, #6
 8005090:	d106      	bne.n	80050a0 <_printf_common+0x48>
 8005092:	f104 0a19 	add.w	sl, r4, #25
 8005096:	68e3      	ldr	r3, [r4, #12]
 8005098:	6832      	ldr	r2, [r6, #0]
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	42ab      	cmp	r3, r5
 800509e:	dc28      	bgt.n	80050f2 <_printf_common+0x9a>
 80050a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050a4:	1e13      	subs	r3, r2, #0
 80050a6:	6822      	ldr	r2, [r4, #0]
 80050a8:	bf18      	it	ne
 80050aa:	2301      	movne	r3, #1
 80050ac:	0692      	lsls	r2, r2, #26
 80050ae:	d42d      	bmi.n	800510c <_printf_common+0xb4>
 80050b0:	4649      	mov	r1, r9
 80050b2:	4638      	mov	r0, r7
 80050b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050b8:	47c0      	blx	r8
 80050ba:	3001      	adds	r0, #1
 80050bc:	d020      	beq.n	8005100 <_printf_common+0xa8>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	68e5      	ldr	r5, [r4, #12]
 80050c2:	f003 0306 	and.w	r3, r3, #6
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	bf18      	it	ne
 80050ca:	2500      	movne	r5, #0
 80050cc:	6832      	ldr	r2, [r6, #0]
 80050ce:	f04f 0600 	mov.w	r6, #0
 80050d2:	68a3      	ldr	r3, [r4, #8]
 80050d4:	bf08      	it	eq
 80050d6:	1aad      	subeq	r5, r5, r2
 80050d8:	6922      	ldr	r2, [r4, #16]
 80050da:	bf08      	it	eq
 80050dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e0:	4293      	cmp	r3, r2
 80050e2:	bfc4      	itt	gt
 80050e4:	1a9b      	subgt	r3, r3, r2
 80050e6:	18ed      	addgt	r5, r5, r3
 80050e8:	341a      	adds	r4, #26
 80050ea:	42b5      	cmp	r5, r6
 80050ec:	d11a      	bne.n	8005124 <_printf_common+0xcc>
 80050ee:	2000      	movs	r0, #0
 80050f0:	e008      	b.n	8005104 <_printf_common+0xac>
 80050f2:	2301      	movs	r3, #1
 80050f4:	4652      	mov	r2, sl
 80050f6:	4649      	mov	r1, r9
 80050f8:	4638      	mov	r0, r7
 80050fa:	47c0      	blx	r8
 80050fc:	3001      	adds	r0, #1
 80050fe:	d103      	bne.n	8005108 <_printf_common+0xb0>
 8005100:	f04f 30ff 	mov.w	r0, #4294967295
 8005104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005108:	3501      	adds	r5, #1
 800510a:	e7c4      	b.n	8005096 <_printf_common+0x3e>
 800510c:	2030      	movs	r0, #48	; 0x30
 800510e:	18e1      	adds	r1, r4, r3
 8005110:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800511a:	4422      	add	r2, r4
 800511c:	3302      	adds	r3, #2
 800511e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005122:	e7c5      	b.n	80050b0 <_printf_common+0x58>
 8005124:	2301      	movs	r3, #1
 8005126:	4622      	mov	r2, r4
 8005128:	4649      	mov	r1, r9
 800512a:	4638      	mov	r0, r7
 800512c:	47c0      	blx	r8
 800512e:	3001      	adds	r0, #1
 8005130:	d0e6      	beq.n	8005100 <_printf_common+0xa8>
 8005132:	3601      	adds	r6, #1
 8005134:	e7d9      	b.n	80050ea <_printf_common+0x92>
	...

08005138 <_printf_i>:
 8005138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800513c:	460c      	mov	r4, r1
 800513e:	7e27      	ldrb	r7, [r4, #24]
 8005140:	4691      	mov	r9, r2
 8005142:	2f78      	cmp	r7, #120	; 0x78
 8005144:	4680      	mov	r8, r0
 8005146:	469a      	mov	sl, r3
 8005148:	990c      	ldr	r1, [sp, #48]	; 0x30
 800514a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800514e:	d807      	bhi.n	8005160 <_printf_i+0x28>
 8005150:	2f62      	cmp	r7, #98	; 0x62
 8005152:	d80a      	bhi.n	800516a <_printf_i+0x32>
 8005154:	2f00      	cmp	r7, #0
 8005156:	f000 80d9 	beq.w	800530c <_printf_i+0x1d4>
 800515a:	2f58      	cmp	r7, #88	; 0x58
 800515c:	f000 80a4 	beq.w	80052a8 <_printf_i+0x170>
 8005160:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005164:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005168:	e03a      	b.n	80051e0 <_printf_i+0xa8>
 800516a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800516e:	2b15      	cmp	r3, #21
 8005170:	d8f6      	bhi.n	8005160 <_printf_i+0x28>
 8005172:	a001      	add	r0, pc, #4	; (adr r0, 8005178 <_printf_i+0x40>)
 8005174:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005178:	080051d1 	.word	0x080051d1
 800517c:	080051e5 	.word	0x080051e5
 8005180:	08005161 	.word	0x08005161
 8005184:	08005161 	.word	0x08005161
 8005188:	08005161 	.word	0x08005161
 800518c:	08005161 	.word	0x08005161
 8005190:	080051e5 	.word	0x080051e5
 8005194:	08005161 	.word	0x08005161
 8005198:	08005161 	.word	0x08005161
 800519c:	08005161 	.word	0x08005161
 80051a0:	08005161 	.word	0x08005161
 80051a4:	080052f3 	.word	0x080052f3
 80051a8:	08005215 	.word	0x08005215
 80051ac:	080052d5 	.word	0x080052d5
 80051b0:	08005161 	.word	0x08005161
 80051b4:	08005161 	.word	0x08005161
 80051b8:	08005315 	.word	0x08005315
 80051bc:	08005161 	.word	0x08005161
 80051c0:	08005215 	.word	0x08005215
 80051c4:	08005161 	.word	0x08005161
 80051c8:	08005161 	.word	0x08005161
 80051cc:	080052dd 	.word	0x080052dd
 80051d0:	680b      	ldr	r3, [r1, #0]
 80051d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051d6:	1d1a      	adds	r2, r3, #4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	600a      	str	r2, [r1, #0]
 80051dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0a4      	b.n	800532e <_printf_i+0x1f6>
 80051e4:	6825      	ldr	r5, [r4, #0]
 80051e6:	6808      	ldr	r0, [r1, #0]
 80051e8:	062e      	lsls	r6, r5, #24
 80051ea:	f100 0304 	add.w	r3, r0, #4
 80051ee:	d50a      	bpl.n	8005206 <_printf_i+0xce>
 80051f0:	6805      	ldr	r5, [r0, #0]
 80051f2:	600b      	str	r3, [r1, #0]
 80051f4:	2d00      	cmp	r5, #0
 80051f6:	da03      	bge.n	8005200 <_printf_i+0xc8>
 80051f8:	232d      	movs	r3, #45	; 0x2d
 80051fa:	426d      	negs	r5, r5
 80051fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005200:	230a      	movs	r3, #10
 8005202:	485e      	ldr	r0, [pc, #376]	; (800537c <_printf_i+0x244>)
 8005204:	e019      	b.n	800523a <_printf_i+0x102>
 8005206:	f015 0f40 	tst.w	r5, #64	; 0x40
 800520a:	6805      	ldr	r5, [r0, #0]
 800520c:	600b      	str	r3, [r1, #0]
 800520e:	bf18      	it	ne
 8005210:	b22d      	sxthne	r5, r5
 8005212:	e7ef      	b.n	80051f4 <_printf_i+0xbc>
 8005214:	680b      	ldr	r3, [r1, #0]
 8005216:	6825      	ldr	r5, [r4, #0]
 8005218:	1d18      	adds	r0, r3, #4
 800521a:	6008      	str	r0, [r1, #0]
 800521c:	0628      	lsls	r0, r5, #24
 800521e:	d501      	bpl.n	8005224 <_printf_i+0xec>
 8005220:	681d      	ldr	r5, [r3, #0]
 8005222:	e002      	b.n	800522a <_printf_i+0xf2>
 8005224:	0669      	lsls	r1, r5, #25
 8005226:	d5fb      	bpl.n	8005220 <_printf_i+0xe8>
 8005228:	881d      	ldrh	r5, [r3, #0]
 800522a:	2f6f      	cmp	r7, #111	; 0x6f
 800522c:	bf0c      	ite	eq
 800522e:	2308      	moveq	r3, #8
 8005230:	230a      	movne	r3, #10
 8005232:	4852      	ldr	r0, [pc, #328]	; (800537c <_printf_i+0x244>)
 8005234:	2100      	movs	r1, #0
 8005236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800523a:	6866      	ldr	r6, [r4, #4]
 800523c:	2e00      	cmp	r6, #0
 800523e:	bfa8      	it	ge
 8005240:	6821      	ldrge	r1, [r4, #0]
 8005242:	60a6      	str	r6, [r4, #8]
 8005244:	bfa4      	itt	ge
 8005246:	f021 0104 	bicge.w	r1, r1, #4
 800524a:	6021      	strge	r1, [r4, #0]
 800524c:	b90d      	cbnz	r5, 8005252 <_printf_i+0x11a>
 800524e:	2e00      	cmp	r6, #0
 8005250:	d04d      	beq.n	80052ee <_printf_i+0x1b6>
 8005252:	4616      	mov	r6, r2
 8005254:	fbb5 f1f3 	udiv	r1, r5, r3
 8005258:	fb03 5711 	mls	r7, r3, r1, r5
 800525c:	5dc7      	ldrb	r7, [r0, r7]
 800525e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005262:	462f      	mov	r7, r5
 8005264:	42bb      	cmp	r3, r7
 8005266:	460d      	mov	r5, r1
 8005268:	d9f4      	bls.n	8005254 <_printf_i+0x11c>
 800526a:	2b08      	cmp	r3, #8
 800526c:	d10b      	bne.n	8005286 <_printf_i+0x14e>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	07df      	lsls	r7, r3, #31
 8005272:	d508      	bpl.n	8005286 <_printf_i+0x14e>
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	6861      	ldr	r1, [r4, #4]
 8005278:	4299      	cmp	r1, r3
 800527a:	bfde      	ittt	le
 800527c:	2330      	movle	r3, #48	; 0x30
 800527e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005282:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005286:	1b92      	subs	r2, r2, r6
 8005288:	6122      	str	r2, [r4, #16]
 800528a:	464b      	mov	r3, r9
 800528c:	4621      	mov	r1, r4
 800528e:	4640      	mov	r0, r8
 8005290:	f8cd a000 	str.w	sl, [sp]
 8005294:	aa03      	add	r2, sp, #12
 8005296:	f7ff fedf 	bl	8005058 <_printf_common>
 800529a:	3001      	adds	r0, #1
 800529c:	d14c      	bne.n	8005338 <_printf_i+0x200>
 800529e:	f04f 30ff 	mov.w	r0, #4294967295
 80052a2:	b004      	add	sp, #16
 80052a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a8:	4834      	ldr	r0, [pc, #208]	; (800537c <_printf_i+0x244>)
 80052aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052ae:	680e      	ldr	r6, [r1, #0]
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80052b6:	061f      	lsls	r7, r3, #24
 80052b8:	600e      	str	r6, [r1, #0]
 80052ba:	d514      	bpl.n	80052e6 <_printf_i+0x1ae>
 80052bc:	07d9      	lsls	r1, r3, #31
 80052be:	bf44      	itt	mi
 80052c0:	f043 0320 	orrmi.w	r3, r3, #32
 80052c4:	6023      	strmi	r3, [r4, #0]
 80052c6:	b91d      	cbnz	r5, 80052d0 <_printf_i+0x198>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	f023 0320 	bic.w	r3, r3, #32
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	2310      	movs	r3, #16
 80052d2:	e7af      	b.n	8005234 <_printf_i+0xfc>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	f043 0320 	orr.w	r3, r3, #32
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	2378      	movs	r3, #120	; 0x78
 80052de:	4828      	ldr	r0, [pc, #160]	; (8005380 <_printf_i+0x248>)
 80052e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052e4:	e7e3      	b.n	80052ae <_printf_i+0x176>
 80052e6:	065e      	lsls	r6, r3, #25
 80052e8:	bf48      	it	mi
 80052ea:	b2ad      	uxthmi	r5, r5
 80052ec:	e7e6      	b.n	80052bc <_printf_i+0x184>
 80052ee:	4616      	mov	r6, r2
 80052f0:	e7bb      	b.n	800526a <_printf_i+0x132>
 80052f2:	680b      	ldr	r3, [r1, #0]
 80052f4:	6826      	ldr	r6, [r4, #0]
 80052f6:	1d1d      	adds	r5, r3, #4
 80052f8:	6960      	ldr	r0, [r4, #20]
 80052fa:	600d      	str	r5, [r1, #0]
 80052fc:	0635      	lsls	r5, r6, #24
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	d501      	bpl.n	8005306 <_printf_i+0x1ce>
 8005302:	6018      	str	r0, [r3, #0]
 8005304:	e002      	b.n	800530c <_printf_i+0x1d4>
 8005306:	0671      	lsls	r1, r6, #25
 8005308:	d5fb      	bpl.n	8005302 <_printf_i+0x1ca>
 800530a:	8018      	strh	r0, [r3, #0]
 800530c:	2300      	movs	r3, #0
 800530e:	4616      	mov	r6, r2
 8005310:	6123      	str	r3, [r4, #16]
 8005312:	e7ba      	b.n	800528a <_printf_i+0x152>
 8005314:	680b      	ldr	r3, [r1, #0]
 8005316:	1d1a      	adds	r2, r3, #4
 8005318:	600a      	str	r2, [r1, #0]
 800531a:	681e      	ldr	r6, [r3, #0]
 800531c:	2100      	movs	r1, #0
 800531e:	4630      	mov	r0, r6
 8005320:	6862      	ldr	r2, [r4, #4]
 8005322:	f000 f82f 	bl	8005384 <memchr>
 8005326:	b108      	cbz	r0, 800532c <_printf_i+0x1f4>
 8005328:	1b80      	subs	r0, r0, r6
 800532a:	6060      	str	r0, [r4, #4]
 800532c:	6863      	ldr	r3, [r4, #4]
 800532e:	6123      	str	r3, [r4, #16]
 8005330:	2300      	movs	r3, #0
 8005332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005336:	e7a8      	b.n	800528a <_printf_i+0x152>
 8005338:	4632      	mov	r2, r6
 800533a:	4649      	mov	r1, r9
 800533c:	4640      	mov	r0, r8
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	47d0      	blx	sl
 8005342:	3001      	adds	r0, #1
 8005344:	d0ab      	beq.n	800529e <_printf_i+0x166>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	079b      	lsls	r3, r3, #30
 800534a:	d413      	bmi.n	8005374 <_printf_i+0x23c>
 800534c:	68e0      	ldr	r0, [r4, #12]
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	4298      	cmp	r0, r3
 8005352:	bfb8      	it	lt
 8005354:	4618      	movlt	r0, r3
 8005356:	e7a4      	b.n	80052a2 <_printf_i+0x16a>
 8005358:	2301      	movs	r3, #1
 800535a:	4632      	mov	r2, r6
 800535c:	4649      	mov	r1, r9
 800535e:	4640      	mov	r0, r8
 8005360:	47d0      	blx	sl
 8005362:	3001      	adds	r0, #1
 8005364:	d09b      	beq.n	800529e <_printf_i+0x166>
 8005366:	3501      	adds	r5, #1
 8005368:	68e3      	ldr	r3, [r4, #12]
 800536a:	9903      	ldr	r1, [sp, #12]
 800536c:	1a5b      	subs	r3, r3, r1
 800536e:	42ab      	cmp	r3, r5
 8005370:	dcf2      	bgt.n	8005358 <_printf_i+0x220>
 8005372:	e7eb      	b.n	800534c <_printf_i+0x214>
 8005374:	2500      	movs	r5, #0
 8005376:	f104 0619 	add.w	r6, r4, #25
 800537a:	e7f5      	b.n	8005368 <_printf_i+0x230>
 800537c:	08005631 	.word	0x08005631
 8005380:	08005642 	.word	0x08005642

08005384 <memchr>:
 8005384:	4603      	mov	r3, r0
 8005386:	b510      	push	{r4, lr}
 8005388:	b2c9      	uxtb	r1, r1
 800538a:	4402      	add	r2, r0
 800538c:	4293      	cmp	r3, r2
 800538e:	4618      	mov	r0, r3
 8005390:	d101      	bne.n	8005396 <memchr+0x12>
 8005392:	2000      	movs	r0, #0
 8005394:	e003      	b.n	800539e <memchr+0x1a>
 8005396:	7804      	ldrb	r4, [r0, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	428c      	cmp	r4, r1
 800539c:	d1f6      	bne.n	800538c <memchr+0x8>
 800539e:	bd10      	pop	{r4, pc}

080053a0 <memcpy>:
 80053a0:	440a      	add	r2, r1
 80053a2:	4291      	cmp	r1, r2
 80053a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053a8:	d100      	bne.n	80053ac <memcpy+0xc>
 80053aa:	4770      	bx	lr
 80053ac:	b510      	push	{r4, lr}
 80053ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053b2:	4291      	cmp	r1, r2
 80053b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053b8:	d1f9      	bne.n	80053ae <memcpy+0xe>
 80053ba:	bd10      	pop	{r4, pc}

080053bc <memmove>:
 80053bc:	4288      	cmp	r0, r1
 80053be:	b510      	push	{r4, lr}
 80053c0:	eb01 0402 	add.w	r4, r1, r2
 80053c4:	d902      	bls.n	80053cc <memmove+0x10>
 80053c6:	4284      	cmp	r4, r0
 80053c8:	4623      	mov	r3, r4
 80053ca:	d807      	bhi.n	80053dc <memmove+0x20>
 80053cc:	1e43      	subs	r3, r0, #1
 80053ce:	42a1      	cmp	r1, r4
 80053d0:	d008      	beq.n	80053e4 <memmove+0x28>
 80053d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053da:	e7f8      	b.n	80053ce <memmove+0x12>
 80053dc:	4601      	mov	r1, r0
 80053de:	4402      	add	r2, r0
 80053e0:	428a      	cmp	r2, r1
 80053e2:	d100      	bne.n	80053e6 <memmove+0x2a>
 80053e4:	bd10      	pop	{r4, pc}
 80053e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053ee:	e7f7      	b.n	80053e0 <memmove+0x24>

080053f0 <_free_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4605      	mov	r5, r0
 80053f4:	2900      	cmp	r1, #0
 80053f6:	d043      	beq.n	8005480 <_free_r+0x90>
 80053f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053fc:	1f0c      	subs	r4, r1, #4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	bfb8      	it	lt
 8005402:	18e4      	addlt	r4, r4, r3
 8005404:	f000 f8d0 	bl	80055a8 <__malloc_lock>
 8005408:	4a1e      	ldr	r2, [pc, #120]	; (8005484 <_free_r+0x94>)
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	4610      	mov	r0, r2
 800540e:	b933      	cbnz	r3, 800541e <_free_r+0x2e>
 8005410:	6063      	str	r3, [r4, #4]
 8005412:	6014      	str	r4, [r2, #0]
 8005414:	4628      	mov	r0, r5
 8005416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800541a:	f000 b8cb 	b.w	80055b4 <__malloc_unlock>
 800541e:	42a3      	cmp	r3, r4
 8005420:	d90a      	bls.n	8005438 <_free_r+0x48>
 8005422:	6821      	ldr	r1, [r4, #0]
 8005424:	1862      	adds	r2, r4, r1
 8005426:	4293      	cmp	r3, r2
 8005428:	bf01      	itttt	eq
 800542a:	681a      	ldreq	r2, [r3, #0]
 800542c:	685b      	ldreq	r3, [r3, #4]
 800542e:	1852      	addeq	r2, r2, r1
 8005430:	6022      	streq	r2, [r4, #0]
 8005432:	6063      	str	r3, [r4, #4]
 8005434:	6004      	str	r4, [r0, #0]
 8005436:	e7ed      	b.n	8005414 <_free_r+0x24>
 8005438:	461a      	mov	r2, r3
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	b10b      	cbz	r3, 8005442 <_free_r+0x52>
 800543e:	42a3      	cmp	r3, r4
 8005440:	d9fa      	bls.n	8005438 <_free_r+0x48>
 8005442:	6811      	ldr	r1, [r2, #0]
 8005444:	1850      	adds	r0, r2, r1
 8005446:	42a0      	cmp	r0, r4
 8005448:	d10b      	bne.n	8005462 <_free_r+0x72>
 800544a:	6820      	ldr	r0, [r4, #0]
 800544c:	4401      	add	r1, r0
 800544e:	1850      	adds	r0, r2, r1
 8005450:	4283      	cmp	r3, r0
 8005452:	6011      	str	r1, [r2, #0]
 8005454:	d1de      	bne.n	8005414 <_free_r+0x24>
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4401      	add	r1, r0
 800545c:	6011      	str	r1, [r2, #0]
 800545e:	6053      	str	r3, [r2, #4]
 8005460:	e7d8      	b.n	8005414 <_free_r+0x24>
 8005462:	d902      	bls.n	800546a <_free_r+0x7a>
 8005464:	230c      	movs	r3, #12
 8005466:	602b      	str	r3, [r5, #0]
 8005468:	e7d4      	b.n	8005414 <_free_r+0x24>
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	1821      	adds	r1, r4, r0
 800546e:	428b      	cmp	r3, r1
 8005470:	bf01      	itttt	eq
 8005472:	6819      	ldreq	r1, [r3, #0]
 8005474:	685b      	ldreq	r3, [r3, #4]
 8005476:	1809      	addeq	r1, r1, r0
 8005478:	6021      	streq	r1, [r4, #0]
 800547a:	6063      	str	r3, [r4, #4]
 800547c:	6054      	str	r4, [r2, #4]
 800547e:	e7c9      	b.n	8005414 <_free_r+0x24>
 8005480:	bd38      	pop	{r3, r4, r5, pc}
 8005482:	bf00      	nop
 8005484:	20000128 	.word	0x20000128

08005488 <_malloc_r>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	1ccd      	adds	r5, r1, #3
 800548c:	f025 0503 	bic.w	r5, r5, #3
 8005490:	3508      	adds	r5, #8
 8005492:	2d0c      	cmp	r5, #12
 8005494:	bf38      	it	cc
 8005496:	250c      	movcc	r5, #12
 8005498:	2d00      	cmp	r5, #0
 800549a:	4606      	mov	r6, r0
 800549c:	db01      	blt.n	80054a2 <_malloc_r+0x1a>
 800549e:	42a9      	cmp	r1, r5
 80054a0:	d903      	bls.n	80054aa <_malloc_r+0x22>
 80054a2:	230c      	movs	r3, #12
 80054a4:	6033      	str	r3, [r6, #0]
 80054a6:	2000      	movs	r0, #0
 80054a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054aa:	f000 f87d 	bl	80055a8 <__malloc_lock>
 80054ae:	4921      	ldr	r1, [pc, #132]	; (8005534 <_malloc_r+0xac>)
 80054b0:	680a      	ldr	r2, [r1, #0]
 80054b2:	4614      	mov	r4, r2
 80054b4:	b99c      	cbnz	r4, 80054de <_malloc_r+0x56>
 80054b6:	4f20      	ldr	r7, [pc, #128]	; (8005538 <_malloc_r+0xb0>)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	b923      	cbnz	r3, 80054c6 <_malloc_r+0x3e>
 80054bc:	4621      	mov	r1, r4
 80054be:	4630      	mov	r0, r6
 80054c0:	f000 f862 	bl	8005588 <_sbrk_r>
 80054c4:	6038      	str	r0, [r7, #0]
 80054c6:	4629      	mov	r1, r5
 80054c8:	4630      	mov	r0, r6
 80054ca:	f000 f85d 	bl	8005588 <_sbrk_r>
 80054ce:	1c43      	adds	r3, r0, #1
 80054d0:	d123      	bne.n	800551a <_malloc_r+0x92>
 80054d2:	230c      	movs	r3, #12
 80054d4:	4630      	mov	r0, r6
 80054d6:	6033      	str	r3, [r6, #0]
 80054d8:	f000 f86c 	bl	80055b4 <__malloc_unlock>
 80054dc:	e7e3      	b.n	80054a6 <_malloc_r+0x1e>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	1b5b      	subs	r3, r3, r5
 80054e2:	d417      	bmi.n	8005514 <_malloc_r+0x8c>
 80054e4:	2b0b      	cmp	r3, #11
 80054e6:	d903      	bls.n	80054f0 <_malloc_r+0x68>
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	441c      	add	r4, r3
 80054ec:	6025      	str	r5, [r4, #0]
 80054ee:	e004      	b.n	80054fa <_malloc_r+0x72>
 80054f0:	6863      	ldr	r3, [r4, #4]
 80054f2:	42a2      	cmp	r2, r4
 80054f4:	bf0c      	ite	eq
 80054f6:	600b      	streq	r3, [r1, #0]
 80054f8:	6053      	strne	r3, [r2, #4]
 80054fa:	4630      	mov	r0, r6
 80054fc:	f000 f85a 	bl	80055b4 <__malloc_unlock>
 8005500:	f104 000b 	add.w	r0, r4, #11
 8005504:	1d23      	adds	r3, r4, #4
 8005506:	f020 0007 	bic.w	r0, r0, #7
 800550a:	1ac2      	subs	r2, r0, r3
 800550c:	d0cc      	beq.n	80054a8 <_malloc_r+0x20>
 800550e:	1a1b      	subs	r3, r3, r0
 8005510:	50a3      	str	r3, [r4, r2]
 8005512:	e7c9      	b.n	80054a8 <_malloc_r+0x20>
 8005514:	4622      	mov	r2, r4
 8005516:	6864      	ldr	r4, [r4, #4]
 8005518:	e7cc      	b.n	80054b4 <_malloc_r+0x2c>
 800551a:	1cc4      	adds	r4, r0, #3
 800551c:	f024 0403 	bic.w	r4, r4, #3
 8005520:	42a0      	cmp	r0, r4
 8005522:	d0e3      	beq.n	80054ec <_malloc_r+0x64>
 8005524:	1a21      	subs	r1, r4, r0
 8005526:	4630      	mov	r0, r6
 8005528:	f000 f82e 	bl	8005588 <_sbrk_r>
 800552c:	3001      	adds	r0, #1
 800552e:	d1dd      	bne.n	80054ec <_malloc_r+0x64>
 8005530:	e7cf      	b.n	80054d2 <_malloc_r+0x4a>
 8005532:	bf00      	nop
 8005534:	20000128 	.word	0x20000128
 8005538:	2000012c 	.word	0x2000012c

0800553c <_realloc_r>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	4607      	mov	r7, r0
 8005540:	4614      	mov	r4, r2
 8005542:	460e      	mov	r6, r1
 8005544:	b921      	cbnz	r1, 8005550 <_realloc_r+0x14>
 8005546:	4611      	mov	r1, r2
 8005548:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800554c:	f7ff bf9c 	b.w	8005488 <_malloc_r>
 8005550:	b922      	cbnz	r2, 800555c <_realloc_r+0x20>
 8005552:	f7ff ff4d 	bl	80053f0 <_free_r>
 8005556:	4625      	mov	r5, r4
 8005558:	4628      	mov	r0, r5
 800555a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800555c:	f000 f830 	bl	80055c0 <_malloc_usable_size_r>
 8005560:	42a0      	cmp	r0, r4
 8005562:	d20f      	bcs.n	8005584 <_realloc_r+0x48>
 8005564:	4621      	mov	r1, r4
 8005566:	4638      	mov	r0, r7
 8005568:	f7ff ff8e 	bl	8005488 <_malloc_r>
 800556c:	4605      	mov	r5, r0
 800556e:	2800      	cmp	r0, #0
 8005570:	d0f2      	beq.n	8005558 <_realloc_r+0x1c>
 8005572:	4631      	mov	r1, r6
 8005574:	4622      	mov	r2, r4
 8005576:	f7ff ff13 	bl	80053a0 <memcpy>
 800557a:	4631      	mov	r1, r6
 800557c:	4638      	mov	r0, r7
 800557e:	f7ff ff37 	bl	80053f0 <_free_r>
 8005582:	e7e9      	b.n	8005558 <_realloc_r+0x1c>
 8005584:	4635      	mov	r5, r6
 8005586:	e7e7      	b.n	8005558 <_realloc_r+0x1c>

08005588 <_sbrk_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	2300      	movs	r3, #0
 800558c:	4d05      	ldr	r5, [pc, #20]	; (80055a4 <_sbrk_r+0x1c>)
 800558e:	4604      	mov	r4, r0
 8005590:	4608      	mov	r0, r1
 8005592:	602b      	str	r3, [r5, #0]
 8005594:	f7fc feb4 	bl	8002300 <_sbrk>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d102      	bne.n	80055a2 <_sbrk_r+0x1a>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	b103      	cbz	r3, 80055a2 <_sbrk_r+0x1a>
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	20000268 	.word	0x20000268

080055a8 <__malloc_lock>:
 80055a8:	4801      	ldr	r0, [pc, #4]	; (80055b0 <__malloc_lock+0x8>)
 80055aa:	f000 b811 	b.w	80055d0 <__retarget_lock_acquire_recursive>
 80055ae:	bf00      	nop
 80055b0:	20000270 	.word	0x20000270

080055b4 <__malloc_unlock>:
 80055b4:	4801      	ldr	r0, [pc, #4]	; (80055bc <__malloc_unlock+0x8>)
 80055b6:	f000 b80c 	b.w	80055d2 <__retarget_lock_release_recursive>
 80055ba:	bf00      	nop
 80055bc:	20000270 	.word	0x20000270

080055c0 <_malloc_usable_size_r>:
 80055c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055c4:	1f18      	subs	r0, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bfbc      	itt	lt
 80055ca:	580b      	ldrlt	r3, [r1, r0]
 80055cc:	18c0      	addlt	r0, r0, r3
 80055ce:	4770      	bx	lr

080055d0 <__retarget_lock_acquire_recursive>:
 80055d0:	4770      	bx	lr

080055d2 <__retarget_lock_release_recursive>:
 80055d2:	4770      	bx	lr

080055d4 <_init>:
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d6:	bf00      	nop
 80055d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055da:	bc08      	pop	{r3}
 80055dc:	469e      	mov	lr, r3
 80055de:	4770      	bx	lr

080055e0 <_fini>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	bf00      	nop
 80055e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e6:	bc08      	pop	{r3}
 80055e8:	469e      	mov	lr, r3
 80055ea:	4770      	bx	lr
