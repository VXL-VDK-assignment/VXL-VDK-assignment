
group-assignment_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003b18  08003b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b78  08003b78  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08003b78  08003b78  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b78  08003b78  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000084  08003c04  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08003c04  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce0b  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227f  00000000  00000000  0002ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002f138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  0002fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001857c  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e96a  00000000  00000000  00048ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af6e  00000000  00000000  0005795e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e28cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c4  00000000  00000000  000e2920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b00 	.word	0x08003b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08003b00 	.word	0x08003b00

0800014c <initSomeVariables>:
int button_flag[NO_OF_BUTTONS];

int TimeOutForKeyPress[NO_OF_BUTTONS];
//init all KeyReg

void initSomeVariables() { //call this function in main.c
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i=0; i<NO_OF_BUTTONS; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e021      	b.n	800019c <initSomeVariables+0x50>
		button_flag[i] = 0; //flags
 8000158:	4a15      	ldr	r2, [pc, #84]	; (80001b0 <initSomeVariables+0x64>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg0[i] = NORMAL_STATE;
 8000162:	4a14      	ldr	r2, [pc, #80]	; (80001b4 <initSomeVariables+0x68>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg1[i] = NORMAL_STATE;
 800016c:	4a12      	ldr	r2, [pc, #72]	; (80001b8 <initSomeVariables+0x6c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg2[i] = NORMAL_STATE;
 8000176:	4a11      	ldr	r2, [pc, #68]	; (80001bc <initSomeVariables+0x70>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg3[i] = NORMAL_STATE;
 8000180:	4a0f      	ldr	r2, [pc, #60]	; (80001c0 <initSomeVariables+0x74>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2101      	movs	r1, #1
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TimeOutForKeyPress[i] = 300; //Auto change the buttons's state
 800018a:	4a0e      	ldr	r2, [pc, #56]	; (80001c4 <initSomeVariables+0x78>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000192:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<NO_OF_BUTTONS; i++) {
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	3301      	adds	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	2b02      	cmp	r3, #2
 80001a0:	ddda      	ble.n	8000158 <initSomeVariables+0xc>
	}
}
 80001a2:	bf00      	nop
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	2000011c 	.word	0x2000011c
 80001b4:	200000f8 	.word	0x200000f8
 80001b8:	20000104 	.word	0x20000104
 80001bc:	20000128 	.word	0x20000128
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	20000110 	.word	0x20000110

080001c8 <getKeyInput>:

void getKeyInput() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	for (int i=0; i<NO_OF_BUTTONS; i++) {
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e0b8      	b.n	8000346 <getKeyInput+0x17e>
		switch(i) {
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2b02      	cmp	r3, #2
 80001d8:	d03f      	beq.n	800025a <getKeyInput+0x92>
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2b02      	cmp	r3, #2
 80001de:	dc57      	bgt.n	8000290 <getKeyInput+0xc8>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d003      	beq.n	80001ee <getKeyInput+0x26>
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d01b      	beq.n	8000224 <getKeyInput+0x5c>
				KeyReg1[i] = KeyReg0[i];
				KeyReg0[i] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
				break;
			default:
				//todo
				break;
 80001ec:	e050      	b.n	8000290 <getKeyInput+0xc8>
				KeyReg2[i] = KeyReg1[i];
 80001ee:	4a5a      	ldr	r2, [pc, #360]	; (8000358 <getKeyInput+0x190>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f6:	4959      	ldr	r1, [pc, #356]	; (800035c <getKeyInput+0x194>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg1[i] = KeyReg0[i];
 80001fe:	4a58      	ldr	r2, [pc, #352]	; (8000360 <getKeyInput+0x198>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4954      	ldr	r1, [pc, #336]	; (8000358 <getKeyInput+0x190>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg0[i] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 800020e:	2102      	movs	r1, #2
 8000210:	4854      	ldr	r0, [pc, #336]	; (8000364 <getKeyInput+0x19c>)
 8000212:	f001 fa75 	bl	8001700 <HAL_GPIO_ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	4619      	mov	r1, r3
 800021a:	4a51      	ldr	r2, [pc, #324]	; (8000360 <getKeyInput+0x198>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000222:	e036      	b.n	8000292 <getKeyInput+0xca>
				KeyReg2[i] = KeyReg1[i];
 8000224:	4a4c      	ldr	r2, [pc, #304]	; (8000358 <getKeyInput+0x190>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	494b      	ldr	r1, [pc, #300]	; (800035c <getKeyInput+0x194>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg1[i] = KeyReg0[i];
 8000234:	4a4a      	ldr	r2, [pc, #296]	; (8000360 <getKeyInput+0x198>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	4946      	ldr	r1, [pc, #280]	; (8000358 <getKeyInput+0x190>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg0[i] = HAL_GPIO_ReadPin(A2_GPIO_Port,A2_Pin);
 8000244:	2110      	movs	r1, #16
 8000246:	4847      	ldr	r0, [pc, #284]	; (8000364 <getKeyInput+0x19c>)
 8000248:	f001 fa5a 	bl	8001700 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	4619      	mov	r1, r3
 8000250:	4a43      	ldr	r2, [pc, #268]	; (8000360 <getKeyInput+0x198>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000258:	e01b      	b.n	8000292 <getKeyInput+0xca>
				KeyReg2[i] = KeyReg1[i];
 800025a:	4a3f      	ldr	r2, [pc, #252]	; (8000358 <getKeyInput+0x190>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	493e      	ldr	r1, [pc, #248]	; (800035c <getKeyInput+0x194>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg1[i] = KeyReg0[i];
 800026a:	4a3d      	ldr	r2, [pc, #244]	; (8000360 <getKeyInput+0x198>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000272:	4939      	ldr	r1, [pc, #228]	; (8000358 <getKeyInput+0x190>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				KeyReg0[i] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 800027a:	2101      	movs	r1, #1
 800027c:	483a      	ldr	r0, [pc, #232]	; (8000368 <getKeyInput+0x1a0>)
 800027e:	f001 fa3f 	bl	8001700 <HAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	4619      	mov	r1, r3
 8000286:	4a36      	ldr	r2, [pc, #216]	; (8000360 <getKeyInput+0x198>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800028e:	e000      	b.n	8000292 <getKeyInput+0xca>
				break;
 8000290:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000292:	4a31      	ldr	r2, [pc, #196]	; (8000358 <getKeyInput+0x190>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029a:	4931      	ldr	r1, [pc, #196]	; (8000360 <getKeyInput+0x198>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d14c      	bne.n	8000340 <getKeyInput+0x178>
 80002a6:	4a2c      	ldr	r2, [pc, #176]	; (8000358 <getKeyInput+0x190>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ae:	492b      	ldr	r1, [pc, #172]	; (800035c <getKeyInput+0x194>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d142      	bne.n	8000340 <getKeyInput+0x178>
			if (KeyReg2[i] != KeyReg3[i]){
 80002ba:	4a28      	ldr	r2, [pc, #160]	; (800035c <getKeyInput+0x194>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c2:	492a      	ldr	r1, [pc, #168]	; (800036c <getKeyInput+0x1a4>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d019      	beq.n	8000302 <getKeyInput+0x13a>
			  KeyReg3[i] = KeyReg2[i];
 80002ce:	4a23      	ldr	r2, [pc, #140]	; (800035c <getKeyInput+0x194>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d6:	4925      	ldr	r1, [pc, #148]	; (800036c <getKeyInput+0x1a4>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg3[i] == PRESSED_STATE){
 80002de:	4a23      	ldr	r2, [pc, #140]	; (800036c <getKeyInput+0x1a4>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d12a      	bne.n	8000340 <getKeyInput+0x178>
				TimeOutForKeyPress[i] = 300;
 80002ea:	4a21      	ldr	r2, [pc, #132]	; (8000370 <getKeyInput+0x1a8>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				button_flag[i] = 1;
 80002f6:	4a1f      	ldr	r2, [pc, #124]	; (8000374 <getKeyInput+0x1ac>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2101      	movs	r1, #1
 80002fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000300:	e01e      	b.n	8000340 <getKeyInput+0x178>
			  }
			} else{
				TimeOutForKeyPress[i]--;
 8000302:	4a1b      	ldr	r2, [pc, #108]	; (8000370 <getKeyInput+0x1a8>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030a:	1e5a      	subs	r2, r3, #1
 800030c:	4918      	ldr	r1, [pc, #96]	; (8000370 <getKeyInput+0x1a8>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000314:	4a16      	ldr	r2, [pc, #88]	; (8000370 <getKeyInput+0x1a8>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d10f      	bne.n	8000340 <getKeyInput+0x178>
					if (KeyReg3[i] == PRESSED_STATE){
 8000320:	4a12      	ldr	r2, [pc, #72]	; (800036c <getKeyInput+0x1a4>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d109      	bne.n	8000340 <getKeyInput+0x178>
						TimeOutForKeyPress[i] = 100;
 800032c:	4a10      	ldr	r2, [pc, #64]	; (8000370 <getKeyInput+0x1a8>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2164      	movs	r1, #100	; 0x64
 8000332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						button_flag[i] = 1;
 8000336:	4a0f      	ldr	r2, [pc, #60]	; (8000374 <getKeyInput+0x1ac>)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2101      	movs	r1, #1
 800033c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<NO_OF_BUTTONS; i++) {
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3301      	adds	r3, #1
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2b02      	cmp	r3, #2
 800034a:	f77f af43 	ble.w	80001d4 <getKeyInput+0xc>
				}
			}
		}

	}
}
 800034e:	bf00      	nop
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000104 	.word	0x20000104
 800035c:	20000128 	.word	0x20000128
 8000360:	200000f8 	.word	0x200000f8
 8000364:	40010800 	.word	0x40010800
 8000368:	40010c00 	.word	0x40010c00
 800036c:	200000ec 	.word	0x200000ec
 8000370:	20000110 	.word	0x20000110
 8000374:	2000011c 	.word	0x2000011c

08000378 <isButtonPressed>:

int isButtonPressed(int index) {
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000380:	4a09      	ldr	r2, [pc, #36]	; (80003a8 <isButtonPressed+0x30>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d106      	bne.n	800039a <isButtonPressed+0x22>
		button_flag[index] = 0;
 800038c:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <isButtonPressed+0x30>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2100      	movs	r1, #0
 8000392:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000396:	2301      	movs	r3, #1
 8000398:	e000      	b.n	800039c <isButtonPressed+0x24>
	}
	return 0;
 800039a:	2300      	movs	r3, #0
}
 800039c:	4618      	mov	r0, r3
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	2000011c 	.word	0x2000011c

080003ac <fsm_automatic_run1>:
//}

//int led7SegState = 1;
//int led7SegState2 = 1;

void fsm_automatic_run1() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	switch(LANE1_STATUS) { //for lane 1
 80003b0:	4b2f      	ldr	r3, [pc, #188]	; (8000470 <fsm_automatic_run1+0xc4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	d857      	bhi.n	800046a <fsm_automatic_run1+0xbe>
 80003ba:	a201      	add	r2, pc, #4	; (adr r2, 80003c0 <fsm_automatic_run1+0x14>)
 80003bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c0:	080003d1 	.word	0x080003d1
 80003c4:	080003ef 	.word	0x080003ef
 80003c8:	08000415 	.word	0x08000415
 80003cc:	0800043b 	.word	0x0800043b
		case LANE1_INIT:
			initTrafficLight1();
 80003d0:	f000 f9f8 	bl	80007c4 <initTrafficLight1>
			LANE1_STATUS = LANE1_RED;
 80003d4:	4b26      	ldr	r3, [pc, #152]	; (8000470 <fsm_automatic_run1+0xc4>)
 80003d6:	2202      	movs	r2, #2
 80003d8:	601a      	str	r2, [r3, #0]
			setTimer1(led_duration[0]*1000);
 80003da:	4b26      	ldr	r3, [pc, #152]	; (8000474 <fsm_automatic_run1+0xc8>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003e2:	fb02 f303 	mul.w	r3, r2, r3
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fbfe 	bl	8000be8 <setTimer1>
//			timer4_flag = 1;
//			led7SegState = 1;
			break;
 80003ec:	e03d      	b.n	800046a <fsm_automatic_run1+0xbe>
		case LANE1_RED:
			setTrafficRed1();
 80003ee:	f000 fa31 	bl	8000854 <setTrafficRed1>
//					break;
//				}
//				default:
//					break;
//			}
			if(timer1_flag == 1) {
 80003f2:	4b21      	ldr	r3, [pc, #132]	; (8000478 <fsm_automatic_run1+0xcc>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d132      	bne.n	8000460 <fsm_automatic_run1+0xb4>
				setTimer1(led_duration[2]*1000);
 80003fa:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <fsm_automatic_run1+0xc8>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000402:	fb02 f303 	mul.w	r3, r2, r3
 8000406:	4618      	mov	r0, r3
 8000408:	f000 fbee 	bl	8000be8 <setTimer1>
				LANE1_STATUS = LANE1_GREEN;
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <fsm_automatic_run1+0xc4>)
 800040e:	2203      	movs	r2, #3
 8000410:	601a      	str	r2, [r3, #0]
//				countDownRed1 = 0; //reset
//				timer4_flag = 1;
//				led7SegState = 1;
			}
			break;
 8000412:	e025      	b.n	8000460 <fsm_automatic_run1+0xb4>
		case LANE1_GREEN:
			setTrafficGreen1();
 8000414:	f000 f9fa 	bl	800080c <setTrafficGreen1>

			if(timer1_flag == 1) {
 8000418:	4b17      	ldr	r3, [pc, #92]	; (8000478 <fsm_automatic_run1+0xcc>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d121      	bne.n	8000464 <fsm_automatic_run1+0xb8>
				setTimer1(led_duration[1]*1000);
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <fsm_automatic_run1+0xc8>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000428:	fb02 f303 	mul.w	r3, r2, r3
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fbdb 	bl	8000be8 <setTimer1>
				LANE1_STATUS = LANE1_YELLOW;
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <fsm_automatic_run1+0xc4>)
 8000434:	2204      	movs	r2, #4
 8000436:	601a      	str	r2, [r3, #0]
//				countDownGreen1 = 0; //reset
			}
			break;
 8000438:	e014      	b.n	8000464 <fsm_automatic_run1+0xb8>
		case LANE1_YELLOW:
			setTrafficYellow1();
 800043a:	f000 fa2f 	bl	800089c <setTrafficYellow1>

			if(timer1_flag == 1) {
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <fsm_automatic_run1+0xcc>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d110      	bne.n	8000468 <fsm_automatic_run1+0xbc>
				setTimer1(led_duration[0]*1000);
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <fsm_automatic_run1+0xc8>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800044e:	fb02 f303 	mul.w	r3, r2, r3
 8000452:	4618      	mov	r0, r3
 8000454:	f000 fbc8 	bl	8000be8 <setTimer1>
				LANE1_STATUS = LANE1_RED;
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <fsm_automatic_run1+0xc4>)
 800045a:	2202      	movs	r2, #2
 800045c:	601a      	str	r2, [r3, #0]
//				countDownYellow1 = 0; //reset
			}
			break;
 800045e:	e003      	b.n	8000468 <fsm_automatic_run1+0xbc>
			break;
 8000460:	bf00      	nop
 8000462:	e002      	b.n	800046a <fsm_automatic_run1+0xbe>
			break;
 8000464:	bf00      	nop
 8000466:	e000      	b.n	800046a <fsm_automatic_run1+0xbe>
			break;
 8000468:	bf00      	nop
	}
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000000 	.word	0x20000000
 8000474:	20000008 	.word	0x20000008
 8000478:	200000b8 	.word	0x200000b8

0800047c <fsm_automatic_run2>:

void fsm_automatic_run2() {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	switch(LANE2_STATUS) { //for lane 2
 8000480:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <fsm_automatic_run2+0xc4>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3b0b      	subs	r3, #11
 8000486:	2b03      	cmp	r3, #3
 8000488:	d857      	bhi.n	800053a <fsm_automatic_run2+0xbe>
 800048a:	a201      	add	r2, pc, #4	; (adr r2, 8000490 <fsm_automatic_run2+0x14>)
 800048c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000490:	080004a1 	.word	0x080004a1
 8000494:	080004bf 	.word	0x080004bf
 8000498:	080004e5 	.word	0x080004e5
 800049c:	0800050b 	.word	0x0800050b
		case LANE2_INIT:
			initTrafficLight2();
 80004a0:	f000 f9a4 	bl	80007ec <initTrafficLight2>
			LANE2_STATUS = LANE2_GREEN;
 80004a4:	4b26      	ldr	r3, [pc, #152]	; (8000540 <fsm_automatic_run2+0xc4>)
 80004a6:	220d      	movs	r2, #13
 80004a8:	601a      	str	r2, [r3, #0]
			setTimer2(led_duration[2]*1000);
 80004aa:	4b26      	ldr	r3, [pc, #152]	; (8000544 <fsm_automatic_run2+0xc8>)
 80004ac:	689b      	ldr	r3, [r3, #8]
 80004ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004b2:	fb02 f303 	mul.w	r3, r2, r3
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 fbb2 	bl	8000c20 <setTimer2>
//			timer3_flag = 1; //
//			led7SegState2 = 1;
			break;
 80004bc:	e03d      	b.n	800053a <fsm_automatic_run2+0xbe>
		case LANE2_RED:
			setTrafficRed2();
 80004be:	f000 f9dd 	bl	800087c <setTrafficRed2>
//					setTimer3(250);
//					led7SegState2 = 1;
//					break;
//				}
//			}
			if(timer2_flag == 1) {
 80004c2:	4b21      	ldr	r3, [pc, #132]	; (8000548 <fsm_automatic_run2+0xcc>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d132      	bne.n	8000530 <fsm_automatic_run2+0xb4>
				setTimer2(led_duration[2]*1000);
 80004ca:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <fsm_automatic_run2+0xc8>)
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004d2:	fb02 f303 	mul.w	r3, r2, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fba2 	bl	8000c20 <setTimer2>
				LANE2_STATUS = LANE2_GREEN;
 80004dc:	4b18      	ldr	r3, [pc, #96]	; (8000540 <fsm_automatic_run2+0xc4>)
 80004de:	220d      	movs	r2, #13
 80004e0:	601a      	str	r2, [r3, #0]
//				countDownRed2 = 0; //reset
			}
			break;
 80004e2:	e025      	b.n	8000530 <fsm_automatic_run2+0xb4>
		case LANE2_GREEN:
			setTrafficGreen2();
 80004e4:	f000 f9a6 	bl	8000834 <setTrafficGreen2>

			if(timer2_flag == 1) {
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <fsm_automatic_run2+0xcc>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d121      	bne.n	8000534 <fsm_automatic_run2+0xb8>
				setTimer2(led_duration[1]*1000);
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <fsm_automatic_run2+0xc8>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004f8:	fb02 f303 	mul.w	r3, r2, r3
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 fb8f 	bl	8000c20 <setTimer2>
				LANE2_STATUS = LANE2_YELLOW;
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <fsm_automatic_run2+0xc4>)
 8000504:	220e      	movs	r2, #14
 8000506:	601a      	str	r2, [r3, #0]
//				countDownGreen2 = 0; //reset
			}
			break;
 8000508:	e014      	b.n	8000534 <fsm_automatic_run2+0xb8>
		case LANE2_YELLOW:
			setTrafficYellow2();
 800050a:	f000 f9db 	bl	80008c4 <setTrafficYellow2>

			if(timer2_flag == 1) {
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <fsm_automatic_run2+0xcc>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d110      	bne.n	8000538 <fsm_automatic_run2+0xbc>
				setTimer2(led_duration[0]*1000);
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <fsm_automatic_run2+0xc8>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800051e:	fb02 f303 	mul.w	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fb7c 	bl	8000c20 <setTimer2>
				LANE2_STATUS = LANE2_RED;
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <fsm_automatic_run2+0xc4>)
 800052a:	220c      	movs	r2, #12
 800052c:	601a      	str	r2, [r3, #0]
//				countDownYellow2 = 0; //reset
			}
			break;
 800052e:	e003      	b.n	8000538 <fsm_automatic_run2+0xbc>
			break;
 8000530:	bf00      	nop
 8000532:	e002      	b.n	800053a <fsm_automatic_run2+0xbe>
			break;
 8000534:	bf00      	nop
 8000536:	e000      	b.n	800053a <fsm_automatic_run2+0xbe>
			break;
 8000538:	bf00      	nop
	}
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000004 	.word	0x20000004
 8000544:	20000008 	.word	0x20000008
 8000548:	200000c0 	.word	0x200000c0

0800054c <fsm_for_input_processing>:
int counterForGreen = 0;
int counterForYellow = 0;

int loopFlag = 0;

void fsm_for_input_processing(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	switch(buttonState){
 8000550:	4b91      	ldr	r3, [pc, #580]	; (8000798 <fsm_for_input_processing+0x24c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b03      	cmp	r3, #3
 8000556:	f200 811c 	bhi.w	8000792 <fsm_for_input_processing+0x246>
 800055a:	a201      	add	r2, pc, #4	; (adr r2, 8000560 <fsm_for_input_processing+0x14>)
 800055c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000560:	08000571 	.word	0x08000571
 8000564:	08000641 	.word	0x08000641
 8000568:	0800064b 	.word	0x0800064b
 800056c:	080006ff 	.word	0x080006ff
//			countDownRed1 = 0;
//			countDownRed2 = 0;
//			countDownYellow1 = 0;
//			countDownYellow2 = 0;

			LANE1_STATUS = LANE1_INIT;
 8000570:	4b8a      	ldr	r3, [pc, #552]	; (800079c <fsm_for_input_processing+0x250>)
 8000572:	2201      	movs	r2, #1
 8000574:	601a      	str	r2, [r3, #0]
			LANE2_STATUS = LANE2_INIT;
 8000576:	4b8a      	ldr	r3, [pc, #552]	; (80007a0 <fsm_for_input_processing+0x254>)
 8000578:	220b      	movs	r2, #11
 800057a:	601a      	str	r2, [r3, #0]

			while(1) {

				fsm_automatic_run1();
 800057c:	f7ff ff16 	bl	80003ac <fsm_automatic_run1>
				fsm_automatic_run2();
 8000580:	f7ff ff7c 	bl	800047c <fsm_automatic_run2>

				if(isButtonPressed(0) == 1) {
 8000584:	2000      	movs	r0, #0
 8000586:	f7ff fef7 	bl	8000378 <isButtonPressed>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d1f5      	bne.n	800057c <fsm_for_input_processing+0x30>
					buttonState = SET_TIME_RED;
 8000590:	4b81      	ldr	r3, [pc, #516]	; (8000798 <fsm_for_input_processing+0x24c>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
					setTrafficRed1();
 8000596:	f000 f95d 	bl	8000854 <setTrafficRed1>
					setTrafficRed2();
 800059a:	f000 f96f 	bl	800087c <setTrafficRed2>
					loopFlag = 0; //reset
 800059e:	4b81      	ldr	r3, [pc, #516]	; (80007a4 <fsm_for_input_processing+0x258>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
					timer1_flag = 1; //for toggle LEDs in mode 2, 3, 4
 80005a4:	4b80      	ldr	r3, [pc, #512]	; (80007a8 <fsm_for_input_processing+0x25c>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
					break;
 80005aa:	bf00      	nop
				}
			}
			break;
 80005ac:	e0f1      	b.n	8000792 <fsm_for_input_processing+0x246>
		case SET_TIME_RED: //Mode 2
			while (loopFlag == 0) {
				if (timer1_flag == 1) { //toggle RED LEDs every 0.5s
 80005ae:	4b7e      	ldr	r3, [pc, #504]	; (80007a8 <fsm_for_input_processing+0x25c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d10c      	bne.n	80005d0 <fsm_for_input_processing+0x84>
					setTimer1(500);
 80005b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ba:	f000 fb15 	bl	8000be8 <setTimer1>
					HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	487a      	ldr	r0, [pc, #488]	; (80007ac <fsm_for_input_processing+0x260>)
 80005c4:	f001 f8cb 	bl	800175e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80005c8:	2120      	movs	r1, #32
 80005ca:	4879      	ldr	r0, [pc, #484]	; (80007b0 <fsm_for_input_processing+0x264>)
 80005cc:	f001 f8c7 	bl	800175e <HAL_GPIO_TogglePin>
				}

				if (isButtonPressed(1) == 1) counterForRed++;
 80005d0:	2001      	movs	r0, #1
 80005d2:	f7ff fed1 	bl	8000378 <isButtonPressed>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d104      	bne.n	80005e6 <fsm_for_input_processing+0x9a>
 80005dc:	4b75      	ldr	r3, [pc, #468]	; (80007b4 <fsm_for_input_processing+0x268>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a74      	ldr	r2, [pc, #464]	; (80007b4 <fsm_for_input_processing+0x268>)
 80005e4:	6013      	str	r3, [r2, #0]

				if(isButtonPressed(2) == 1) {
 80005e6:	2002      	movs	r0, #2
 80005e8:	f7ff fec6 	bl	8000378 <isButtonPressed>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d110      	bne.n	8000614 <fsm_for_input_processing+0xc8>
					led_duration[0] += counterForRed;
 80005f2:	4b71      	ldr	r3, [pc, #452]	; (80007b8 <fsm_for_input_processing+0x26c>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	4b6f      	ldr	r3, [pc, #444]	; (80007b4 <fsm_for_input_processing+0x268>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4413      	add	r3, r2
 80005fc:	4a6e      	ldr	r2, [pc, #440]	; (80007b8 <fsm_for_input_processing+0x26c>)
 80005fe:	6013      	str	r3, [r2, #0]
					if (led_duration[0] > 99) led_duration[0] = 1;
 8000600:	4b6d      	ldr	r3, [pc, #436]	; (80007b8 <fsm_for_input_processing+0x26c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b63      	cmp	r3, #99	; 0x63
 8000606:	dd02      	ble.n	800060e <fsm_for_input_processing+0xc2>
 8000608:	4b6b      	ldr	r3, [pc, #428]	; (80007b8 <fsm_for_input_processing+0x26c>)
 800060a:	2201      	movs	r2, #1
 800060c:	601a      	str	r2, [r3, #0]
					counterForRed = 0; //reset
 800060e:	4b69      	ldr	r3, [pc, #420]	; (80007b4 <fsm_for_input_processing+0x268>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
				}

				if(isButtonPressed(0) == 1) {
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff feaf 	bl	8000378 <isButtonPressed>
 800061a:	4603      	mov	r3, r0
 800061c:	2b01      	cmp	r3, #1
 800061e:	d10f      	bne.n	8000640 <fsm_for_input_processing+0xf4>
					buttonState = SET_TIME_YELLOW;
 8000620:	4b5d      	ldr	r3, [pc, #372]	; (8000798 <fsm_for_input_processing+0x24c>)
 8000622:	2202      	movs	r2, #2
 8000624:	701a      	strb	r2, [r3, #0]
					setTrafficYellow1();
 8000626:	f000 f939 	bl	800089c <setTrafficYellow1>
					setTrafficYellow2();
 800062a:	f000 f94b 	bl	80008c4 <setTrafficYellow2>
					loopFlag = 1;
 800062e:	4b5d      	ldr	r3, [pc, #372]	; (80007a4 <fsm_for_input_processing+0x258>)
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
					timer1_flag = 1; //for toggle LEDs in mode 2, 3, 4
 8000634:	4b5c      	ldr	r3, [pc, #368]	; (80007a8 <fsm_for_input_processing+0x25c>)
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]
					counterForRed = 0; //rest
 800063a:	4b5e      	ldr	r3, [pc, #376]	; (80007b4 <fsm_for_input_processing+0x268>)
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 8000640:	4b58      	ldr	r3, [pc, #352]	; (80007a4 <fsm_for_input_processing+0x258>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0b2      	beq.n	80005ae <fsm_for_input_processing+0x62>
				}
			}
			break;
 8000648:	e0a3      	b.n	8000792 <fsm_for_input_processing+0x246>
		case SET_TIME_YELLOW: //Mode 3
			loopFlag = 0;
 800064a:	4b56      	ldr	r3, [pc, #344]	; (80007a4 <fsm_for_input_processing+0x258>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 8000650:	e050      	b.n	80006f4 <fsm_for_input_processing+0x1a8>
				if (timer1_flag == 1) { //toggle YELLOW LEDs every 0.5s
 8000652:	4b55      	ldr	r3, [pc, #340]	; (80007a8 <fsm_for_input_processing+0x25c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d114      	bne.n	8000684 <fsm_for_input_processing+0x138>
					setTimer1(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065e:	f000 fac3 	bl	8000be8 <setTimer1>
					HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000666:	4851      	ldr	r0, [pc, #324]	; (80007ac <fsm_for_input_processing+0x260>)
 8000668:	f001 f879 	bl	800175e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 800066c:	2108      	movs	r1, #8
 800066e:	4850      	ldr	r0, [pc, #320]	; (80007b0 <fsm_for_input_processing+0x264>)
 8000670:	f001 f875 	bl	800175e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000674:	2120      	movs	r1, #32
 8000676:	484e      	ldr	r0, [pc, #312]	; (80007b0 <fsm_for_input_processing+0x264>)
 8000678:	f001 f871 	bl	800175e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800067c:	2110      	movs	r1, #16
 800067e:	484c      	ldr	r0, [pc, #304]	; (80007b0 <fsm_for_input_processing+0x264>)
 8000680:	f001 f86d 	bl	800175e <HAL_GPIO_TogglePin>
				}

				if (isButtonPressed(1) == 1) counterForYellow++;
 8000684:	2001      	movs	r0, #1
 8000686:	f7ff fe77 	bl	8000378 <isButtonPressed>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d104      	bne.n	800069a <fsm_for_input_processing+0x14e>
 8000690:	4b4a      	ldr	r3, [pc, #296]	; (80007bc <fsm_for_input_processing+0x270>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	4a49      	ldr	r2, [pc, #292]	; (80007bc <fsm_for_input_processing+0x270>)
 8000698:	6013      	str	r3, [r2, #0]

				if(isButtonPressed(2) == 1) {
 800069a:	2002      	movs	r0, #2
 800069c:	f7ff fe6c 	bl	8000378 <isButtonPressed>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d110      	bne.n	80006c8 <fsm_for_input_processing+0x17c>
					led_duration[1] += counterForYellow;
 80006a6:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <fsm_for_input_processing+0x26c>)
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	4b44      	ldr	r3, [pc, #272]	; (80007bc <fsm_for_input_processing+0x270>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a41      	ldr	r2, [pc, #260]	; (80007b8 <fsm_for_input_processing+0x26c>)
 80006b2:	6053      	str	r3, [r2, #4]
					if (led_duration[1] > 99) led_duration[1] = 1;
 80006b4:	4b40      	ldr	r3, [pc, #256]	; (80007b8 <fsm_for_input_processing+0x26c>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	2b63      	cmp	r3, #99	; 0x63
 80006ba:	dd02      	ble.n	80006c2 <fsm_for_input_processing+0x176>
 80006bc:	4b3e      	ldr	r3, [pc, #248]	; (80007b8 <fsm_for_input_processing+0x26c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	605a      	str	r2, [r3, #4]
					counterForYellow = 0; //reset
 80006c2:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <fsm_for_input_processing+0x270>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
				}

				if(isButtonPressed(0) == 1) {
 80006c8:	2000      	movs	r0, #0
 80006ca:	f7ff fe55 	bl	8000378 <isButtonPressed>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d10f      	bne.n	80006f4 <fsm_for_input_processing+0x1a8>
					buttonState = SET_TIME_GREEN;
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <fsm_for_input_processing+0x24c>)
 80006d6:	2203      	movs	r2, #3
 80006d8:	701a      	strb	r2, [r3, #0]
					setTrafficGreen1();
 80006da:	f000 f897 	bl	800080c <setTrafficGreen1>
					setTrafficGreen2();
 80006de:	f000 f8a9 	bl	8000834 <setTrafficGreen2>
					loopFlag = 1;
 80006e2:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <fsm_for_input_processing+0x258>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	601a      	str	r2, [r3, #0]
					timer1_flag = 1; //for toggle LEDs in mode 2, 3, 4
 80006e8:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <fsm_for_input_processing+0x25c>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
					counterForYellow = 0; //reset
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <fsm_for_input_processing+0x270>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <fsm_for_input_processing+0x258>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0aa      	beq.n	8000652 <fsm_for_input_processing+0x106>
				}
			}
			break;
 80006fc:	e049      	b.n	8000792 <fsm_for_input_processing+0x246>
		case SET_TIME_GREEN: //Mode 4
			loopFlag = 0;
 80006fe:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <fsm_for_input_processing+0x258>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 8000704:	e040      	b.n	8000788 <fsm_for_input_processing+0x23c>
				if (timer1_flag == 1) { //toggle GREEN LEDs every 0.5s
 8000706:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <fsm_for_input_processing+0x25c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d10b      	bne.n	8000726 <fsm_for_input_processing+0x1da>
					setTimer1(500);
 800070e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000712:	f000 fa69 	bl	8000be8 <setTimer1>
					HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000716:	2108      	movs	r1, #8
 8000718:	4825      	ldr	r0, [pc, #148]	; (80007b0 <fsm_for_input_processing+0x264>)
 800071a:	f001 f820 	bl	800175e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800071e:	2110      	movs	r1, #16
 8000720:	4823      	ldr	r0, [pc, #140]	; (80007b0 <fsm_for_input_processing+0x264>)
 8000722:	f001 f81c 	bl	800175e <HAL_GPIO_TogglePin>
				}

				if (isButtonPressed(1) == 1) counterForGreen++;
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff fe26 	bl	8000378 <isButtonPressed>
 800072c:	4603      	mov	r3, r0
 800072e:	2b01      	cmp	r3, #1
 8000730:	d104      	bne.n	800073c <fsm_for_input_processing+0x1f0>
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <fsm_for_input_processing+0x274>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	3301      	adds	r3, #1
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <fsm_for_input_processing+0x274>)
 800073a:	6013      	str	r3, [r2, #0]

				if(isButtonPressed(2) == 1) {
 800073c:	2002      	movs	r0, #2
 800073e:	f7ff fe1b 	bl	8000378 <isButtonPressed>
 8000742:	4603      	mov	r3, r0
 8000744:	2b01      	cmp	r3, #1
 8000746:	d110      	bne.n	800076a <fsm_for_input_processing+0x21e>
					led_duration[2] += counterForGreen;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <fsm_for_input_processing+0x26c>)
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <fsm_for_input_processing+0x274>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4413      	add	r3, r2
 8000752:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <fsm_for_input_processing+0x26c>)
 8000754:	6093      	str	r3, [r2, #8]
					if (led_duration[2] > 99) led_duration[2] = 1;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <fsm_for_input_processing+0x26c>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	2b63      	cmp	r3, #99	; 0x63
 800075c:	dd02      	ble.n	8000764 <fsm_for_input_processing+0x218>
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <fsm_for_input_processing+0x26c>)
 8000760:	2201      	movs	r2, #1
 8000762:	609a      	str	r2, [r3, #8]
					counterForGreen = 0; //reset
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <fsm_for_input_processing+0x274>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
				}

				if(isButtonPressed(0) == 1) {
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff fe04 	bl	8000378 <isButtonPressed>
 8000770:	4603      	mov	r3, r0
 8000772:	2b01      	cmp	r3, #1
 8000774:	d108      	bne.n	8000788 <fsm_for_input_processing+0x23c>
					buttonState = NORMAL;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <fsm_for_input_processing+0x24c>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
					loopFlag = 1;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <fsm_for_input_processing+0x258>)
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
					counterForGreen = 0; //reset
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <fsm_for_input_processing+0x274>)
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
			while (loopFlag == 0) {
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <fsm_for_input_processing+0x258>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0ba      	beq.n	8000706 <fsm_for_input_processing+0x1ba>
				}
			}
			break;
 8000790:	bf00      	nop
	}
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000a0 	.word	0x200000a0
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000004 	.word	0x20000004
 80007a4:	200000b0 	.word	0x200000b0
 80007a8:	200000b8 	.word	0x200000b8
 80007ac:	40010800 	.word	0x40010800
 80007b0:	40010c00 	.word	0x40010c00
 80007b4:	200000a4 	.word	0x200000a4
 80007b8:	20000008 	.word	0x20000008
 80007bc:	200000ac 	.word	0x200000ac
 80007c0:	200000a8 	.word	0x200000a8

080007c4 <initTrafficLight1>:
//	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, ((number>>4)&0x01)^0x01);
//	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, ((number>>5)&0x01)^0x01);
//	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, ((number>>6)&0x01)^0x01);
//}

void initTrafficLight1() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET); //0
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <initTrafficLight1+0x20>)
 80007d0:	f000 ffad 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET); //0
 80007d4:	2200      	movs	r2, #0
 80007d6:	2108      	movs	r1, #8
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <initTrafficLight1+0x24>)
 80007da:	f000 ffa8 	bl	800172e <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40010800 	.word	0x40010800
 80007e8:	40010c00 	.word	0x40010c00

080007ec <initTrafficLight2>:

void initTrafficLight2() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET); //0
 80007f0:	2200      	movs	r2, #0
 80007f2:	2120      	movs	r1, #32
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <initTrafficLight2+0x1c>)
 80007f6:	f000 ff9a 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET); //0
 80007fa:	2200      	movs	r2, #0
 80007fc:	2110      	movs	r1, #16
 80007fe:	4802      	ldr	r0, [pc, #8]	; (8000808 <initTrafficLight2+0x1c>)
 8000800:	f000 ff95 	bl	800172e <HAL_GPIO_WritePin>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40010c00 	.word	0x40010c00

0800080c <setTrafficGreen1>:
void setTrafficGreen1() {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET); //0
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <setTrafficGreen1+0x20>)
 8000818:	f000 ff89 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET); //1
 800081c:	2201      	movs	r2, #1
 800081e:	2108      	movs	r1, #8
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <setTrafficGreen1+0x24>)
 8000822:	f000 ff84 	bl	800172e <HAL_GPIO_WritePin>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40010800 	.word	0x40010800
 8000830:	40010c00 	.word	0x40010c00

08000834 <setTrafficGreen2>:
void setTrafficGreen2() {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET); //0
 8000838:	2200      	movs	r2, #0
 800083a:	2120      	movs	r1, #32
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <setTrafficGreen2+0x1c>)
 800083e:	f000 ff76 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET); //1
 8000842:	2201      	movs	r2, #1
 8000844:	2110      	movs	r1, #16
 8000846:	4802      	ldr	r0, [pc, #8]	; (8000850 <setTrafficGreen2+0x1c>)
 8000848:	f000 ff71 	bl	800172e <HAL_GPIO_WritePin>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40010c00 	.word	0x40010c00

08000854 <setTrafficRed1>:

void setTrafficRed1() {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET); //1
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <setTrafficRed1+0x20>)
 8000860:	f000 ff65 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET); //0
 8000864:	2200      	movs	r2, #0
 8000866:	2108      	movs	r1, #8
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <setTrafficRed1+0x24>)
 800086a:	f000 ff60 	bl	800172e <HAL_GPIO_WritePin>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40010800 	.word	0x40010800
 8000878:	40010c00 	.word	0x40010c00

0800087c <setTrafficRed2>:
void setTrafficRed2() {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET); //1
 8000880:	2201      	movs	r2, #1
 8000882:	2120      	movs	r1, #32
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <setTrafficRed2+0x1c>)
 8000886:	f000 ff52 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET); //0
 800088a:	2200      	movs	r2, #0
 800088c:	2110      	movs	r1, #16
 800088e:	4802      	ldr	r0, [pc, #8]	; (8000898 <setTrafficRed2+0x1c>)
 8000890:	f000 ff4d 	bl	800172e <HAL_GPIO_WritePin>
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40010c00 	.word	0x40010c00

0800089c <setTrafficYellow1>:

void setTrafficYellow1() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET); //1
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <setTrafficYellow1+0x20>)
 80008a8:	f000 ff41 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET); //1
 80008ac:	2201      	movs	r2, #1
 80008ae:	2108      	movs	r1, #8
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <setTrafficYellow1+0x24>)
 80008b2:	f000 ff3c 	bl	800172e <HAL_GPIO_WritePin>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40010800 	.word	0x40010800
 80008c0:	40010c00 	.word	0x40010c00

080008c4 <setTrafficYellow2>:

void setTrafficYellow2() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET); //1
 80008c8:	2201      	movs	r2, #1
 80008ca:	2120      	movs	r1, #32
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <setTrafficYellow2+0x1c>)
 80008ce:	f000 ff2e 	bl	800172e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET); //1
 80008d2:	2201      	movs	r2, #1
 80008d4:	2110      	movs	r1, #16
 80008d6:	4802      	ldr	r0, [pc, #8]	; (80008e0 <setTrafficYellow2+0x1c>)
 80008d8:	f000 ff29 	bl	800172e <HAL_GPIO_WritePin>
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40010c00 	.word	0x40010c00

080008e4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	if ( huart -> Instance == USART2 ) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_UART_RxCpltCallback+0x30>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d10a      	bne.n	800090c <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit (&huart2 , &temp , 1 , 50) ;
 80008f6:	2332      	movs	r3, #50	; 0x32
 80008f8:	2201      	movs	r2, #1
 80008fa:	4907      	ldr	r1, [pc, #28]	; (8000918 <HAL_UART_RxCpltCallback+0x34>)
 80008fc:	4807      	ldr	r0, [pc, #28]	; (800091c <HAL_UART_RxCpltCallback+0x38>)
 80008fe:	f001 ffa8 	bl	8002852 <HAL_UART_Transmit>
		HAL_UART_Receive_IT (&huart2 , &temp , 1) ;
 8000902:	2201      	movs	r2, #1
 8000904:	4904      	ldr	r1, [pc, #16]	; (8000918 <HAL_UART_RxCpltCallback+0x34>)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <HAL_UART_RxCpltCallback+0x38>)
 8000908:	f002 f835 	bl	8002976 <HAL_UART_Receive_IT>
	}
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40004400 	.word	0x40004400
 8000918:	200000b4 	.word	0x200000b4
 800091c:	2000017c 	.word	0x2000017c

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08e      	sub	sp, #56	; 0x38
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000926:	f000 fb47 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092a:	f000 f82b 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092e:	f000 f8db 	bl	8000ae8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000932:	f000 f863 	bl	80009fc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000936:	f000 f8ad 	bl	8000a94 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart2 , &temp , 1) ;
 800093a:	2201      	movs	r2, #1
 800093c:	490d      	ldr	r1, [pc, #52]	; (8000974 <main+0x54>)
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <main+0x58>)
 8000940:	f002 f819 	bl	8002976 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <main+0x5c>)
 8000946:	f001 fb8d 	bl	8002064 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t aValue = 8;
 800094a:	2308      	movs	r3, #8
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  char str[50];
  initSomeVariables();
 800094e:	f7ff fbfd 	bl	800014c <initSomeVariables>
  while (1)
  {
	  HAL_UART_Transmit(&huart2 , (void*)str, sprintf (str, "%d\n", aValue), 1000);
 8000952:	463b      	mov	r3, r7
 8000954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000956:	490a      	ldr	r1, [pc, #40]	; (8000980 <main+0x60>)
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fc97 	bl	800328c <siprintf>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	4639      	mov	r1, r7
 8000964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <main+0x58>)
 800096a:	f001 ff72 	bl	8002852 <HAL_UART_Transmit>
	  fsm_for_input_processing();
 800096e:	f7ff fded 	bl	800054c <fsm_for_input_processing>
	  HAL_UART_Transmit(&huart2 , (void*)str, sprintf (str, "%d\n", aValue), 1000);
 8000972:	e7ee      	b.n	8000952 <main+0x32>
 8000974:	200000b4 	.word	0x200000b4
 8000978:	2000017c 	.word	0x2000017c
 800097c:	20000134 	.word	0x20000134
 8000980:	08003b18 	.word	0x08003b18

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b090      	sub	sp, #64	; 0x40
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	2228      	movs	r2, #40	; 0x28
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f002 fc72 	bl	800327c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009aa:	2301      	movs	r3, #1
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ae:	2310      	movs	r3, #16
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fee8 	bl	8001790 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009c6:	f000 f909 	bl	8000bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 f954 	bl	8001c90 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009ee:	f000 f8f5 	bl	8000bdc <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3740      	adds	r7, #64	; 0x40
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	463b      	mov	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_TIM2_Init+0x94>)
 8000a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_TIM2_Init+0x94>)
 8000a22:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_TIM2_Init+0x94>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_TIM2_Init+0x94>)
 8000a30:	220a      	movs	r2, #10
 8000a32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_TIM2_Init+0x94>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_TIM2_Init+0x94>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a40:	4813      	ldr	r0, [pc, #76]	; (8000a90 <MX_TIM2_Init+0x94>)
 8000a42:	f001 fabf 	bl	8001fc4 <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a4c:	f000 f8c6 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_TIM2_Init+0x94>)
 8000a5e:	f001 fc5b 	bl	8002318 <HAL_TIM_ConfigClockSource>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a68:	f000 f8b8 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_TIM2_Init+0x94>)
 8000a7a:	f001 fe2d 	bl	80026d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a84:	f000 f8aa 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000134 	.word	0x20000134

08000a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_USART2_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000acc:	f001 fe74 	bl	80027b8 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f000 f881 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000017c 	.word	0x2000017c
 8000ae4:	40004400 	.word	0x40004400

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a2d      	ldr	r2, [pc, #180]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a27      	ldr	r2, [pc, #156]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000b32:	4822      	ldr	r0, [pc, #136]	; (8000bbc <MX_GPIO_Init+0xd4>)
 8000b34:	f000 fdfb 	bl	800172e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000b3e:	4820      	ldr	r0, [pc, #128]	; (8000bc0 <MX_GPIO_Init+0xd8>)
 8000b40:	f000 fdf5 	bl	800172e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000b44:	2313      	movs	r3, #19
 8000b46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	4619      	mov	r1, r3
 8000b56:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <MX_GPIO_Init+0xd8>)
 8000b58:	f000 fc4e 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4813      	ldr	r0, [pc, #76]	; (8000bbc <MX_GPIO_Init+0xd4>)
 8000b70:	f000 fc42 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000b74:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000b78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <MX_GPIO_Init+0xd4>)
 8000b8e:	f000 fc33 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000b92:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_GPIO_Init+0xd8>)
 8000bac:	f000 fc24 	bl	80013f8 <HAL_GPIO_Init>

}
 8000bb0:	bf00      	nop
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010c00 	.word	0x40010c00
 8000bc0:	40010800 	.word	0x40010800

08000bc4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	timerRun();
 8000bcc:	f000 f844 	bl	8000c58 <timerRun>

	getKeyInput();
 8000bd0:	f7ff fafa 	bl	80001c8 <getKeyInput>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <setTimer1>:

int timer5_flag = 0;
int timer5_counter = 0;


void setTimer1(int duration) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <setTimer1+0x2c>)
 8000bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf8:	1092      	asrs	r2, r2, #2
 8000bfa:	17db      	asrs	r3, r3, #31
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <setTimer1+0x30>)
 8000c00:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <setTimer1+0x34>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	66666667 	.word	0x66666667
 8000c18:	200000bc 	.word	0x200000bc
 8000c1c:	200000b8 	.word	0x200000b8

08000c20 <setTimer2>:
void setTimer2(int duration) {
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <setTimer2+0x2c>)
 8000c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c30:	1092      	asrs	r2, r2, #2
 8000c32:	17db      	asrs	r3, r3, #31
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <setTimer2+0x30>)
 8000c38:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <setTimer2+0x34>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	66666667 	.word	0x66666667
 8000c50:	200000c4 	.word	0x200000c4
 8000c54:	200000c0 	.word	0x200000c0

08000c58 <timerRun>:
void setTimer5(int duration) {
	timer5_counter = duration/TICK;
	timer5_flag = 0;
}

void timerRun() {
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8000c5c:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <timerRun+0xac>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	dd0b      	ble.n	8000c7c <timerRun+0x24>
		timer1_counter--;
 8000c64:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <timerRun+0xac>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	4a26      	ldr	r2, [pc, #152]	; (8000d04 <timerRun+0xac>)
 8000c6c:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <timerRun+0xac>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	dc02      	bgt.n	8000c7c <timerRun+0x24>
			timer1_flag = 1;
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <timerRun+0xb0>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <timerRun+0xb4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dd0b      	ble.n	8000c9c <timerRun+0x44>
		timer2_counter--;
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <timerRun+0xb4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <timerRun+0xb4>)
 8000c8c:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <timerRun+0xb4>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	dc02      	bgt.n	8000c9c <timerRun+0x44>
			timer2_flag = 1;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <timerRun+0xb8>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <timerRun+0xbc>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	dd0b      	ble.n	8000cbc <timerRun+0x64>
		timer3_counter--;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <timerRun+0xbc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <timerRun+0xbc>)
 8000cac:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <timerRun+0xbc>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	dc02      	bgt.n	8000cbc <timerRun+0x64>
			timer3_flag = 1;
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <timerRun+0xc0>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0) {
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <timerRun+0xc4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dd0b      	ble.n	8000cdc <timerRun+0x84>
		timer4_counter--;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <timerRun+0xc4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <timerRun+0xc4>)
 8000ccc:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <timerRun+0xc4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	dc02      	bgt.n	8000cdc <timerRun+0x84>
			timer4_flag = 1;
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <timerRun+0xc8>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0) {
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <timerRun+0xcc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	dd0b      	ble.n	8000cfc <timerRun+0xa4>
		timer5_counter--;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <timerRun+0xcc>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <timerRun+0xcc>)
 8000cec:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <timerRun+0xcc>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	dc02      	bgt.n	8000cfc <timerRun+0xa4>
			timer5_flag = 1;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <timerRun+0xd0>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	200000bc 	.word	0x200000bc
 8000d08:	200000b8 	.word	0x200000b8
 8000d0c:	200000c4 	.word	0x200000c4
 8000d10:	200000c0 	.word	0x200000c0
 8000d14:	200000cc 	.word	0x200000cc
 8000d18:	200000c8 	.word	0x200000c8
 8000d1c:	200000d4 	.word	0x200000d4
 8000d20:	200000d0 	.word	0x200000d0
 8000d24:	200000dc 	.word	0x200000dc
 8000d28:	200000d8 	.word	0x200000d8

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_MspInit+0x60>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_MspInit+0x60>)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010000 	.word	0x40010000

08000d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da0:	d113      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_TIM_Base_MspInit+0x44>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_TIM_Base_MspInit+0x44>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_TIM_Base_MspInit+0x44>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	201c      	movs	r0, #28
 8000dc0:	f000 fa33 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dc4:	201c      	movs	r0, #28
 8000dc6:	f000 fa4c 	bl	8001262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <HAL_UART_MspInit+0x98>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d137      	bne.n	8000e68 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <HAL_UART_MspInit+0x9c>)
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <HAL_UART_MspInit+0x9c>)
 8000dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e02:	61d3      	str	r3, [r2, #28]
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <HAL_UART_MspInit+0x9c>)
 8000e06:	69db      	ldr	r3, [r3, #28]
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <HAL_UART_MspInit+0x9c>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <HAL_UART_MspInit+0x9c>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_UART_MspInit+0x9c>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480f      	ldr	r0, [pc, #60]	; (8000e78 <HAL_UART_MspInit+0xa0>)
 8000e3c:	f000 fadc 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e40:	2308      	movs	r3, #8
 8000e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <HAL_UART_MspInit+0xa0>)
 8000e54:	f000 fad0 	bl	80013f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2026      	movs	r0, #38	; 0x26
 8000e5e:	f000 f9e4 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e62:	2026      	movs	r0, #38	; 0x26
 8000e64:	f000 f9fd 	bl	8001262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40004400 	.word	0x40004400
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010800 	.word	0x40010800

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr

08000ea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec2:	f000 f8bf 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIM2_IRQHandler+0x10>)
 8000ed2:	f001 f919 	bl	8002108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000134 	.word	0x20000134

08000ee0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <USART2_IRQHandler+0x10>)
 8000ee6:	f001 fd77 	bl	80029d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000017c 	.word	0x2000017c

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f002 f980 	bl	8003228 <__errno>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20005000 	.word	0x20005000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	200000e0 	.word	0x200000e0
 8000f5c:	200001d8 	.word	0x200001d8

08000f60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6e:	490d      	ldr	r1, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f84:	4c0a      	ldr	r4, [pc, #40]	; (8000fb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f92:	f7ff ffe5 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f002 f94d 	bl	8003234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9a:	f7ff fcc1 	bl	8000920 <main>
  bx lr
 8000f9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000fa8:	08003b80 	.word	0x08003b80
  ldr r2, =_sbss
 8000fac:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000fb0:	200001d4 	.word	0x200001d4

08000fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC1_2_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x28>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x28>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f923 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	200f      	movs	r0, #15
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff feaa 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f93b 	bl	800127e <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f903 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000014 	.word	0x20000014
 800103c:	2000001c 	.word	0x2000001c
 8001040:	20000018 	.word	0x20000018

08001044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x1c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x20>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a03      	ldr	r2, [pc, #12]	; (8001064 <HAL_IncTick+0x20>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	2000001c 	.word	0x2000001c
 8001064:	200001c0 	.word	0x200001c0

08001068 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b02      	ldr	r3, [pc, #8]	; (8001078 <HAL_GetTick+0x10>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	200001c0 	.word	0x200001c0

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4906      	ldr	r1, [pc, #24]	; (8001114 <__NVIC_EnableIRQ+0x34>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff90 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff2d 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff42 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff90 	bl	800116c <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5f 	bl	8001118 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff35 	bl	80010e0 <__NVIC_EnableIRQ>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffa2 	bl	80011d0 <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001296:	b480      	push	{r7}
 8001298:	b085      	sub	sp, #20
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d008      	beq.n	80012be <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2204      	movs	r2, #4
 80012b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e020      	b.n	8001300 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 020e 	bic.w	r2, r2, #14
 80012cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
	...

0800130c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800131e:	2b02      	cmp	r3, #2
 8001320:	d005      	beq.n	800132e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2204      	movs	r2, #4
 8001326:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e051      	b.n	80013d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 020e 	bic.w	r2, r2, #14
 800133c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0201 	bic.w	r2, r2, #1
 800134c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a22      	ldr	r2, [pc, #136]	; (80013dc <HAL_DMA_Abort_IT+0xd0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d029      	beq.n	80013ac <HAL_DMA_Abort_IT+0xa0>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <HAL_DMA_Abort_IT+0xd4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d022      	beq.n	80013a8 <HAL_DMA_Abort_IT+0x9c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <HAL_DMA_Abort_IT+0xd8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d01a      	beq.n	80013a2 <HAL_DMA_Abort_IT+0x96>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_DMA_Abort_IT+0xdc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d012      	beq.n	800139c <HAL_DMA_Abort_IT+0x90>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <HAL_DMA_Abort_IT+0xe0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d00a      	beq.n	8001396 <HAL_DMA_Abort_IT+0x8a>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <HAL_DMA_Abort_IT+0xe4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d102      	bne.n	8001390 <HAL_DMA_Abort_IT+0x84>
 800138a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800138e:	e00e      	b.n	80013ae <HAL_DMA_Abort_IT+0xa2>
 8001390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001394:	e00b      	b.n	80013ae <HAL_DMA_Abort_IT+0xa2>
 8001396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139a:	e008      	b.n	80013ae <HAL_DMA_Abort_IT+0xa2>
 800139c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a0:	e005      	b.n	80013ae <HAL_DMA_Abort_IT+0xa2>
 80013a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a6:	e002      	b.n	80013ae <HAL_DMA_Abort_IT+0xa2>
 80013a8:	2310      	movs	r3, #16
 80013aa:	e000      	b.n	80013ae <HAL_DMA_Abort_IT+0xa2>
 80013ac:	2301      	movs	r3, #1
 80013ae:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <HAL_DMA_Abort_IT+0xe8>)
 80013b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	4798      	blx	r3
    } 
  }
  return status;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40020008 	.word	0x40020008
 80013e0:	4002001c 	.word	0x4002001c
 80013e4:	40020030 	.word	0x40020030
 80013e8:	40020044 	.word	0x40020044
 80013ec:	40020058 	.word	0x40020058
 80013f0:	4002006c 	.word	0x4002006c
 80013f4:	40020000 	.word	0x40020000

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b08b      	sub	sp, #44	; 0x2c
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140a:	e169      	b.n	80016e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800140c:	2201      	movs	r2, #1
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	429a      	cmp	r2, r3
 8001426:	f040 8158 	bne.w	80016da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4a9a      	ldr	r2, [pc, #616]	; (8001698 <HAL_GPIO_Init+0x2a0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d05e      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001434:	4a98      	ldr	r2, [pc, #608]	; (8001698 <HAL_GPIO_Init+0x2a0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d875      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 800143a:	4a98      	ldr	r2, [pc, #608]	; (800169c <HAL_GPIO_Init+0x2a4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d058      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001440:	4a96      	ldr	r2, [pc, #600]	; (800169c <HAL_GPIO_Init+0x2a4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d86f      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 8001446:	4a96      	ldr	r2, [pc, #600]	; (80016a0 <HAL_GPIO_Init+0x2a8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d052      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 800144c:	4a94      	ldr	r2, [pc, #592]	; (80016a0 <HAL_GPIO_Init+0x2a8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d869      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 8001452:	4a94      	ldr	r2, [pc, #592]	; (80016a4 <HAL_GPIO_Init+0x2ac>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d04c      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001458:	4a92      	ldr	r2, [pc, #584]	; (80016a4 <HAL_GPIO_Init+0x2ac>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d863      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 800145e:	4a92      	ldr	r2, [pc, #584]	; (80016a8 <HAL_GPIO_Init+0x2b0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d046      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001464:	4a90      	ldr	r2, [pc, #576]	; (80016a8 <HAL_GPIO_Init+0x2b0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d85d      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 800146a:	2b12      	cmp	r3, #18
 800146c:	d82a      	bhi.n	80014c4 <HAL_GPIO_Init+0xcc>
 800146e:	2b12      	cmp	r3, #18
 8001470:	d859      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 8001472:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <HAL_GPIO_Init+0x80>)
 8001474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001478:	080014f3 	.word	0x080014f3
 800147c:	080014cd 	.word	0x080014cd
 8001480:	080014df 	.word	0x080014df
 8001484:	08001521 	.word	0x08001521
 8001488:	08001527 	.word	0x08001527
 800148c:	08001527 	.word	0x08001527
 8001490:	08001527 	.word	0x08001527
 8001494:	08001527 	.word	0x08001527
 8001498:	08001527 	.word	0x08001527
 800149c:	08001527 	.word	0x08001527
 80014a0:	08001527 	.word	0x08001527
 80014a4:	08001527 	.word	0x08001527
 80014a8:	08001527 	.word	0x08001527
 80014ac:	08001527 	.word	0x08001527
 80014b0:	08001527 	.word	0x08001527
 80014b4:	08001527 	.word	0x08001527
 80014b8:	08001527 	.word	0x08001527
 80014bc:	080014d5 	.word	0x080014d5
 80014c0:	080014e9 	.word	0x080014e9
 80014c4:	4a79      	ldr	r2, [pc, #484]	; (80016ac <HAL_GPIO_Init+0x2b4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ca:	e02c      	b.n	8001526 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e029      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	3304      	adds	r3, #4
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e024      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	3308      	adds	r3, #8
 80014e4:	623b      	str	r3, [r7, #32]
          break;
 80014e6:	e01f      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	330c      	adds	r3, #12
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	e01a      	b.n	8001528 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014fa:	2304      	movs	r3, #4
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e013      	b.n	8001528 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d105      	bne.n	8001514 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001508:	2308      	movs	r3, #8
 800150a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	611a      	str	r2, [r3, #16]
          break;
 8001512:	e009      	b.n	8001528 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001514:	2308      	movs	r3, #8
 8001516:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	615a      	str	r2, [r3, #20]
          break;
 800151e:	e003      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x130>
          break;
 8001526:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2bff      	cmp	r3, #255	; 0xff
 800152c:	d801      	bhi.n	8001532 <HAL_GPIO_Init+0x13a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	e001      	b.n	8001536 <HAL_GPIO_Init+0x13e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2bff      	cmp	r3, #255	; 0xff
 800153c:	d802      	bhi.n	8001544 <HAL_GPIO_Init+0x14c>
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x152>
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	3b08      	subs	r3, #8
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	210f      	movs	r1, #15
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	401a      	ands	r2, r3
 800155c:	6a39      	ldr	r1, [r7, #32]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	431a      	orrs	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80b1 	beq.w	80016da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001578:	4b4d      	ldr	r3, [pc, #308]	; (80016b0 <HAL_GPIO_Init+0x2b8>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a4c      	ldr	r2, [pc, #304]	; (80016b0 <HAL_GPIO_Init+0x2b8>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <HAL_GPIO_Init+0x2b8>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001590:	4a48      	ldr	r2, [pc, #288]	; (80016b4 <HAL_GPIO_Init+0x2bc>)
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	220f      	movs	r2, #15
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a40      	ldr	r2, [pc, #256]	; (80016b8 <HAL_GPIO_Init+0x2c0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d013      	beq.n	80015e4 <HAL_GPIO_Init+0x1ec>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a3f      	ldr	r2, [pc, #252]	; (80016bc <HAL_GPIO_Init+0x2c4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d00d      	beq.n	80015e0 <HAL_GPIO_Init+0x1e8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a3e      	ldr	r2, [pc, #248]	; (80016c0 <HAL_GPIO_Init+0x2c8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d007      	beq.n	80015dc <HAL_GPIO_Init+0x1e4>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a3d      	ldr	r2, [pc, #244]	; (80016c4 <HAL_GPIO_Init+0x2cc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d101      	bne.n	80015d8 <HAL_GPIO_Init+0x1e0>
 80015d4:	2303      	movs	r3, #3
 80015d6:	e006      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015d8:	2304      	movs	r3, #4
 80015da:	e004      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015dc:	2302      	movs	r3, #2
 80015de:	e002      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015e4:	2300      	movs	r3, #0
 80015e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e8:	f002 0203 	and.w	r2, r2, #3
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	4093      	lsls	r3, r2
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015f6:	492f      	ldr	r1, [pc, #188]	; (80016b4 <HAL_GPIO_Init+0x2bc>)
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001610:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	492c      	ldr	r1, [pc, #176]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	4928      	ldr	r1, [pc, #160]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001628:	4013      	ands	r3, r2
 800162a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4922      	ldr	r1, [pc, #136]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	43db      	mvns	r3, r3
 800164e:	491e      	ldr	r1, [pc, #120]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001650:	4013      	ands	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d006      	beq.n	800166e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4918      	ldr	r1, [pc, #96]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	43db      	mvns	r3, r3
 8001676:	4914      	ldr	r1, [pc, #80]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001678:	4013      	ands	r3, r2
 800167a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d021      	beq.n	80016cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	490e      	ldr	r1, [pc, #56]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	60cb      	str	r3, [r1, #12]
 8001694:	e021      	b.n	80016da <HAL_GPIO_Init+0x2e2>
 8001696:	bf00      	nop
 8001698:	10320000 	.word	0x10320000
 800169c:	10310000 	.word	0x10310000
 80016a0:	10220000 	.word	0x10220000
 80016a4:	10210000 	.word	0x10210000
 80016a8:	10120000 	.word	0x10120000
 80016ac:	10110000 	.word	0x10110000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000
 80016b8:	40010800 	.word	0x40010800
 80016bc:	40010c00 	.word	0x40010c00
 80016c0:	40011000 	.word	0x40011000
 80016c4:	40011400 	.word	0x40011400
 80016c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_GPIO_Init+0x304>)
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	4909      	ldr	r1, [pc, #36]	; (80016fc <HAL_GPIO_Init+0x304>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	3301      	adds	r3, #1
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f47f ae8e 	bne.w	800140c <HAL_GPIO_Init+0x14>
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	372c      	adds	r7, #44	; 0x2c
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	40010400 	.word	0x40010400

08001700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e001      	b.n	8001722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	807b      	strh	r3, [r7, #2]
 800173a:	4613      	mov	r3, r2
 800173c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800173e:	787b      	ldrb	r3, [r7, #1]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001744:	887a      	ldrh	r2, [r7, #2]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800174a:	e003      	b.n	8001754 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	041a      	lsls	r2, r3, #16
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	611a      	str	r2, [r3, #16]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800175e:	b480      	push	{r7}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	460b      	mov	r3, r1
 8001768:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001770:	887a      	ldrh	r2, [r7, #2]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4013      	ands	r3, r2
 8001776:	041a      	lsls	r2, r3, #16
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	43d9      	mvns	r1, r3
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	400b      	ands	r3, r1
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	611a      	str	r2, [r3, #16]
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e26c      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8087 	beq.w	80018be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b0:	4b92      	ldr	r3, [pc, #584]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d00c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017bc:	4b8f      	ldr	r3, [pc, #572]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d112      	bne.n	80017ee <HAL_RCC_OscConfig+0x5e>
 80017c8:	4b8c      	ldr	r3, [pc, #560]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d4:	d10b      	bne.n	80017ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d6:	4b89      	ldr	r3, [pc, #548]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d06c      	beq.n	80018bc <HAL_RCC_OscConfig+0x12c>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d168      	bne.n	80018bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e246      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x76>
 80017f8:	4b80      	ldr	r3, [pc, #512]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a7f      	ldr	r2, [pc, #508]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e02e      	b.n	8001864 <HAL_RCC_OscConfig+0xd4>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x98>
 800180e:	4b7b      	ldr	r3, [pc, #492]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a7a      	ldr	r2, [pc, #488]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b78      	ldr	r3, [pc, #480]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a77      	ldr	r2, [pc, #476]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e01d      	b.n	8001864 <HAL_RCC_OscConfig+0xd4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0xbc>
 8001832:	4b72      	ldr	r3, [pc, #456]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a71      	ldr	r2, [pc, #452]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6e      	ldr	r2, [pc, #440]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e00b      	b.n	8001864 <HAL_RCC_OscConfig+0xd4>
 800184c:	4b6b      	ldr	r3, [pc, #428]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a6a      	ldr	r2, [pc, #424]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b68      	ldr	r3, [pc, #416]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a67      	ldr	r2, [pc, #412]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 800185e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001862:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fbfc 	bl	8001068 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fbf8 	bl	8001068 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1fa      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b5d      	ldr	r3, [pc, #372]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0xe4>
 8001892:	e014      	b.n	80018be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fbe8 	bl	8001068 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff fbe4 	bl	8001068 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e1e6      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x10c>
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d063      	beq.n	8001992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ca:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00b      	beq.n	80018ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018d6:	4b49      	ldr	r3, [pc, #292]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d11c      	bne.n	800191c <HAL_RCC_OscConfig+0x18c>
 80018e2:	4b46      	ldr	r3, [pc, #280]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d116      	bne.n	800191c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_RCC_OscConfig+0x176>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e1ba      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4939      	ldr	r1, [pc, #228]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	e03a      	b.n	8001992 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d020      	beq.n	8001966 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001924:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff fb9d 	bl	8001068 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001932:	f7ff fb99 	bl	8001068 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e19b      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4927      	ldr	r1, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
 8001964:	e015      	b.n	8001992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff fb7c 	bl	8001068 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001974:	f7ff fb78 	bl	8001068 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e17a      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d03a      	beq.n	8001a14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d019      	beq.n	80019da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ac:	f7ff fb5c 	bl	8001068 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b4:	f7ff fb58 	bl	8001068 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e15a      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f000 fad8 	bl	8001f88 <RCC_Delay>
 80019d8:	e01c      	b.n	8001a14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e0:	f7ff fb42 	bl	8001068 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e6:	e00f      	b.n	8001a08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e8:	f7ff fb3e 	bl	8001068 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d908      	bls.n	8001a08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e140      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	42420000 	.word	0x42420000
 8001a04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a08:	4b9e      	ldr	r3, [pc, #632]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1e9      	bne.n	80019e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80a6 	beq.w	8001b6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a26:	4b97      	ldr	r3, [pc, #604]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10d      	bne.n	8001a4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b94      	ldr	r3, [pc, #592]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a93      	ldr	r2, [pc, #588]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b91      	ldr	r3, [pc, #580]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	4b8e      	ldr	r3, [pc, #568]	; (8001c88 <HAL_RCC_OscConfig+0x4f8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d118      	bne.n	8001a8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5a:	4b8b      	ldr	r3, [pc, #556]	; (8001c88 <HAL_RCC_OscConfig+0x4f8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a8a      	ldr	r2, [pc, #552]	; (8001c88 <HAL_RCC_OscConfig+0x4f8>)
 8001a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a66:	f7ff faff 	bl	8001068 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6e:	f7ff fafb 	bl	8001068 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	; 0x64
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0fd      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	4b81      	ldr	r3, [pc, #516]	; (8001c88 <HAL_RCC_OscConfig+0x4f8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x312>
 8001a94:	4b7b      	ldr	r3, [pc, #492]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4a7a      	ldr	r2, [pc, #488]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6213      	str	r3, [r2, #32]
 8001aa0:	e02d      	b.n	8001afe <HAL_RCC_OscConfig+0x36e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x334>
 8001aaa:	4b76      	ldr	r3, [pc, #472]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a75      	ldr	r2, [pc, #468]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	4b73      	ldr	r3, [pc, #460]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4a72      	ldr	r2, [pc, #456]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	f023 0304 	bic.w	r3, r3, #4
 8001ac0:	6213      	str	r3, [r2, #32]
 8001ac2:	e01c      	b.n	8001afe <HAL_RCC_OscConfig+0x36e>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d10c      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x356>
 8001acc:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4a6c      	ldr	r2, [pc, #432]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	6213      	str	r3, [r2, #32]
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4a69      	ldr	r2, [pc, #420]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6213      	str	r3, [r2, #32]
 8001ae4:	e00b      	b.n	8001afe <HAL_RCC_OscConfig+0x36e>
 8001ae6:	4b67      	ldr	r3, [pc, #412]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a66      	ldr	r2, [pc, #408]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6213      	str	r3, [r2, #32]
 8001af2:	4b64      	ldr	r3, [pc, #400]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4a63      	ldr	r2, [pc, #396]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	f023 0304 	bic.w	r3, r3, #4
 8001afc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d015      	beq.n	8001b32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff faaf 	bl	8001068 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff faab 	bl	8001068 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e0ab      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	4b57      	ldr	r3, [pc, #348]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0ee      	beq.n	8001b0e <HAL_RCC_OscConfig+0x37e>
 8001b30:	e014      	b.n	8001b5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7ff fa99 	bl	8001068 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff fa95 	bl	8001068 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e095      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1ee      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d105      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b62:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a47      	ldr	r2, [pc, #284]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8081 	beq.w	8001c7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b78:	4b42      	ldr	r3, [pc, #264]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d061      	beq.n	8001c48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d146      	bne.n	8001c1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8c:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <HAL_RCC_OscConfig+0x4fc>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7ff fa69 	bl	8001068 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff fa65 	bl	8001068 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e067      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bac:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc0:	d108      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bc2:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	492d      	ldr	r1, [pc, #180]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a19      	ldr	r1, [r3, #32]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	430b      	orrs	r3, r1
 8001be6:	4927      	ldr	r1, [pc, #156]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <HAL_RCC_OscConfig+0x4fc>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fa39 	bl	8001068 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff fa35 	bl	8001068 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e037      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x46a>
 8001c18:	e02f      	b.n	8001c7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <HAL_RCC_OscConfig+0x4fc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fa22 	bl	8001068 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff fa1e 	bl	8001068 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e020      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x498>
 8001c46:	e018      	b.n	8001c7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e013      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	42420060 	.word	0x42420060

08001c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0d0      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d910      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4965      	ldr	r1, [pc, #404]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0b8      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cec:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d04:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a52      	ldr	r2, [pc, #328]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	494d      	ldr	r1, [pc, #308]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d040      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d115      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e07f      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4e:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e073      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e06b      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6e:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f023 0203 	bic.w	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4936      	ldr	r1, [pc, #216]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d80:	f7ff f972 	bl	8001068 <HAL_GetTick>
 8001d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d88:	f7ff f96e 	bl	8001068 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e053      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 020c 	and.w	r2, r3, #12
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1eb      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d210      	bcs.n	8001de0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 0207 	bic.w	r2, r3, #7
 8001dc6:	4922      	ldr	r1, [pc, #136]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e032      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4916      	ldr	r1, [pc, #88]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	490e      	ldr	r1, [pc, #56]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e1e:	f000 f821 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8001e22:	4602      	mov	r2, r0
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	490a      	ldr	r1, [pc, #40]	; (8001e58 <HAL_RCC_ClockConfig+0x1c8>)
 8001e30:	5ccb      	ldrb	r3, [r1, r3]
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_RCC_ClockConfig+0x1cc>)
 8001e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_ClockConfig+0x1d0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f8d0 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40022000 	.word	0x40022000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08003b2c 	.word	0x08003b2c
 8001e5c:	20000014 	.word	0x20000014
 8001e60:	20000018 	.word	0x20000018

08001e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	b490      	push	{r4, r7}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e6c:	1d3c      	adds	r4, r7, #4
 8001e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e74:	f240 2301 	movw	r3, #513	; 0x201
 8001e78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d002      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d003      	beq.n	8001eaa <HAL_RCC_GetSysClockFreq+0x46>
 8001ea2:	e02d      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea6:	623b      	str	r3, [r7, #32]
      break;
 8001ea8:	e02d      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	0c9b      	lsrs	r3, r3, #18
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ebc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	0c5b      	lsrs	r3, r3, #17
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001edc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee2:	fb02 f203 	mul.w	r2, r2, r3
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	e004      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	623b      	str	r3, [r7, #32]
      break;
 8001efe:	e002      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f02:	623b      	str	r3, [r7, #32]
      break;
 8001f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f06:	6a3b      	ldr	r3, [r7, #32]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc90      	pop	{r4, r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	08003b1c 	.word	0x08003b1c
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	007a1200 	.word	0x007a1200
 8001f20:	003d0900 	.word	0x003d0900

08001f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f28:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	20000014 	.word	0x20000014

08001f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f3c:	f7ff fff2 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4903      	ldr	r1, [pc, #12]	; (8001f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08003b3c 	.word	0x08003b3c

08001f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	0adb      	lsrs	r3, r3, #11
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	4903      	ldr	r1, [pc, #12]	; (8001f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08003b3c 	.word	0x08003b3c

08001f88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <RCC_Delay+0x34>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <RCC_Delay+0x38>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0a5b      	lsrs	r3, r3, #9
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa4:	bf00      	nop
  }
  while (Delay --);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	60fa      	str	r2, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f9      	bne.n	8001fa4 <RCC_Delay+0x1c>
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000014 	.word	0x20000014
 8001fc0:	10624dd3 	.word	0x10624dd3

08001fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e041      	b.n	800205a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe fed0 	bl	8000d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3304      	adds	r3, #4
 8002000:	4619      	mov	r1, r3
 8002002:	4610      	mov	r0, r2
 8002004:	f000 fa70 	bl	80024e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d001      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e03a      	b.n	80020f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a18      	ldr	r2, [pc, #96]	; (80020fc <HAL_TIM_Base_Start_IT+0x98>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00e      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x58>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a6:	d009      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x58>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <HAL_TIM_Base_Start_IT+0x9c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x58>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a13      	ldr	r2, [pc, #76]	; (8002104 <HAL_TIM_Base_Start_IT+0xa0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d111      	bne.n	80020e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d010      	beq.n	80020f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020de:	e007      	b.n	80020f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	40012c00 	.word	0x40012c00
 8002100:	40000400 	.word	0x40000400
 8002104:	40000800 	.word	0x40000800

08002108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d122      	bne.n	8002164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b02      	cmp	r3, #2
 800212a:	d11b      	bne.n	8002164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0202 	mvn.w	r2, #2
 8002134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f9b1 	bl	80024b2 <HAL_TIM_IC_CaptureCallback>
 8002150:	e005      	b.n	800215e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f9a4 	bl	80024a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f9b3 	bl	80024c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b04      	cmp	r3, #4
 8002170:	d122      	bne.n	80021b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b04      	cmp	r3, #4
 800217e:	d11b      	bne.n	80021b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0204 	mvn.w	r2, #4
 8002188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2202      	movs	r2, #2
 800218e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f987 	bl	80024b2 <HAL_TIM_IC_CaptureCallback>
 80021a4:	e005      	b.n	80021b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f97a 	bl	80024a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f989 	bl	80024c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d122      	bne.n	800220c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d11b      	bne.n	800220c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0208 	mvn.w	r2, #8
 80021dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f95d 	bl	80024b2 <HAL_TIM_IC_CaptureCallback>
 80021f8:	e005      	b.n	8002206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f950 	bl	80024a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f95f 	bl	80024c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b10      	cmp	r3, #16
 8002218:	d122      	bne.n	8002260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b10      	cmp	r3, #16
 8002226:	d11b      	bne.n	8002260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0210 	mvn.w	r2, #16
 8002230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2208      	movs	r2, #8
 8002236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f933 	bl	80024b2 <HAL_TIM_IC_CaptureCallback>
 800224c:	e005      	b.n	800225a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f926 	bl	80024a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f935 	bl	80024c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b01      	cmp	r3, #1
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0201 	mvn.w	r2, #1
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fc9c 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	2b80      	cmp	r3, #128	; 0x80
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a4:	2b80      	cmp	r3, #128	; 0x80
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fa77 	bl	80027a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d0:	2b40      	cmp	r3, #64	; 0x40
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f8f9 	bl	80024d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d10e      	bne.n	8002310 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d107      	bne.n	8002310 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0220 	mvn.w	r2, #32
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fa42 	bl	8002794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_TIM_ConfigClockSource+0x18>
 800232c:	2302      	movs	r3, #2
 800232e:	e0b3      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x180>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800234e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002356:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002368:	d03e      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0xd0>
 800236a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236e:	f200 8087 	bhi.w	8002480 <HAL_TIM_ConfigClockSource+0x168>
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	f000 8085 	beq.w	8002484 <HAL_TIM_ConfigClockSource+0x16c>
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	d87f      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 8002380:	2b70      	cmp	r3, #112	; 0x70
 8002382:	d01a      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0xa2>
 8002384:	2b70      	cmp	r3, #112	; 0x70
 8002386:	d87b      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 8002388:	2b60      	cmp	r3, #96	; 0x60
 800238a:	d050      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x116>
 800238c:	2b60      	cmp	r3, #96	; 0x60
 800238e:	d877      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 8002390:	2b50      	cmp	r3, #80	; 0x50
 8002392:	d03c      	beq.n	800240e <HAL_TIM_ConfigClockSource+0xf6>
 8002394:	2b50      	cmp	r3, #80	; 0x50
 8002396:	d873      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d058      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x136>
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d86f      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 80023a0:	2b30      	cmp	r3, #48	; 0x30
 80023a2:	d064      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x156>
 80023a4:	2b30      	cmp	r3, #48	; 0x30
 80023a6:	d86b      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d060      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x156>
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d867      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d05c      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x156>
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d05a      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023b8:	e062      	b.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f000 f966 	bl	800269a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	609a      	str	r2, [r3, #8]
      break;
 80023e6:	e04e      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6899      	ldr	r1, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f000 f94f 	bl	800269a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800240a:	609a      	str	r2, [r3, #8]
      break;
 800240c:	e03b      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	f000 f8c6 	bl	80025ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2150      	movs	r1, #80	; 0x50
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f91d 	bl	8002666 <TIM_ITRx_SetConfig>
      break;
 800242c:	e02b      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	461a      	mov	r2, r3
 800243c:	f000 f8e4 	bl	8002608 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2160      	movs	r1, #96	; 0x60
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f90d 	bl	8002666 <TIM_ITRx_SetConfig>
      break;
 800244c:	e01b      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	461a      	mov	r2, r3
 800245c:	f000 f8a6 	bl	80025ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2140      	movs	r1, #64	; 0x40
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f8fd 	bl	8002666 <TIM_ITRx_SetConfig>
      break;
 800246c:	e00b      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	4610      	mov	r0, r2
 800247a:	f000 f8f4 	bl	8002666 <TIM_ITRx_SetConfig>
        break;
 800247e:	e002      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002480:	bf00      	nop
 8002482:	e000      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002484:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a29      	ldr	r2, [pc, #164]	; (80025a0 <TIM_Base_SetConfig+0xb8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00b      	beq.n	8002518 <TIM_Base_SetConfig+0x30>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002506:	d007      	beq.n	8002518 <TIM_Base_SetConfig+0x30>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <TIM_Base_SetConfig+0xbc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <TIM_Base_SetConfig+0x30>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <TIM_Base_SetConfig+0xc0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d108      	bne.n	800252a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <TIM_Base_SetConfig+0xb8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00b      	beq.n	800254a <TIM_Base_SetConfig+0x62>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002538:	d007      	beq.n	800254a <TIM_Base_SetConfig+0x62>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <TIM_Base_SetConfig+0xbc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <TIM_Base_SetConfig+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <TIM_Base_SetConfig+0xc0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d108      	bne.n	800255c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <TIM_Base_SetConfig+0xb8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d103      	bne.n	8002590 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	615a      	str	r2, [r3, #20]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800

080025ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f023 0201 	bic.w	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f023 030a 	bic.w	r3, r3, #10
 80025e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	621a      	str	r2, [r3, #32]
}
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f023 0210 	bic.w	r2, r3, #16
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002632:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	031b      	lsls	r3, r3, #12
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002644:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	621a      	str	r2, [r3, #32]
}
 800265c:	bf00      	nop
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	f043 0307 	orr.w	r3, r3, #7
 8002688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800269a:	b480      	push	{r7}
 800269c:	b087      	sub	sp, #28
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	021a      	lsls	r2, r3, #8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	431a      	orrs	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	609a      	str	r2, [r3, #8]
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e046      	b.n	800277e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a16      	ldr	r2, [pc, #88]	; (8002788 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00e      	beq.n	8002752 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d009      	beq.n	8002752 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a10      	ldr	r2, [pc, #64]	; (8002790 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10c      	bne.n	800276c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	4313      	orrs	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40000400 	.word	0x40000400
 8002790:	40000800 	.word	0x40000800

08002794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e03f      	b.n	800284a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fafa 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	; 0x24
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fc85 	bl	800310c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002820:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002830:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b08a      	sub	sp, #40	; 0x28
 8002856:	af02      	add	r7, sp, #8
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b20      	cmp	r3, #32
 8002870:	d17c      	bne.n	800296c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <HAL_UART_Transmit+0x2c>
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e075      	b.n	800296e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_UART_Transmit+0x3e>
 800288c:	2302      	movs	r3, #2
 800288e:	e06e      	b.n	800296e <HAL_UART_Transmit+0x11c>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2221      	movs	r2, #33	; 0x21
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028a6:	f7fe fbdf 	bl	8001068 <HAL_GetTick>
 80028aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c0:	d108      	bne.n	80028d4 <HAL_UART_Transmit+0x82>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d104      	bne.n	80028d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	e003      	b.n	80028dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028e4:	e02a      	b.n	800293c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fa38 	bl	8002d66 <UART_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e036      	b.n	800296e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10b      	bne.n	800291e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002914:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	3302      	adds	r3, #2
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	e007      	b.n	800292e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	3301      	adds	r3, #1
 800292c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1cf      	bne.n	80028e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2200      	movs	r2, #0
 800294e:	2140      	movs	r1, #64	; 0x40
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fa08 	bl	8002d66 <UART_WaitOnFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e006      	b.n	800296e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	4613      	mov	r3, r2
 8002982:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b20      	cmp	r3, #32
 800298e:	d11d      	bne.n	80029cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_UART_Receive_IT+0x26>
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e016      	b.n	80029ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_UART_Receive_IT+0x38>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e00f      	b.n	80029ce <HAL_UART_Receive_IT+0x58>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	461a      	mov	r2, r3
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fa19 	bl	8002dfa <UART_Start_Receive_IT>
 80029c8:	4603      	mov	r3, r0
 80029ca:	e000      	b.n	80029ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10d      	bne.n	8002a2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_UART_IRQHandler+0x52>
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fac9 	bl	8002fba <UART_Receive_IT>
      return;
 8002a28:	e17b      	b.n	8002d22 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80b1 	beq.w	8002b94 <HAL_UART_IRQHandler+0x1bc>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_UART_IRQHandler+0x70>
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80a6 	beq.w	8002b94 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_UART_IRQHandler+0x90>
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_UART_IRQHandler+0xb0>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f043 0202 	orr.w	r2, r3, #2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_UART_IRQHandler+0xd0>
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f043 0204 	orr.w	r2, r3, #4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00f      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xfa>
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d104      	bne.n	8002ac6 <HAL_UART_IRQHandler+0xee>
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f043 0208 	orr.w	r2, r3, #8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 811e 	beq.w	8002d18 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_UART_IRQHandler+0x11e>
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fa62 	bl	8002fba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <HAL_UART_IRQHandler+0x146>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d031      	beq.n	8002b82 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f9a4 	bl	8002e6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d023      	beq.n	8002b7a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b40:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d013      	beq.n	8002b72 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	4a76      	ldr	r2, [pc, #472]	; (8002d28 <HAL_UART_IRQHandler+0x350>)
 8002b50:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fbd8 	bl	800130c <HAL_DMA_Abort_IT>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e00e      	b.n	8002b90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8e3 	bl	8002d3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e00a      	b.n	8002b90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8df 	bl	8002d3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	e006      	b.n	8002b90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f8db 	bl	8002d3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b8e:	e0c3      	b.n	8002d18 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b90:	bf00      	nop
    return;
 8002b92:	e0c1      	b.n	8002d18 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	f040 80a1 	bne.w	8002ce0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 809b 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8095 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d04e      	beq.n	8002c78 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002be4:	8a3b      	ldrh	r3, [r7, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 8098 	beq.w	8002d1c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bf0:	8a3a      	ldrh	r2, [r7, #16]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	f080 8092 	bcs.w	8002d1c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8a3a      	ldrh	r2, [r7, #16]
 8002bfc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d02b      	beq.n	8002c60 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c16:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c36:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0210 	bic.w	r2, r2, #16
 8002c54:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fb1b 	bl	8001296 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f86d 	bl	8002d50 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c76:	e051      	b.n	8002d1c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d047      	beq.n	8002d20 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002c90:	8a7b      	ldrh	r3, [r7, #18]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d044      	beq.n	8002d20 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ca4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0210 	bic.w	r2, r2, #16
 8002cd2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cd4:	8a7b      	ldrh	r3, [r7, #18]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f839 	bl	8002d50 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002cde:	e01f      	b.n	8002d20 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_UART_IRQHandler+0x324>
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f8f9 	bl	8002eec <UART_Transmit_IT>
    return;
 8002cfa:	e012      	b.n	8002d22 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <HAL_UART_IRQHandler+0x34a>
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f93a 	bl	8002f8a <UART_EndTransmit_IT>
    return;
 8002d16:	e004      	b.n	8002d22 <HAL_UART_IRQHandler+0x34a>
    return;
 8002d18:	bf00      	nop
 8002d1a:	e002      	b.n	8002d22 <HAL_UART_IRQHandler+0x34a>
      return;
 8002d1c:	bf00      	nop
 8002d1e:	e000      	b.n	8002d22 <HAL_UART_IRQHandler+0x34a>
      return;
 8002d20:	bf00      	nop
  }
}
 8002d22:	3728      	adds	r7, #40	; 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	08002ec5 	.word	0x08002ec5

08002d2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d76:	e02c      	b.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d028      	beq.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d86:	f7fe f96f 	bl	8001068 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d21d      	bcs.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002da4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e00f      	b.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	bf0c      	ite	eq
 8002de2:	2301      	moveq	r3, #1
 8002de4:	2300      	movne	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d0c3      	beq.n	8002d78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b085      	sub	sp, #20
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	4613      	mov	r3, r2
 8002e06:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	88fa      	ldrh	r2, [r7, #6]
 8002e12:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	88fa      	ldrh	r2, [r7, #6]
 8002e18:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2222      	movs	r2, #34	; 0x22
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e3e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0220 	orr.w	r2, r2, #32
 8002e5e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d107      	bne.n	8002eac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0210 	bic.w	r2, r2, #16
 8002eaa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff ff2d 	bl	8002d3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b21      	cmp	r3, #33	; 0x21
 8002efe:	d13e      	bne.n	8002f7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f08:	d114      	bne.n	8002f34 <UART_Transmit_IT+0x48>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d110      	bne.n	8002f34 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	1c9a      	adds	r2, r3, #2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	621a      	str	r2, [r3, #32]
 8002f32:	e008      	b.n	8002f46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	1c59      	adds	r1, r3, #1
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6211      	str	r1, [r2, #32]
 8002f3e:	781a      	ldrb	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4619      	mov	r1, r3
 8002f54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10f      	bne.n	8002f7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff febe 	bl	8002d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b22      	cmp	r3, #34	; 0x22
 8002fcc:	f040 8099 	bne.w	8003102 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd8:	d117      	bne.n	800300a <UART_Receive_IT+0x50>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d113      	bne.n	800300a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	1c9a      	adds	r2, r3, #2
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
 8003008:	e026      	b.n	8003058 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301c:	d007      	beq.n	800302e <UART_Receive_IT+0x74>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <UART_Receive_IT+0x82>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e008      	b.n	800304e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003048:	b2da      	uxtb	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29b      	uxth	r3, r3
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4619      	mov	r1, r3
 8003066:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003068:	2b00      	cmp	r3, #0
 800306a:	d148      	bne.n	80030fe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0220 	bic.w	r2, r2, #32
 800307a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800308a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d123      	bne.n	80030f4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0210 	bic.w	r2, r2, #16
 80030c0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d10a      	bne.n	80030e6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030ea:	4619      	mov	r1, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff fe2f 	bl	8002d50 <HAL_UARTEx_RxEventCallback>
 80030f2:	e002      	b.n	80030fa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7fd fbf5 	bl	80008e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e002      	b.n	8003104 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
  }
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003146:	f023 030c 	bic.w	r3, r3, #12
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	430b      	orrs	r3, r1
 8003152:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2c      	ldr	r2, [pc, #176]	; (8003220 <UART_SetConfig+0x114>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d103      	bne.n	800317c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003174:	f7fe fef4 	bl	8001f60 <HAL_RCC_GetPCLK2Freq>
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	e002      	b.n	8003182 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800317c:	f7fe fedc 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8003180:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009a      	lsls	r2, r3, #2
 800318c:	441a      	add	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	4a22      	ldr	r2, [pc, #136]	; (8003224 <UART_SetConfig+0x118>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	0119      	lsls	r1, r3, #4
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	009a      	lsls	r2, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b8:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <UART_SetConfig+0x118>)
 80031ba:	fba3 0302 	umull	r0, r3, r3, r2
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2064      	movs	r0, #100	; 0x64
 80031c2:	fb00 f303 	mul.w	r3, r0, r3
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	3332      	adds	r3, #50	; 0x32
 80031cc:	4a15      	ldr	r2, [pc, #84]	; (8003224 <UART_SetConfig+0x118>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d8:	4419      	add	r1, r3
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	009a      	lsls	r2, r3, #2
 80031e4:	441a      	add	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <UART_SetConfig+0x118>)
 80031f2:	fba3 0302 	umull	r0, r3, r3, r2
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	2064      	movs	r0, #100	; 0x64
 80031fa:	fb00 f303 	mul.w	r3, r0, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	3332      	adds	r3, #50	; 0x32
 8003204:	4a07      	ldr	r2, [pc, #28]	; (8003224 <UART_SetConfig+0x118>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	f003 020f 	and.w	r2, r3, #15
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	440a      	add	r2, r1
 8003216:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40013800 	.word	0x40013800
 8003224:	51eb851f 	.word	0x51eb851f

08003228 <__errno>:
 8003228:	4b01      	ldr	r3, [pc, #4]	; (8003230 <__errno+0x8>)
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000020 	.word	0x20000020

08003234 <__libc_init_array>:
 8003234:	b570      	push	{r4, r5, r6, lr}
 8003236:	2600      	movs	r6, #0
 8003238:	4d0c      	ldr	r5, [pc, #48]	; (800326c <__libc_init_array+0x38>)
 800323a:	4c0d      	ldr	r4, [pc, #52]	; (8003270 <__libc_init_array+0x3c>)
 800323c:	1b64      	subs	r4, r4, r5
 800323e:	10a4      	asrs	r4, r4, #2
 8003240:	42a6      	cmp	r6, r4
 8003242:	d109      	bne.n	8003258 <__libc_init_array+0x24>
 8003244:	f000 fc5c 	bl	8003b00 <_init>
 8003248:	2600      	movs	r6, #0
 800324a:	4d0a      	ldr	r5, [pc, #40]	; (8003274 <__libc_init_array+0x40>)
 800324c:	4c0a      	ldr	r4, [pc, #40]	; (8003278 <__libc_init_array+0x44>)
 800324e:	1b64      	subs	r4, r4, r5
 8003250:	10a4      	asrs	r4, r4, #2
 8003252:	42a6      	cmp	r6, r4
 8003254:	d105      	bne.n	8003262 <__libc_init_array+0x2e>
 8003256:	bd70      	pop	{r4, r5, r6, pc}
 8003258:	f855 3b04 	ldr.w	r3, [r5], #4
 800325c:	4798      	blx	r3
 800325e:	3601      	adds	r6, #1
 8003260:	e7ee      	b.n	8003240 <__libc_init_array+0xc>
 8003262:	f855 3b04 	ldr.w	r3, [r5], #4
 8003266:	4798      	blx	r3
 8003268:	3601      	adds	r6, #1
 800326a:	e7f2      	b.n	8003252 <__libc_init_array+0x1e>
 800326c:	08003b78 	.word	0x08003b78
 8003270:	08003b78 	.word	0x08003b78
 8003274:	08003b78 	.word	0x08003b78
 8003278:	08003b7c 	.word	0x08003b7c

0800327c <memset>:
 800327c:	4603      	mov	r3, r0
 800327e:	4402      	add	r2, r0
 8003280:	4293      	cmp	r3, r2
 8003282:	d100      	bne.n	8003286 <memset+0xa>
 8003284:	4770      	bx	lr
 8003286:	f803 1b01 	strb.w	r1, [r3], #1
 800328a:	e7f9      	b.n	8003280 <memset+0x4>

0800328c <siprintf>:
 800328c:	b40e      	push	{r1, r2, r3}
 800328e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003292:	b500      	push	{lr}
 8003294:	b09c      	sub	sp, #112	; 0x70
 8003296:	ab1d      	add	r3, sp, #116	; 0x74
 8003298:	9002      	str	r0, [sp, #8]
 800329a:	9006      	str	r0, [sp, #24]
 800329c:	9107      	str	r1, [sp, #28]
 800329e:	9104      	str	r1, [sp, #16]
 80032a0:	4808      	ldr	r0, [pc, #32]	; (80032c4 <siprintf+0x38>)
 80032a2:	4909      	ldr	r1, [pc, #36]	; (80032c8 <siprintf+0x3c>)
 80032a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80032a8:	9105      	str	r1, [sp, #20]
 80032aa:	6800      	ldr	r0, [r0, #0]
 80032ac:	a902      	add	r1, sp, #8
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	f000 f868 	bl	8003384 <_svfiprintf_r>
 80032b4:	2200      	movs	r2, #0
 80032b6:	9b02      	ldr	r3, [sp, #8]
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	b01c      	add	sp, #112	; 0x70
 80032bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80032c0:	b003      	add	sp, #12
 80032c2:	4770      	bx	lr
 80032c4:	20000020 	.word	0x20000020
 80032c8:	ffff0208 	.word	0xffff0208

080032cc <__ssputs_r>:
 80032cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032d0:	688e      	ldr	r6, [r1, #8]
 80032d2:	4682      	mov	sl, r0
 80032d4:	429e      	cmp	r6, r3
 80032d6:	460c      	mov	r4, r1
 80032d8:	4690      	mov	r8, r2
 80032da:	461f      	mov	r7, r3
 80032dc:	d838      	bhi.n	8003350 <__ssputs_r+0x84>
 80032de:	898a      	ldrh	r2, [r1, #12]
 80032e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032e4:	d032      	beq.n	800334c <__ssputs_r+0x80>
 80032e6:	6825      	ldr	r5, [r4, #0]
 80032e8:	6909      	ldr	r1, [r1, #16]
 80032ea:	3301      	adds	r3, #1
 80032ec:	eba5 0901 	sub.w	r9, r5, r1
 80032f0:	6965      	ldr	r5, [r4, #20]
 80032f2:	444b      	add	r3, r9
 80032f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032fc:	106d      	asrs	r5, r5, #1
 80032fe:	429d      	cmp	r5, r3
 8003300:	bf38      	it	cc
 8003302:	461d      	movcc	r5, r3
 8003304:	0553      	lsls	r3, r2, #21
 8003306:	d531      	bpl.n	800336c <__ssputs_r+0xa0>
 8003308:	4629      	mov	r1, r5
 800330a:	f000 fb53 	bl	80039b4 <_malloc_r>
 800330e:	4606      	mov	r6, r0
 8003310:	b950      	cbnz	r0, 8003328 <__ssputs_r+0x5c>
 8003312:	230c      	movs	r3, #12
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f8ca 3000 	str.w	r3, [sl]
 800331c:	89a3      	ldrh	r3, [r4, #12]
 800331e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003328:	464a      	mov	r2, r9
 800332a:	6921      	ldr	r1, [r4, #16]
 800332c:	f000 face 	bl	80038cc <memcpy>
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333a:	81a3      	strh	r3, [r4, #12]
 800333c:	6126      	str	r6, [r4, #16]
 800333e:	444e      	add	r6, r9
 8003340:	6026      	str	r6, [r4, #0]
 8003342:	463e      	mov	r6, r7
 8003344:	6165      	str	r5, [r4, #20]
 8003346:	eba5 0509 	sub.w	r5, r5, r9
 800334a:	60a5      	str	r5, [r4, #8]
 800334c:	42be      	cmp	r6, r7
 800334e:	d900      	bls.n	8003352 <__ssputs_r+0x86>
 8003350:	463e      	mov	r6, r7
 8003352:	4632      	mov	r2, r6
 8003354:	4641      	mov	r1, r8
 8003356:	6820      	ldr	r0, [r4, #0]
 8003358:	f000 fac6 	bl	80038e8 <memmove>
 800335c:	68a3      	ldr	r3, [r4, #8]
 800335e:	6822      	ldr	r2, [r4, #0]
 8003360:	1b9b      	subs	r3, r3, r6
 8003362:	4432      	add	r2, r6
 8003364:	2000      	movs	r0, #0
 8003366:	60a3      	str	r3, [r4, #8]
 8003368:	6022      	str	r2, [r4, #0]
 800336a:	e7db      	b.n	8003324 <__ssputs_r+0x58>
 800336c:	462a      	mov	r2, r5
 800336e:	f000 fb7b 	bl	8003a68 <_realloc_r>
 8003372:	4606      	mov	r6, r0
 8003374:	2800      	cmp	r0, #0
 8003376:	d1e1      	bne.n	800333c <__ssputs_r+0x70>
 8003378:	4650      	mov	r0, sl
 800337a:	6921      	ldr	r1, [r4, #16]
 800337c:	f000 face 	bl	800391c <_free_r>
 8003380:	e7c7      	b.n	8003312 <__ssputs_r+0x46>
	...

08003384 <_svfiprintf_r>:
 8003384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003388:	4698      	mov	r8, r3
 800338a:	898b      	ldrh	r3, [r1, #12]
 800338c:	4607      	mov	r7, r0
 800338e:	061b      	lsls	r3, r3, #24
 8003390:	460d      	mov	r5, r1
 8003392:	4614      	mov	r4, r2
 8003394:	b09d      	sub	sp, #116	; 0x74
 8003396:	d50e      	bpl.n	80033b6 <_svfiprintf_r+0x32>
 8003398:	690b      	ldr	r3, [r1, #16]
 800339a:	b963      	cbnz	r3, 80033b6 <_svfiprintf_r+0x32>
 800339c:	2140      	movs	r1, #64	; 0x40
 800339e:	f000 fb09 	bl	80039b4 <_malloc_r>
 80033a2:	6028      	str	r0, [r5, #0]
 80033a4:	6128      	str	r0, [r5, #16]
 80033a6:	b920      	cbnz	r0, 80033b2 <_svfiprintf_r+0x2e>
 80033a8:	230c      	movs	r3, #12
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295
 80033b0:	e0d1      	b.n	8003556 <_svfiprintf_r+0x1d2>
 80033b2:	2340      	movs	r3, #64	; 0x40
 80033b4:	616b      	str	r3, [r5, #20]
 80033b6:	2300      	movs	r3, #0
 80033b8:	9309      	str	r3, [sp, #36]	; 0x24
 80033ba:	2320      	movs	r3, #32
 80033bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033c0:	2330      	movs	r3, #48	; 0x30
 80033c2:	f04f 0901 	mov.w	r9, #1
 80033c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80033ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003570 <_svfiprintf_r+0x1ec>
 80033ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033d2:	4623      	mov	r3, r4
 80033d4:	469a      	mov	sl, r3
 80033d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033da:	b10a      	cbz	r2, 80033e0 <_svfiprintf_r+0x5c>
 80033dc:	2a25      	cmp	r2, #37	; 0x25
 80033de:	d1f9      	bne.n	80033d4 <_svfiprintf_r+0x50>
 80033e0:	ebba 0b04 	subs.w	fp, sl, r4
 80033e4:	d00b      	beq.n	80033fe <_svfiprintf_r+0x7a>
 80033e6:	465b      	mov	r3, fp
 80033e8:	4622      	mov	r2, r4
 80033ea:	4629      	mov	r1, r5
 80033ec:	4638      	mov	r0, r7
 80033ee:	f7ff ff6d 	bl	80032cc <__ssputs_r>
 80033f2:	3001      	adds	r0, #1
 80033f4:	f000 80aa 	beq.w	800354c <_svfiprintf_r+0x1c8>
 80033f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033fa:	445a      	add	r2, fp
 80033fc:	9209      	str	r2, [sp, #36]	; 0x24
 80033fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80a2 	beq.w	800354c <_svfiprintf_r+0x1c8>
 8003408:	2300      	movs	r3, #0
 800340a:	f04f 32ff 	mov.w	r2, #4294967295
 800340e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003412:	f10a 0a01 	add.w	sl, sl, #1
 8003416:	9304      	str	r3, [sp, #16]
 8003418:	9307      	str	r3, [sp, #28]
 800341a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800341e:	931a      	str	r3, [sp, #104]	; 0x68
 8003420:	4654      	mov	r4, sl
 8003422:	2205      	movs	r2, #5
 8003424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003428:	4851      	ldr	r0, [pc, #324]	; (8003570 <_svfiprintf_r+0x1ec>)
 800342a:	f000 fa41 	bl	80038b0 <memchr>
 800342e:	9a04      	ldr	r2, [sp, #16]
 8003430:	b9d8      	cbnz	r0, 800346a <_svfiprintf_r+0xe6>
 8003432:	06d0      	lsls	r0, r2, #27
 8003434:	bf44      	itt	mi
 8003436:	2320      	movmi	r3, #32
 8003438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800343c:	0711      	lsls	r1, r2, #28
 800343e:	bf44      	itt	mi
 8003440:	232b      	movmi	r3, #43	; 0x2b
 8003442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003446:	f89a 3000 	ldrb.w	r3, [sl]
 800344a:	2b2a      	cmp	r3, #42	; 0x2a
 800344c:	d015      	beq.n	800347a <_svfiprintf_r+0xf6>
 800344e:	4654      	mov	r4, sl
 8003450:	2000      	movs	r0, #0
 8003452:	f04f 0c0a 	mov.w	ip, #10
 8003456:	9a07      	ldr	r2, [sp, #28]
 8003458:	4621      	mov	r1, r4
 800345a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800345e:	3b30      	subs	r3, #48	; 0x30
 8003460:	2b09      	cmp	r3, #9
 8003462:	d94e      	bls.n	8003502 <_svfiprintf_r+0x17e>
 8003464:	b1b0      	cbz	r0, 8003494 <_svfiprintf_r+0x110>
 8003466:	9207      	str	r2, [sp, #28]
 8003468:	e014      	b.n	8003494 <_svfiprintf_r+0x110>
 800346a:	eba0 0308 	sub.w	r3, r0, r8
 800346e:	fa09 f303 	lsl.w	r3, r9, r3
 8003472:	4313      	orrs	r3, r2
 8003474:	46a2      	mov	sl, r4
 8003476:	9304      	str	r3, [sp, #16]
 8003478:	e7d2      	b.n	8003420 <_svfiprintf_r+0x9c>
 800347a:	9b03      	ldr	r3, [sp, #12]
 800347c:	1d19      	adds	r1, r3, #4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	9103      	str	r1, [sp, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	bfbb      	ittet	lt
 8003486:	425b      	neglt	r3, r3
 8003488:	f042 0202 	orrlt.w	r2, r2, #2
 800348c:	9307      	strge	r3, [sp, #28]
 800348e:	9307      	strlt	r3, [sp, #28]
 8003490:	bfb8      	it	lt
 8003492:	9204      	strlt	r2, [sp, #16]
 8003494:	7823      	ldrb	r3, [r4, #0]
 8003496:	2b2e      	cmp	r3, #46	; 0x2e
 8003498:	d10c      	bne.n	80034b4 <_svfiprintf_r+0x130>
 800349a:	7863      	ldrb	r3, [r4, #1]
 800349c:	2b2a      	cmp	r3, #42	; 0x2a
 800349e:	d135      	bne.n	800350c <_svfiprintf_r+0x188>
 80034a0:	9b03      	ldr	r3, [sp, #12]
 80034a2:	3402      	adds	r4, #2
 80034a4:	1d1a      	adds	r2, r3, #4
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	9203      	str	r2, [sp, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bfb8      	it	lt
 80034ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80034b2:	9305      	str	r3, [sp, #20]
 80034b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003580 <_svfiprintf_r+0x1fc>
 80034b8:	2203      	movs	r2, #3
 80034ba:	4650      	mov	r0, sl
 80034bc:	7821      	ldrb	r1, [r4, #0]
 80034be:	f000 f9f7 	bl	80038b0 <memchr>
 80034c2:	b140      	cbz	r0, 80034d6 <_svfiprintf_r+0x152>
 80034c4:	2340      	movs	r3, #64	; 0x40
 80034c6:	eba0 000a 	sub.w	r0, r0, sl
 80034ca:	fa03 f000 	lsl.w	r0, r3, r0
 80034ce:	9b04      	ldr	r3, [sp, #16]
 80034d0:	3401      	adds	r4, #1
 80034d2:	4303      	orrs	r3, r0
 80034d4:	9304      	str	r3, [sp, #16]
 80034d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034da:	2206      	movs	r2, #6
 80034dc:	4825      	ldr	r0, [pc, #148]	; (8003574 <_svfiprintf_r+0x1f0>)
 80034de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034e2:	f000 f9e5 	bl	80038b0 <memchr>
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d038      	beq.n	800355c <_svfiprintf_r+0x1d8>
 80034ea:	4b23      	ldr	r3, [pc, #140]	; (8003578 <_svfiprintf_r+0x1f4>)
 80034ec:	bb1b      	cbnz	r3, 8003536 <_svfiprintf_r+0x1b2>
 80034ee:	9b03      	ldr	r3, [sp, #12]
 80034f0:	3307      	adds	r3, #7
 80034f2:	f023 0307 	bic.w	r3, r3, #7
 80034f6:	3308      	adds	r3, #8
 80034f8:	9303      	str	r3, [sp, #12]
 80034fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034fc:	4433      	add	r3, r6
 80034fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003500:	e767      	b.n	80033d2 <_svfiprintf_r+0x4e>
 8003502:	460c      	mov	r4, r1
 8003504:	2001      	movs	r0, #1
 8003506:	fb0c 3202 	mla	r2, ip, r2, r3
 800350a:	e7a5      	b.n	8003458 <_svfiprintf_r+0xd4>
 800350c:	2300      	movs	r3, #0
 800350e:	f04f 0c0a 	mov.w	ip, #10
 8003512:	4619      	mov	r1, r3
 8003514:	3401      	adds	r4, #1
 8003516:	9305      	str	r3, [sp, #20]
 8003518:	4620      	mov	r0, r4
 800351a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800351e:	3a30      	subs	r2, #48	; 0x30
 8003520:	2a09      	cmp	r2, #9
 8003522:	d903      	bls.n	800352c <_svfiprintf_r+0x1a8>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0c5      	beq.n	80034b4 <_svfiprintf_r+0x130>
 8003528:	9105      	str	r1, [sp, #20]
 800352a:	e7c3      	b.n	80034b4 <_svfiprintf_r+0x130>
 800352c:	4604      	mov	r4, r0
 800352e:	2301      	movs	r3, #1
 8003530:	fb0c 2101 	mla	r1, ip, r1, r2
 8003534:	e7f0      	b.n	8003518 <_svfiprintf_r+0x194>
 8003536:	ab03      	add	r3, sp, #12
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	462a      	mov	r2, r5
 800353c:	4638      	mov	r0, r7
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <_svfiprintf_r+0x1f8>)
 8003540:	a904      	add	r1, sp, #16
 8003542:	f3af 8000 	nop.w
 8003546:	1c42      	adds	r2, r0, #1
 8003548:	4606      	mov	r6, r0
 800354a:	d1d6      	bne.n	80034fa <_svfiprintf_r+0x176>
 800354c:	89ab      	ldrh	r3, [r5, #12]
 800354e:	065b      	lsls	r3, r3, #25
 8003550:	f53f af2c 	bmi.w	80033ac <_svfiprintf_r+0x28>
 8003554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003556:	b01d      	add	sp, #116	; 0x74
 8003558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800355c:	ab03      	add	r3, sp, #12
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	462a      	mov	r2, r5
 8003562:	4638      	mov	r0, r7
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <_svfiprintf_r+0x1f8>)
 8003566:	a904      	add	r1, sp, #16
 8003568:	f000 f87c 	bl	8003664 <_printf_i>
 800356c:	e7eb      	b.n	8003546 <_svfiprintf_r+0x1c2>
 800356e:	bf00      	nop
 8003570:	08003b44 	.word	0x08003b44
 8003574:	08003b4e 	.word	0x08003b4e
 8003578:	00000000 	.word	0x00000000
 800357c:	080032cd 	.word	0x080032cd
 8003580:	08003b4a 	.word	0x08003b4a

08003584 <_printf_common>:
 8003584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003588:	4616      	mov	r6, r2
 800358a:	4699      	mov	r9, r3
 800358c:	688a      	ldr	r2, [r1, #8]
 800358e:	690b      	ldr	r3, [r1, #16]
 8003590:	4607      	mov	r7, r0
 8003592:	4293      	cmp	r3, r2
 8003594:	bfb8      	it	lt
 8003596:	4613      	movlt	r3, r2
 8003598:	6033      	str	r3, [r6, #0]
 800359a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800359e:	460c      	mov	r4, r1
 80035a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035a4:	b10a      	cbz	r2, 80035aa <_printf_common+0x26>
 80035a6:	3301      	adds	r3, #1
 80035a8:	6033      	str	r3, [r6, #0]
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	0699      	lsls	r1, r3, #26
 80035ae:	bf42      	ittt	mi
 80035b0:	6833      	ldrmi	r3, [r6, #0]
 80035b2:	3302      	addmi	r3, #2
 80035b4:	6033      	strmi	r3, [r6, #0]
 80035b6:	6825      	ldr	r5, [r4, #0]
 80035b8:	f015 0506 	ands.w	r5, r5, #6
 80035bc:	d106      	bne.n	80035cc <_printf_common+0x48>
 80035be:	f104 0a19 	add.w	sl, r4, #25
 80035c2:	68e3      	ldr	r3, [r4, #12]
 80035c4:	6832      	ldr	r2, [r6, #0]
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	42ab      	cmp	r3, r5
 80035ca:	dc28      	bgt.n	800361e <_printf_common+0x9a>
 80035cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035d0:	1e13      	subs	r3, r2, #0
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	bf18      	it	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	0692      	lsls	r2, r2, #26
 80035da:	d42d      	bmi.n	8003638 <_printf_common+0xb4>
 80035dc:	4649      	mov	r1, r9
 80035de:	4638      	mov	r0, r7
 80035e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035e4:	47c0      	blx	r8
 80035e6:	3001      	adds	r0, #1
 80035e8:	d020      	beq.n	800362c <_printf_common+0xa8>
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	68e5      	ldr	r5, [r4, #12]
 80035ee:	f003 0306 	and.w	r3, r3, #6
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	bf18      	it	ne
 80035f6:	2500      	movne	r5, #0
 80035f8:	6832      	ldr	r2, [r6, #0]
 80035fa:	f04f 0600 	mov.w	r6, #0
 80035fe:	68a3      	ldr	r3, [r4, #8]
 8003600:	bf08      	it	eq
 8003602:	1aad      	subeq	r5, r5, r2
 8003604:	6922      	ldr	r2, [r4, #16]
 8003606:	bf08      	it	eq
 8003608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800360c:	4293      	cmp	r3, r2
 800360e:	bfc4      	itt	gt
 8003610:	1a9b      	subgt	r3, r3, r2
 8003612:	18ed      	addgt	r5, r5, r3
 8003614:	341a      	adds	r4, #26
 8003616:	42b5      	cmp	r5, r6
 8003618:	d11a      	bne.n	8003650 <_printf_common+0xcc>
 800361a:	2000      	movs	r0, #0
 800361c:	e008      	b.n	8003630 <_printf_common+0xac>
 800361e:	2301      	movs	r3, #1
 8003620:	4652      	mov	r2, sl
 8003622:	4649      	mov	r1, r9
 8003624:	4638      	mov	r0, r7
 8003626:	47c0      	blx	r8
 8003628:	3001      	adds	r0, #1
 800362a:	d103      	bne.n	8003634 <_printf_common+0xb0>
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003634:	3501      	adds	r5, #1
 8003636:	e7c4      	b.n	80035c2 <_printf_common+0x3e>
 8003638:	2030      	movs	r0, #48	; 0x30
 800363a:	18e1      	adds	r1, r4, r3
 800363c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003646:	4422      	add	r2, r4
 8003648:	3302      	adds	r3, #2
 800364a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800364e:	e7c5      	b.n	80035dc <_printf_common+0x58>
 8003650:	2301      	movs	r3, #1
 8003652:	4622      	mov	r2, r4
 8003654:	4649      	mov	r1, r9
 8003656:	4638      	mov	r0, r7
 8003658:	47c0      	blx	r8
 800365a:	3001      	adds	r0, #1
 800365c:	d0e6      	beq.n	800362c <_printf_common+0xa8>
 800365e:	3601      	adds	r6, #1
 8003660:	e7d9      	b.n	8003616 <_printf_common+0x92>
	...

08003664 <_printf_i>:
 8003664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003668:	460c      	mov	r4, r1
 800366a:	7e27      	ldrb	r7, [r4, #24]
 800366c:	4691      	mov	r9, r2
 800366e:	2f78      	cmp	r7, #120	; 0x78
 8003670:	4680      	mov	r8, r0
 8003672:	469a      	mov	sl, r3
 8003674:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003676:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800367a:	d807      	bhi.n	800368c <_printf_i+0x28>
 800367c:	2f62      	cmp	r7, #98	; 0x62
 800367e:	d80a      	bhi.n	8003696 <_printf_i+0x32>
 8003680:	2f00      	cmp	r7, #0
 8003682:	f000 80d9 	beq.w	8003838 <_printf_i+0x1d4>
 8003686:	2f58      	cmp	r7, #88	; 0x58
 8003688:	f000 80a4 	beq.w	80037d4 <_printf_i+0x170>
 800368c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003694:	e03a      	b.n	800370c <_printf_i+0xa8>
 8003696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800369a:	2b15      	cmp	r3, #21
 800369c:	d8f6      	bhi.n	800368c <_printf_i+0x28>
 800369e:	a001      	add	r0, pc, #4	; (adr r0, 80036a4 <_printf_i+0x40>)
 80036a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80036a4:	080036fd 	.word	0x080036fd
 80036a8:	08003711 	.word	0x08003711
 80036ac:	0800368d 	.word	0x0800368d
 80036b0:	0800368d 	.word	0x0800368d
 80036b4:	0800368d 	.word	0x0800368d
 80036b8:	0800368d 	.word	0x0800368d
 80036bc:	08003711 	.word	0x08003711
 80036c0:	0800368d 	.word	0x0800368d
 80036c4:	0800368d 	.word	0x0800368d
 80036c8:	0800368d 	.word	0x0800368d
 80036cc:	0800368d 	.word	0x0800368d
 80036d0:	0800381f 	.word	0x0800381f
 80036d4:	08003741 	.word	0x08003741
 80036d8:	08003801 	.word	0x08003801
 80036dc:	0800368d 	.word	0x0800368d
 80036e0:	0800368d 	.word	0x0800368d
 80036e4:	08003841 	.word	0x08003841
 80036e8:	0800368d 	.word	0x0800368d
 80036ec:	08003741 	.word	0x08003741
 80036f0:	0800368d 	.word	0x0800368d
 80036f4:	0800368d 	.word	0x0800368d
 80036f8:	08003809 	.word	0x08003809
 80036fc:	680b      	ldr	r3, [r1, #0]
 80036fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003702:	1d1a      	adds	r2, r3, #4
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	600a      	str	r2, [r1, #0]
 8003708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800370c:	2301      	movs	r3, #1
 800370e:	e0a4      	b.n	800385a <_printf_i+0x1f6>
 8003710:	6825      	ldr	r5, [r4, #0]
 8003712:	6808      	ldr	r0, [r1, #0]
 8003714:	062e      	lsls	r6, r5, #24
 8003716:	f100 0304 	add.w	r3, r0, #4
 800371a:	d50a      	bpl.n	8003732 <_printf_i+0xce>
 800371c:	6805      	ldr	r5, [r0, #0]
 800371e:	600b      	str	r3, [r1, #0]
 8003720:	2d00      	cmp	r5, #0
 8003722:	da03      	bge.n	800372c <_printf_i+0xc8>
 8003724:	232d      	movs	r3, #45	; 0x2d
 8003726:	426d      	negs	r5, r5
 8003728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800372c:	230a      	movs	r3, #10
 800372e:	485e      	ldr	r0, [pc, #376]	; (80038a8 <_printf_i+0x244>)
 8003730:	e019      	b.n	8003766 <_printf_i+0x102>
 8003732:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003736:	6805      	ldr	r5, [r0, #0]
 8003738:	600b      	str	r3, [r1, #0]
 800373a:	bf18      	it	ne
 800373c:	b22d      	sxthne	r5, r5
 800373e:	e7ef      	b.n	8003720 <_printf_i+0xbc>
 8003740:	680b      	ldr	r3, [r1, #0]
 8003742:	6825      	ldr	r5, [r4, #0]
 8003744:	1d18      	adds	r0, r3, #4
 8003746:	6008      	str	r0, [r1, #0]
 8003748:	0628      	lsls	r0, r5, #24
 800374a:	d501      	bpl.n	8003750 <_printf_i+0xec>
 800374c:	681d      	ldr	r5, [r3, #0]
 800374e:	e002      	b.n	8003756 <_printf_i+0xf2>
 8003750:	0669      	lsls	r1, r5, #25
 8003752:	d5fb      	bpl.n	800374c <_printf_i+0xe8>
 8003754:	881d      	ldrh	r5, [r3, #0]
 8003756:	2f6f      	cmp	r7, #111	; 0x6f
 8003758:	bf0c      	ite	eq
 800375a:	2308      	moveq	r3, #8
 800375c:	230a      	movne	r3, #10
 800375e:	4852      	ldr	r0, [pc, #328]	; (80038a8 <_printf_i+0x244>)
 8003760:	2100      	movs	r1, #0
 8003762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003766:	6866      	ldr	r6, [r4, #4]
 8003768:	2e00      	cmp	r6, #0
 800376a:	bfa8      	it	ge
 800376c:	6821      	ldrge	r1, [r4, #0]
 800376e:	60a6      	str	r6, [r4, #8]
 8003770:	bfa4      	itt	ge
 8003772:	f021 0104 	bicge.w	r1, r1, #4
 8003776:	6021      	strge	r1, [r4, #0]
 8003778:	b90d      	cbnz	r5, 800377e <_printf_i+0x11a>
 800377a:	2e00      	cmp	r6, #0
 800377c:	d04d      	beq.n	800381a <_printf_i+0x1b6>
 800377e:	4616      	mov	r6, r2
 8003780:	fbb5 f1f3 	udiv	r1, r5, r3
 8003784:	fb03 5711 	mls	r7, r3, r1, r5
 8003788:	5dc7      	ldrb	r7, [r0, r7]
 800378a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800378e:	462f      	mov	r7, r5
 8003790:	42bb      	cmp	r3, r7
 8003792:	460d      	mov	r5, r1
 8003794:	d9f4      	bls.n	8003780 <_printf_i+0x11c>
 8003796:	2b08      	cmp	r3, #8
 8003798:	d10b      	bne.n	80037b2 <_printf_i+0x14e>
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	07df      	lsls	r7, r3, #31
 800379e:	d508      	bpl.n	80037b2 <_printf_i+0x14e>
 80037a0:	6923      	ldr	r3, [r4, #16]
 80037a2:	6861      	ldr	r1, [r4, #4]
 80037a4:	4299      	cmp	r1, r3
 80037a6:	bfde      	ittt	le
 80037a8:	2330      	movle	r3, #48	; 0x30
 80037aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037b2:	1b92      	subs	r2, r2, r6
 80037b4:	6122      	str	r2, [r4, #16]
 80037b6:	464b      	mov	r3, r9
 80037b8:	4621      	mov	r1, r4
 80037ba:	4640      	mov	r0, r8
 80037bc:	f8cd a000 	str.w	sl, [sp]
 80037c0:	aa03      	add	r2, sp, #12
 80037c2:	f7ff fedf 	bl	8003584 <_printf_common>
 80037c6:	3001      	adds	r0, #1
 80037c8:	d14c      	bne.n	8003864 <_printf_i+0x200>
 80037ca:	f04f 30ff 	mov.w	r0, #4294967295
 80037ce:	b004      	add	sp, #16
 80037d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d4:	4834      	ldr	r0, [pc, #208]	; (80038a8 <_printf_i+0x244>)
 80037d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037da:	680e      	ldr	r6, [r1, #0]
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	f856 5b04 	ldr.w	r5, [r6], #4
 80037e2:	061f      	lsls	r7, r3, #24
 80037e4:	600e      	str	r6, [r1, #0]
 80037e6:	d514      	bpl.n	8003812 <_printf_i+0x1ae>
 80037e8:	07d9      	lsls	r1, r3, #31
 80037ea:	bf44      	itt	mi
 80037ec:	f043 0320 	orrmi.w	r3, r3, #32
 80037f0:	6023      	strmi	r3, [r4, #0]
 80037f2:	b91d      	cbnz	r5, 80037fc <_printf_i+0x198>
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	f023 0320 	bic.w	r3, r3, #32
 80037fa:	6023      	str	r3, [r4, #0]
 80037fc:	2310      	movs	r3, #16
 80037fe:	e7af      	b.n	8003760 <_printf_i+0xfc>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	f043 0320 	orr.w	r3, r3, #32
 8003806:	6023      	str	r3, [r4, #0]
 8003808:	2378      	movs	r3, #120	; 0x78
 800380a:	4828      	ldr	r0, [pc, #160]	; (80038ac <_printf_i+0x248>)
 800380c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003810:	e7e3      	b.n	80037da <_printf_i+0x176>
 8003812:	065e      	lsls	r6, r3, #25
 8003814:	bf48      	it	mi
 8003816:	b2ad      	uxthmi	r5, r5
 8003818:	e7e6      	b.n	80037e8 <_printf_i+0x184>
 800381a:	4616      	mov	r6, r2
 800381c:	e7bb      	b.n	8003796 <_printf_i+0x132>
 800381e:	680b      	ldr	r3, [r1, #0]
 8003820:	6826      	ldr	r6, [r4, #0]
 8003822:	1d1d      	adds	r5, r3, #4
 8003824:	6960      	ldr	r0, [r4, #20]
 8003826:	600d      	str	r5, [r1, #0]
 8003828:	0635      	lsls	r5, r6, #24
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	d501      	bpl.n	8003832 <_printf_i+0x1ce>
 800382e:	6018      	str	r0, [r3, #0]
 8003830:	e002      	b.n	8003838 <_printf_i+0x1d4>
 8003832:	0671      	lsls	r1, r6, #25
 8003834:	d5fb      	bpl.n	800382e <_printf_i+0x1ca>
 8003836:	8018      	strh	r0, [r3, #0]
 8003838:	2300      	movs	r3, #0
 800383a:	4616      	mov	r6, r2
 800383c:	6123      	str	r3, [r4, #16]
 800383e:	e7ba      	b.n	80037b6 <_printf_i+0x152>
 8003840:	680b      	ldr	r3, [r1, #0]
 8003842:	1d1a      	adds	r2, r3, #4
 8003844:	600a      	str	r2, [r1, #0]
 8003846:	681e      	ldr	r6, [r3, #0]
 8003848:	2100      	movs	r1, #0
 800384a:	4630      	mov	r0, r6
 800384c:	6862      	ldr	r2, [r4, #4]
 800384e:	f000 f82f 	bl	80038b0 <memchr>
 8003852:	b108      	cbz	r0, 8003858 <_printf_i+0x1f4>
 8003854:	1b80      	subs	r0, r0, r6
 8003856:	6060      	str	r0, [r4, #4]
 8003858:	6863      	ldr	r3, [r4, #4]
 800385a:	6123      	str	r3, [r4, #16]
 800385c:	2300      	movs	r3, #0
 800385e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003862:	e7a8      	b.n	80037b6 <_printf_i+0x152>
 8003864:	4632      	mov	r2, r6
 8003866:	4649      	mov	r1, r9
 8003868:	4640      	mov	r0, r8
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	47d0      	blx	sl
 800386e:	3001      	adds	r0, #1
 8003870:	d0ab      	beq.n	80037ca <_printf_i+0x166>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	079b      	lsls	r3, r3, #30
 8003876:	d413      	bmi.n	80038a0 <_printf_i+0x23c>
 8003878:	68e0      	ldr	r0, [r4, #12]
 800387a:	9b03      	ldr	r3, [sp, #12]
 800387c:	4298      	cmp	r0, r3
 800387e:	bfb8      	it	lt
 8003880:	4618      	movlt	r0, r3
 8003882:	e7a4      	b.n	80037ce <_printf_i+0x16a>
 8003884:	2301      	movs	r3, #1
 8003886:	4632      	mov	r2, r6
 8003888:	4649      	mov	r1, r9
 800388a:	4640      	mov	r0, r8
 800388c:	47d0      	blx	sl
 800388e:	3001      	adds	r0, #1
 8003890:	d09b      	beq.n	80037ca <_printf_i+0x166>
 8003892:	3501      	adds	r5, #1
 8003894:	68e3      	ldr	r3, [r4, #12]
 8003896:	9903      	ldr	r1, [sp, #12]
 8003898:	1a5b      	subs	r3, r3, r1
 800389a:	42ab      	cmp	r3, r5
 800389c:	dcf2      	bgt.n	8003884 <_printf_i+0x220>
 800389e:	e7eb      	b.n	8003878 <_printf_i+0x214>
 80038a0:	2500      	movs	r5, #0
 80038a2:	f104 0619 	add.w	r6, r4, #25
 80038a6:	e7f5      	b.n	8003894 <_printf_i+0x230>
 80038a8:	08003b55 	.word	0x08003b55
 80038ac:	08003b66 	.word	0x08003b66

080038b0 <memchr>:
 80038b0:	4603      	mov	r3, r0
 80038b2:	b510      	push	{r4, lr}
 80038b4:	b2c9      	uxtb	r1, r1
 80038b6:	4402      	add	r2, r0
 80038b8:	4293      	cmp	r3, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	d101      	bne.n	80038c2 <memchr+0x12>
 80038be:	2000      	movs	r0, #0
 80038c0:	e003      	b.n	80038ca <memchr+0x1a>
 80038c2:	7804      	ldrb	r4, [r0, #0]
 80038c4:	3301      	adds	r3, #1
 80038c6:	428c      	cmp	r4, r1
 80038c8:	d1f6      	bne.n	80038b8 <memchr+0x8>
 80038ca:	bd10      	pop	{r4, pc}

080038cc <memcpy>:
 80038cc:	440a      	add	r2, r1
 80038ce:	4291      	cmp	r1, r2
 80038d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80038d4:	d100      	bne.n	80038d8 <memcpy+0xc>
 80038d6:	4770      	bx	lr
 80038d8:	b510      	push	{r4, lr}
 80038da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038de:	4291      	cmp	r1, r2
 80038e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038e4:	d1f9      	bne.n	80038da <memcpy+0xe>
 80038e6:	bd10      	pop	{r4, pc}

080038e8 <memmove>:
 80038e8:	4288      	cmp	r0, r1
 80038ea:	b510      	push	{r4, lr}
 80038ec:	eb01 0402 	add.w	r4, r1, r2
 80038f0:	d902      	bls.n	80038f8 <memmove+0x10>
 80038f2:	4284      	cmp	r4, r0
 80038f4:	4623      	mov	r3, r4
 80038f6:	d807      	bhi.n	8003908 <memmove+0x20>
 80038f8:	1e43      	subs	r3, r0, #1
 80038fa:	42a1      	cmp	r1, r4
 80038fc:	d008      	beq.n	8003910 <memmove+0x28>
 80038fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003902:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003906:	e7f8      	b.n	80038fa <memmove+0x12>
 8003908:	4601      	mov	r1, r0
 800390a:	4402      	add	r2, r0
 800390c:	428a      	cmp	r2, r1
 800390e:	d100      	bne.n	8003912 <memmove+0x2a>
 8003910:	bd10      	pop	{r4, pc}
 8003912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800391a:	e7f7      	b.n	800390c <memmove+0x24>

0800391c <_free_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	4605      	mov	r5, r0
 8003920:	2900      	cmp	r1, #0
 8003922:	d043      	beq.n	80039ac <_free_r+0x90>
 8003924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003928:	1f0c      	subs	r4, r1, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	bfb8      	it	lt
 800392e:	18e4      	addlt	r4, r4, r3
 8003930:	f000 f8d0 	bl	8003ad4 <__malloc_lock>
 8003934:	4a1e      	ldr	r2, [pc, #120]	; (80039b0 <_free_r+0x94>)
 8003936:	6813      	ldr	r3, [r2, #0]
 8003938:	4610      	mov	r0, r2
 800393a:	b933      	cbnz	r3, 800394a <_free_r+0x2e>
 800393c:	6063      	str	r3, [r4, #4]
 800393e:	6014      	str	r4, [r2, #0]
 8003940:	4628      	mov	r0, r5
 8003942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003946:	f000 b8cb 	b.w	8003ae0 <__malloc_unlock>
 800394a:	42a3      	cmp	r3, r4
 800394c:	d90a      	bls.n	8003964 <_free_r+0x48>
 800394e:	6821      	ldr	r1, [r4, #0]
 8003950:	1862      	adds	r2, r4, r1
 8003952:	4293      	cmp	r3, r2
 8003954:	bf01      	itttt	eq
 8003956:	681a      	ldreq	r2, [r3, #0]
 8003958:	685b      	ldreq	r3, [r3, #4]
 800395a:	1852      	addeq	r2, r2, r1
 800395c:	6022      	streq	r2, [r4, #0]
 800395e:	6063      	str	r3, [r4, #4]
 8003960:	6004      	str	r4, [r0, #0]
 8003962:	e7ed      	b.n	8003940 <_free_r+0x24>
 8003964:	461a      	mov	r2, r3
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	b10b      	cbz	r3, 800396e <_free_r+0x52>
 800396a:	42a3      	cmp	r3, r4
 800396c:	d9fa      	bls.n	8003964 <_free_r+0x48>
 800396e:	6811      	ldr	r1, [r2, #0]
 8003970:	1850      	adds	r0, r2, r1
 8003972:	42a0      	cmp	r0, r4
 8003974:	d10b      	bne.n	800398e <_free_r+0x72>
 8003976:	6820      	ldr	r0, [r4, #0]
 8003978:	4401      	add	r1, r0
 800397a:	1850      	adds	r0, r2, r1
 800397c:	4283      	cmp	r3, r0
 800397e:	6011      	str	r1, [r2, #0]
 8003980:	d1de      	bne.n	8003940 <_free_r+0x24>
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4401      	add	r1, r0
 8003988:	6011      	str	r1, [r2, #0]
 800398a:	6053      	str	r3, [r2, #4]
 800398c:	e7d8      	b.n	8003940 <_free_r+0x24>
 800398e:	d902      	bls.n	8003996 <_free_r+0x7a>
 8003990:	230c      	movs	r3, #12
 8003992:	602b      	str	r3, [r5, #0]
 8003994:	e7d4      	b.n	8003940 <_free_r+0x24>
 8003996:	6820      	ldr	r0, [r4, #0]
 8003998:	1821      	adds	r1, r4, r0
 800399a:	428b      	cmp	r3, r1
 800399c:	bf01      	itttt	eq
 800399e:	6819      	ldreq	r1, [r3, #0]
 80039a0:	685b      	ldreq	r3, [r3, #4]
 80039a2:	1809      	addeq	r1, r1, r0
 80039a4:	6021      	streq	r1, [r4, #0]
 80039a6:	6063      	str	r3, [r4, #4]
 80039a8:	6054      	str	r4, [r2, #4]
 80039aa:	e7c9      	b.n	8003940 <_free_r+0x24>
 80039ac:	bd38      	pop	{r3, r4, r5, pc}
 80039ae:	bf00      	nop
 80039b0:	200000e4 	.word	0x200000e4

080039b4 <_malloc_r>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	1ccd      	adds	r5, r1, #3
 80039b8:	f025 0503 	bic.w	r5, r5, #3
 80039bc:	3508      	adds	r5, #8
 80039be:	2d0c      	cmp	r5, #12
 80039c0:	bf38      	it	cc
 80039c2:	250c      	movcc	r5, #12
 80039c4:	2d00      	cmp	r5, #0
 80039c6:	4606      	mov	r6, r0
 80039c8:	db01      	blt.n	80039ce <_malloc_r+0x1a>
 80039ca:	42a9      	cmp	r1, r5
 80039cc:	d903      	bls.n	80039d6 <_malloc_r+0x22>
 80039ce:	230c      	movs	r3, #12
 80039d0:	6033      	str	r3, [r6, #0]
 80039d2:	2000      	movs	r0, #0
 80039d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d6:	f000 f87d 	bl	8003ad4 <__malloc_lock>
 80039da:	4921      	ldr	r1, [pc, #132]	; (8003a60 <_malloc_r+0xac>)
 80039dc:	680a      	ldr	r2, [r1, #0]
 80039de:	4614      	mov	r4, r2
 80039e0:	b99c      	cbnz	r4, 8003a0a <_malloc_r+0x56>
 80039e2:	4f20      	ldr	r7, [pc, #128]	; (8003a64 <_malloc_r+0xb0>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	b923      	cbnz	r3, 80039f2 <_malloc_r+0x3e>
 80039e8:	4621      	mov	r1, r4
 80039ea:	4630      	mov	r0, r6
 80039ec:	f000 f862 	bl	8003ab4 <_sbrk_r>
 80039f0:	6038      	str	r0, [r7, #0]
 80039f2:	4629      	mov	r1, r5
 80039f4:	4630      	mov	r0, r6
 80039f6:	f000 f85d 	bl	8003ab4 <_sbrk_r>
 80039fa:	1c43      	adds	r3, r0, #1
 80039fc:	d123      	bne.n	8003a46 <_malloc_r+0x92>
 80039fe:	230c      	movs	r3, #12
 8003a00:	4630      	mov	r0, r6
 8003a02:	6033      	str	r3, [r6, #0]
 8003a04:	f000 f86c 	bl	8003ae0 <__malloc_unlock>
 8003a08:	e7e3      	b.n	80039d2 <_malloc_r+0x1e>
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	1b5b      	subs	r3, r3, r5
 8003a0e:	d417      	bmi.n	8003a40 <_malloc_r+0x8c>
 8003a10:	2b0b      	cmp	r3, #11
 8003a12:	d903      	bls.n	8003a1c <_malloc_r+0x68>
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	441c      	add	r4, r3
 8003a18:	6025      	str	r5, [r4, #0]
 8003a1a:	e004      	b.n	8003a26 <_malloc_r+0x72>
 8003a1c:	6863      	ldr	r3, [r4, #4]
 8003a1e:	42a2      	cmp	r2, r4
 8003a20:	bf0c      	ite	eq
 8003a22:	600b      	streq	r3, [r1, #0]
 8003a24:	6053      	strne	r3, [r2, #4]
 8003a26:	4630      	mov	r0, r6
 8003a28:	f000 f85a 	bl	8003ae0 <__malloc_unlock>
 8003a2c:	f104 000b 	add.w	r0, r4, #11
 8003a30:	1d23      	adds	r3, r4, #4
 8003a32:	f020 0007 	bic.w	r0, r0, #7
 8003a36:	1ac2      	subs	r2, r0, r3
 8003a38:	d0cc      	beq.n	80039d4 <_malloc_r+0x20>
 8003a3a:	1a1b      	subs	r3, r3, r0
 8003a3c:	50a3      	str	r3, [r4, r2]
 8003a3e:	e7c9      	b.n	80039d4 <_malloc_r+0x20>
 8003a40:	4622      	mov	r2, r4
 8003a42:	6864      	ldr	r4, [r4, #4]
 8003a44:	e7cc      	b.n	80039e0 <_malloc_r+0x2c>
 8003a46:	1cc4      	adds	r4, r0, #3
 8003a48:	f024 0403 	bic.w	r4, r4, #3
 8003a4c:	42a0      	cmp	r0, r4
 8003a4e:	d0e3      	beq.n	8003a18 <_malloc_r+0x64>
 8003a50:	1a21      	subs	r1, r4, r0
 8003a52:	4630      	mov	r0, r6
 8003a54:	f000 f82e 	bl	8003ab4 <_sbrk_r>
 8003a58:	3001      	adds	r0, #1
 8003a5a:	d1dd      	bne.n	8003a18 <_malloc_r+0x64>
 8003a5c:	e7cf      	b.n	80039fe <_malloc_r+0x4a>
 8003a5e:	bf00      	nop
 8003a60:	200000e4 	.word	0x200000e4
 8003a64:	200000e8 	.word	0x200000e8

08003a68 <_realloc_r>:
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	4607      	mov	r7, r0
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	460e      	mov	r6, r1
 8003a70:	b921      	cbnz	r1, 8003a7c <_realloc_r+0x14>
 8003a72:	4611      	mov	r1, r2
 8003a74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a78:	f7ff bf9c 	b.w	80039b4 <_malloc_r>
 8003a7c:	b922      	cbnz	r2, 8003a88 <_realloc_r+0x20>
 8003a7e:	f7ff ff4d 	bl	800391c <_free_r>
 8003a82:	4625      	mov	r5, r4
 8003a84:	4628      	mov	r0, r5
 8003a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a88:	f000 f830 	bl	8003aec <_malloc_usable_size_r>
 8003a8c:	42a0      	cmp	r0, r4
 8003a8e:	d20f      	bcs.n	8003ab0 <_realloc_r+0x48>
 8003a90:	4621      	mov	r1, r4
 8003a92:	4638      	mov	r0, r7
 8003a94:	f7ff ff8e 	bl	80039b4 <_malloc_r>
 8003a98:	4605      	mov	r5, r0
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d0f2      	beq.n	8003a84 <_realloc_r+0x1c>
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	f7ff ff13 	bl	80038cc <memcpy>
 8003aa6:	4631      	mov	r1, r6
 8003aa8:	4638      	mov	r0, r7
 8003aaa:	f7ff ff37 	bl	800391c <_free_r>
 8003aae:	e7e9      	b.n	8003a84 <_realloc_r+0x1c>
 8003ab0:	4635      	mov	r5, r6
 8003ab2:	e7e7      	b.n	8003a84 <_realloc_r+0x1c>

08003ab4 <_sbrk_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	4d05      	ldr	r5, [pc, #20]	; (8003ad0 <_sbrk_r+0x1c>)
 8003aba:	4604      	mov	r4, r0
 8003abc:	4608      	mov	r0, r1
 8003abe:	602b      	str	r3, [r5, #0]
 8003ac0:	f7fd fa18 	bl	8000ef4 <_sbrk>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d102      	bne.n	8003ace <_sbrk_r+0x1a>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	b103      	cbz	r3, 8003ace <_sbrk_r+0x1a>
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	200001c4 	.word	0x200001c4

08003ad4 <__malloc_lock>:
 8003ad4:	4801      	ldr	r0, [pc, #4]	; (8003adc <__malloc_lock+0x8>)
 8003ad6:	f000 b811 	b.w	8003afc <__retarget_lock_acquire_recursive>
 8003ada:	bf00      	nop
 8003adc:	200001cc 	.word	0x200001cc

08003ae0 <__malloc_unlock>:
 8003ae0:	4801      	ldr	r0, [pc, #4]	; (8003ae8 <__malloc_unlock+0x8>)
 8003ae2:	f000 b80c 	b.w	8003afe <__retarget_lock_release_recursive>
 8003ae6:	bf00      	nop
 8003ae8:	200001cc 	.word	0x200001cc

08003aec <_malloc_usable_size_r>:
 8003aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003af0:	1f18      	subs	r0, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bfbc      	itt	lt
 8003af6:	580b      	ldrlt	r3, [r1, r0]
 8003af8:	18c0      	addlt	r0, r0, r3
 8003afa:	4770      	bx	lr

08003afc <__retarget_lock_acquire_recursive>:
 8003afc:	4770      	bx	lr

08003afe <__retarget_lock_release_recursive>:
 8003afe:	4770      	bx	lr

08003b00 <_init>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr

08003b0c <_fini>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr
